
BoatController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007004  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b8  080071a4  080071a4  000081a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a5c  08007a5c  00009150  2**0
                  CONTENTS
  4 .ARM          00000008  08007a5c  08007a5c  00008a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a64  08007a64  00009150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a64  08007a64  00008a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a68  08007a68  00008a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  08007a6c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001984  20000150  08007bbc  00009150  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001ad4  08007bbc  00009ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028389  00000000  00000000  00009180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f5b  00000000  00000000  00031509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00013767  00000000  00000000  00037464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  0004abd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002663  00000000  00000000  0004c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ca31  00000000  00000000  0004e953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002dedb  00000000  00000000  0006b384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a103b  00000000  00000000  0009925f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a29a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004890  00000000  00000000  0013a2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0013eb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800718c 	.word	0x0800718c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	0800718c 	.word	0x0800718c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Analog_Start>:
extern ADC_HandleTypeDef hadc1;

static volatile uint16_t values[ANALOG_CHANNELS];

static void begin_conversion(void) {
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)values, ANALOG_CHANNELS);
 8000580:	4902      	ldr	r1, [pc, #8]	@ (800058c <Analog_Start+0xc>)
 8000582:	4803      	ldr	r0, [pc, #12]	@ (8000590 <Analog_Start+0x10>)
 8000584:	2205      	movs	r2, #5
 8000586:	f000 bf63 	b.w	8001450 <HAL_ADC_Start_DMA>
 800058a:	bf00      	nop
 800058c:	2000016c 	.word	0x2000016c
 8000590:	20000350 	.word	0x20000350

08000594 <Analog_GetValue>:
{
	begin_conversion();
}

uint16_t Analog_GetValue(enum AnalogChannel chan) {
	return values[chan];
 8000594:	4b02      	ldr	r3, [pc, #8]	@ (80005a0 <Analog_GetValue+0xc>)
 8000596:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 800059a:	b280      	uxth	r0, r0
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	2000016c 	.word	0x2000016c

080005a4 <HAL_ADC_ConvCpltCallback>:
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)values, ANALOG_CHANNELS);
 80005a4:	4902      	ldr	r1, [pc, #8]	@ (80005b0 <HAL_ADC_ConvCpltCallback+0xc>)
 80005a6:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <HAL_ADC_ConvCpltCallback+0x10>)
 80005a8:	2205      	movs	r2, #5
 80005aa:	f000 bf51 	b.w	8001450 <HAL_ADC_Start_DMA>
 80005ae:	bf00      	nop
 80005b0:	2000016c 	.word	0x2000016c
 80005b4:	20000350 	.word	0x20000350

080005b8 <Control_Init>:
#include "analog.h"
#include "encoder.h"

static uint8_t count = 0;

void Control_Init(void) {
 80005b8:	b508      	push	{r3, lr}
	Analog_Start();
 80005ba:	f7ff ffe1 	bl	8000580 <Analog_Start>
	Timing_Start();
 80005be:	f000 faa9 	bl	8000b14 <Timing_Start>
	ssd1306_Init();
 80005c2:	f004 fdbd 	bl	8005140 <ssd1306_Init>
	NRF24_Init_TX();
 80005c6:	f000 f92b 	bl	8000820 <NRF24_Init_TX>

	HAL_Delay(100);
}
 80005ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(100);
 80005ce:	2064      	movs	r0, #100	@ 0x64
 80005d0:	f000 be80 	b.w	80012d4 <HAL_Delay>

080005d4 <Control_Loop>:
	ssd1306_SetCursor(10, 2);
	ssd1306_WriteString(buf, Font_7x10, 1);
	ssd1306_UpdateScreen();
}

void Control_Loop(void) {
 80005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_Write(MTR, !Input_GetState(BTN2));
 80005d6:	200b      	movs	r0, #11
void Control_Loop(void) {
 80005d8:	b089      	sub	sp, #36	@ 0x24
	GPIO_Write(MTR, !Input_GetState(BTN2));
 80005da:	f000 f91b 	bl	8000814 <Input_GetState>
 80005de:	fab0 f180 	clz	r1, r0
 80005e2:	0949      	lsrs	r1, r1, #5
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 f8e9 	bl	80007bc <GPIO_Write>

	uint8_t data[4];

	int32_t scale = Input_GetState(SW1A);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 f912 	bl	8000814 <Input_GetState>
 80005f0:	4607      	mov	r7, r0

	int32_t enc1 = Encoder_GetRotation(ENCODER1);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 f8d0 	bl	8000798 <Encoder_GetRotation>
 80005f8:	4605      	mov	r5, r0
	int32_t enc2 = Encoder_GetRotation(ENCODER2);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 f8cc 	bl	8000798 <Encoder_GetRotation>
 8000600:	4604      	mov	r4, r0

	uint16_t jy1 = Analog_GetValue(JY2X);
 8000602:	2002      	movs	r0, #2
 8000604:	f7ff ffc6 	bl	8000594 <Analog_GetValue>
 8000608:	4606      	mov	r6, r0
	uint16_t jy2 = Analog_GetValue(JY1X);
 800060a:	2001      	movs	r0, #1
 800060c:	f7ff ffc2 	bl	8000594 <Analog_GetValue>

	if (scale) {
 8000610:	2f00      	cmp	r7, #0
 8000612:	d044      	beq.n	800069e <Control_Loop+0xca>
		jy1 = (jy1-2048)/4+2048;
 8000614:	f5b6 6200 	subs.w	r2, r6, #2048	@ 0x800
 8000618:	bf48      	it	mi
 800061a:	f2a6 72fd 	subwmi	r2, r6, #2045	@ 0x7fd
		jy2 = (jy2-2048)/4+2048;
 800061e:	f5b0 6100 	subs.w	r1, r0, #2048	@ 0x800
 8000622:	bf48      	it	mi
 8000624:	f2a0 71fd 	subwmi	r1, r0, #2045	@ 0x7fd
		jy1 = (jy1-2048)/4+2048;
 8000628:	f3c2 028f 	ubfx	r2, r2, #2, #16
		jy2 = (jy2-2048)/4+2048;
 800062c:	f3c1 018f 	ubfx	r1, r1, #2, #16
		jy1 = (jy1-2048)/4+2048;
 8000630:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
		jy2 = (jy2-2048)/4+2048;
 8000634:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
		jy1 = (jy1-2048)/4+2048;
 8000638:	b292      	uxth	r2, r2
		jy2 = (jy2-2048)/4+2048;
 800063a:	b28b      	uxth	r3, r1
	}else{
		jy1 = (jy1-2048)/2+2048;
		jy2 = (jy2-2048)/2+2048;
	}

	data[0] = jy1/23;
 800063c:	492c      	ldr	r1, [pc, #176]	@ (80006f0 <Control_Loop+0x11c>)
	data[1] = 180 - jy2/23;
 800063e:	fba1 0303 	umull	r0, r3, r1, r3
 8000642:	091b      	lsrs	r3, r3, #4
	data[0] = jy1/23;
 8000644:	fba1 1202 	umull	r1, r2, r1, r2
	data[1] = 180 - jy2/23;
 8000648:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
	data[0] = jy1/23;
 800064c:	f3c2 1207 	ubfx	r2, r2, #4, #8
	data[1] = 180 - jy2/23;
 8000650:	b2db      	uxtb	r3, r3
	if (val < 0) {
 8000652:	2d00      	cmp	r5, #0
	data[0] = jy1/23;
 8000654:	f88d 2008 	strb.w	r2, [sp, #8]
	data[1] = 180 - jy2/23;
 8000658:	f88d 3009 	strb.w	r3, [sp, #9]
	if (val < 0) {
 800065c:	dc46      	bgt.n	80006ec <Control_Loop+0x118>
	data[2] = 173 - clamp(-enc1);
 800065e:	426d      	negs	r5, r5
	if (val > 180) {
 8000660:	2db4      	cmp	r5, #180	@ 0xb4
 8000662:	bfa8      	it	ge
 8000664:	25b4      	movge	r5, #180	@ 0xb4
	data[2] = 173 - clamp(-enc1);
 8000666:	f1c5 05ad 	rsb	r5, r5, #173	@ 0xad
 800066a:	b2ed      	uxtb	r5, r5
	if (val > 180) {
 800066c:	2cb4      	cmp	r4, #180	@ 0xb4
	data[3] = 3 + clamp(enc2);

	if (!count) {
 800066e:	4e21      	ldr	r6, [pc, #132]	@ (80006f4 <Control_Loop+0x120>)
	data[2] = 173 - clamp(-enc1);
 8000670:	f88d 500a 	strb.w	r5, [sp, #10]
	if (val > 180) {
 8000674:	bfa8      	it	ge
 8000676:	24b4      	movge	r4, #180	@ 0xb4
	data[3] = 3 + clamp(enc2);
 8000678:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800067c:	3403      	adds	r4, #3
	if (!count) {
 800067e:	7831      	ldrb	r1, [r6, #0]
	data[3] = 3 + clamp(enc2);
 8000680:	b2e4      	uxtb	r4, r4
 8000682:	f88d 400b 	strb.w	r4, [sp, #11]
	if (!count) {
 8000686:	b1e9      	cbz	r1, 80006c4 <Control_Loop+0xf0>
		update_screen(data);
	}
	count++;
 8000688:	1c4b      	adds	r3, r1, #1

	NRF24_Transmit(data, 4);
 800068a:	a802      	add	r0, sp, #8
 800068c:	2104      	movs	r1, #4
	count++;
 800068e:	7033      	strb	r3, [r6, #0]
	NRF24_Transmit(data, 4);
 8000690:	f000 fa10 	bl	8000ab4 <NRF24_Transmit>
	HAL_Delay(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f000 fe1d 	bl	80012d4 <HAL_Delay>
}
 800069a:	b009      	add	sp, #36	@ 0x24
 800069c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		jy1 = (jy1-2048)/2+2048;
 800069e:	f5a6 6600 	sub.w	r6, r6, #2048	@ 0x800
		jy2 = (jy2-2048)/2+2048;
 80006a2:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
		jy1 = (jy1-2048)/2+2048;
 80006a6:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
		jy2 = (jy2-2048)/2+2048;
 80006aa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
		jy1 = (jy1-2048)/2+2048;
 80006ae:	f3c6 024f 	ubfx	r2, r6, #1, #16
		jy2 = (jy2-2048)/2+2048;
 80006b2:	f3c3 034f 	ubfx	r3, r3, #1, #16
		jy1 = (jy1-2048)/2+2048;
 80006b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
		jy2 = (jy2-2048)/2+2048;
 80006ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
		jy1 = (jy1-2048)/2+2048;
 80006be:	b292      	uxth	r2, r2
		jy2 = (jy2-2048)/2+2048;
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	e7bb      	b.n	800063c <Control_Loop+0x68>
	sprintf(buf, "%3d,%3d,%3d,%3d", vals[0], vals[1], vals[2], vals[3]);
 80006c4:	490c      	ldr	r1, [pc, #48]	@ (80006f8 <Control_Loop+0x124>)
 80006c6:	9401      	str	r4, [sp, #4]
 80006c8:	9500      	str	r5, [sp, #0]
 80006ca:	a803      	add	r0, sp, #12
 80006cc:	f006 f8be 	bl	800684c <siprintf>
	ssd1306_SetCursor(10, 2);
 80006d0:	2102      	movs	r1, #2
 80006d2:	200a      	movs	r0, #10
 80006d4:	f004 ffa2 	bl	800561c <ssd1306_SetCursor>
	ssd1306_WriteString(buf, Font_7x10, 1);
 80006d8:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <Control_Loop+0x128>)
 80006da:	2301      	movs	r3, #1
 80006dc:	ca06      	ldmia	r2, {r1, r2}
 80006de:	a803      	add	r0, sp, #12
 80006e0:	f004 ff80 	bl	80055e4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80006e4:	f004 fce0 	bl	80050a8 <ssd1306_UpdateScreen>
	count++;
 80006e8:	7831      	ldrb	r1, [r6, #0]
}
 80006ea:	e7cd      	b.n	8000688 <Control_Loop+0xb4>
 80006ec:	25ad      	movs	r5, #173	@ 0xad
 80006ee:	e7bd      	b.n	800066c <Control_Loop+0x98>
 80006f0:	b21642c9 	.word	0xb21642c9
 80006f4:	20000176 	.word	0x20000176
 80006f8:	080071a4 	.word	0x080071a4
 80006fc:	2000000c 	.word	0x2000000c

08000700 <Encoder_Handler>:
		bstate[e] = GPIO_Read(bpins[e]);
	}
}

//best to run timer at 10khz for no skipping
void Encoder_Handler(void) {
 8000700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000704:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8000790 <Encoder_Handler+0x90>
 8000708:	4e1e      	ldr	r6, [pc, #120]	@ (8000784 <Encoder_Handler+0x84>)
 800070a:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8000794 <Encoder_Handler+0x94>
 800070e:	4f1e      	ldr	r7, [pc, #120]	@ (8000788 <Encoder_Handler+0x88>)
	for (int e = 0; e < ENCODERS; e++) {
 8000710:	2400      	movs	r4, #0
		const uint8_t anew = GPIO_Read(apins[e]);
 8000712:	f819 0b01 	ldrb.w	r0, [r9], #1
 8000716:	f000 f845 	bl	80007a4 <GPIO_Read>
 800071a:	4605      	mov	r5, r0
		const uint8_t bnew = GPIO_Read(bpins[e]);
 800071c:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000720:	f000 f840 	bl	80007a4 <GPIO_Read>

		//only one state changed
		const uint8_t achanged = anew^astate[e];
 8000724:	f818 2004 	ldrb.w	r2, [r8, r4]
		if (achanged^(bnew^bstate[e])) {
 8000728:	5d3b      	ldrb	r3, [r7, r4]
		const uint8_t achanged = anew^astate[e];
 800072a:	ea82 0105 	eor.w	r1, r2, r5
		if (achanged^(bnew^bstate[e])) {
 800072e:	4043      	eors	r3, r0
 8000730:	b2db      	uxtb	r3, r3
 8000732:	b2c9      	uxtb	r1, r1
 8000734:	428b      	cmp	r3, r1
		const uint8_t achanged = anew^astate[e];
 8000736:	b2d2      	uxtb	r2, r2
		if (achanged^(bnew^bstate[e])) {
 8000738:	d009      	beq.n	800074e <Encoder_Handler+0x4e>
			if (achanged) {
 800073a:	42aa      	cmp	r2, r5
				if (bnew^anew) {
					rotation[e]++;
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <Encoder_Handler+0x8c>)
			if (achanged) {
 800073e:	d00e      	beq.n	800075e <Encoder_Handler+0x5e>
				if (bnew^anew) {
 8000740:	4285      	cmp	r5, r0
 8000742:	d017      	beq.n	8000774 <Encoder_Handler+0x74>
					rotation[e]++;
 8000744:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8000748:	3201      	adds	r2, #1
 800074a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				}else{
					rotation[e]++;
				}
			}
		}
		astate[e] = anew;
 800074e:	f808 5004 	strb.w	r5, [r8, r4]
		bstate[e] = bnew;
 8000752:	5538      	strb	r0, [r7, r4]
	for (int e = 0; e < ENCODERS; e++) {
 8000754:	b90c      	cbnz	r4, 800075a <Encoder_Handler+0x5a>
 8000756:	2401      	movs	r4, #1
 8000758:	e7db      	b.n	8000712 <Encoder_Handler+0x12>
	}
}
 800075a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					rotation[e]--;
 800075e:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <Encoder_Handler+0x8c>)
 8000760:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
				if (bnew^anew) {
 8000764:	4285      	cmp	r5, r0
					rotation[e]--;
 8000766:	bf14      	ite	ne
 8000768:	f103 33ff 	addne.w	r3, r3, #4294967295	@ 0xffffffff
					rotation[e]++;
 800076c:	3301      	addeq	r3, #1
 800076e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8000772:	e7ec      	b.n	800074e <Encoder_Handler+0x4e>
					rotation[e]--;
 8000774:	4a05      	ldr	r2, [pc, #20]	@ (800078c <Encoder_Handler+0x8c>)
 8000776:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800077a:	3b01      	subs	r3, #1
 800077c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8000780:	e7e5      	b.n	800074e <Encoder_Handler+0x4e>
 8000782:	bf00      	nop
 8000784:	080071b4 	.word	0x080071b4
 8000788:	20000178 	.word	0x20000178
 800078c:	20000180 	.word	0x20000180
 8000790:	080071b8 	.word	0x080071b8
 8000794:	2000017c 	.word	0x2000017c

08000798 <Encoder_GetRotation>:

int32_t Encoder_GetRotation(enum Encoder encoder) {
	return rotation[encoder];
 8000798:	4b01      	ldr	r3, [pc, #4]	@ (80007a0 <Encoder_GetRotation+0x8>)
 800079a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 800079e:	4770      	bx	lr
 80007a0:	20000180 	.word	0x20000180

080007a4 <GPIO_Read>:
PCS_Pin,
RFCS_Pin,
RFCE_Pin, };

uint8_t GPIO_Read(enum GPIO_Input in) {
	return HAL_GPIO_ReadPin(input_ports[in], input_pins[in]);
 80007a4:	4a03      	ldr	r2, [pc, #12]	@ (80007b4 <GPIO_Read+0x10>)
 80007a6:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <GPIO_Read+0x14>)
 80007a8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 80007ac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80007b0:	f001 baec 	b.w	8001d8c <HAL_GPIO_ReadPin>
 80007b4:	080071e0 	.word	0x080071e0
 80007b8:	08007204 	.word	0x08007204

080007bc <GPIO_Write>:
}

void GPIO_Write(enum GPIO_Output out, uint8_t state) {
 80007bc:	4603      	mov	r3, r0
 80007be:	b410      	push	{r4}
	HAL_GPIO_WritePin(output_ports[out], output_pins[out], state);
 80007c0:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <GPIO_Write+0x1c>)
 80007c2:	4c06      	ldr	r4, [pc, #24]	@ (80007dc <GPIO_Write+0x20>)
 80007c4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
void GPIO_Write(enum GPIO_Output out, uint8_t state) {
 80007c8:	460a      	mov	r2, r1
	HAL_GPIO_WritePin(output_ports[out], output_pins[out], state);
 80007ca:	f834 1013 	ldrh.w	r1, [r4, r3, lsl #1]
}
 80007ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	HAL_GPIO_WritePin(output_ports[out], output_pins[out], state);
 80007d2:	f001 bae1 	b.w	8001d98 <HAL_GPIO_WritePin>
 80007d6:	bf00      	nop
 80007d8:	080071c8 	.word	0x080071c8
 80007dc:	080071bc 	.word	0x080071bc

080007e0 <Input_Handler>:

static volatile uint8_t state[GPIO_INPUTS] = {0};
static volatile uint8_t pressed[GPIO_INPUTS] = {0};

//best to run a timer at 100hz
void Input_Handler(void) {
 80007e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e2:	4d0a      	ldr	r5, [pc, #40]	@ (800080c <Input_Handler+0x2c>)
	for (uint8_t i = 0; i < GPIO_INPUTS; i++) {
		uint8_t new = !GPIO_Read(i);
		if (new && !state[i]) {
			pressed[i] = 1;
 80007e4:	4f0a      	ldr	r7, [pc, #40]	@ (8000810 <Input_Handler+0x30>)
void Input_Handler(void) {
 80007e6:	2400      	movs	r4, #0
			pressed[i] = 1;
 80007e8:	2601      	movs	r6, #1
		uint8_t new = !GPIO_Read(i);
 80007ea:	b2e0      	uxtb	r0, r4
 80007ec:	f7ff ffda 	bl	80007a4 <GPIO_Read>
 80007f0:	2800      	cmp	r0, #0
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
		if (new && !state[i]) {
 80007f8:	d102      	bne.n	8000800 <Input_Handler+0x20>
 80007fa:	5d2a      	ldrb	r2, [r5, r4]
 80007fc:	b902      	cbnz	r2, 8000800 <Input_Handler+0x20>
			pressed[i] = 1;
 80007fe:	553e      	strb	r6, [r7, r4]
		}
		state[i] = new;
 8000800:	552b      	strb	r3, [r5, r4]
	for (uint8_t i = 0; i < GPIO_INPUTS; i++) {
 8000802:	3401      	adds	r4, #1
 8000804:	2c12      	cmp	r4, #18
 8000806:	d1f0      	bne.n	80007ea <Input_Handler+0xa>
	}
}
 8000808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800080a:	bf00      	nop
 800080c:	2000019c 	.word	0x2000019c
 8000810:	20000188 	.word	0x20000188

08000814 <Input_GetState>:

uint8_t Input_GetState(enum GPIO_Input in) {
	return state[in];
 8000814:	4b01      	ldr	r3, [pc, #4]	@ (800081c <Input_GetState+0x8>)
 8000816:	5c18      	ldrb	r0, [r3, r0]
}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	2000019c 	.word	0x2000019c

08000820 <NRF24_Init_TX>:

void NRF24_Register_Write(uint8_t reg, uint8_t value) {
	NRF24_Command_Write(NRF24_CMD_W_REGISTER | reg, &value, 1);
}

void NRF24_Init_TX(void) {
 8000820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 8000824:	4c9f      	ldr	r4, [pc, #636]	@ (8000aa4 <NRF24_Init_TX+0x284>)
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 8000826:	4da0      	ldr	r5, [pc, #640]	@ (8000aa8 <NRF24_Init_TX+0x288>)
 8000828:	f8df 8284 	ldr.w	r8, [pc, #644]	@ 8000ab0 <NRF24_Init_TX+0x290>
void NRF24_Init_TX(void) {
 800082c:	b086      	sub	sp, #24
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 800082e:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8000832:	f04f 0a7c 	mov.w	sl, #124	@ 0x7c
 8000836:	f04f 0920 	mov.w	r9, #32
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 800083a:	4620      	mov	r0, r4
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000842:	f88d a00f 	strb.w	sl, [sp, #15]
	NRF24_Command_Write(NRF24_CMD_W_REGISTER | reg, &value, 1);
 8000846:	f88d 9010 	strb.w	r9, [sp, #16]
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 800084a:	f001 faa5 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 800084e:	4642      	mov	r2, r8
 8000850:	a904      	add	r1, sp, #16
 8000852:	9600      	str	r6, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	4628      	mov	r0, r5
 8000858:	f003 fbba 	bl	8003fd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24_SPI, buf, len, NRF24_TIMEOUT);
 800085c:	4633      	mov	r3, r6
 800085e:	f10d 010f 	add.w	r1, sp, #15
 8000862:	2201      	movs	r2, #1
 8000864:	4628      	mov	r0, r5
 8000866:	2700      	movs	r7, #0
 8000868:	f003 faa8 	bl	8003dbc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 800086c:	4620      	mov	r0, r4
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000874:	f001 fa90 	bl	8001d98 <HAL_GPIO_WritePin>
 8000878:	463a      	mov	r2, r7
 800087a:	4620      	mov	r0, r4
 800087c:	2321      	movs	r3, #33	@ 0x21
 800087e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000882:	f88d 3010 	strb.w	r3, [sp, #16]
 8000886:	f88d 700f 	strb.w	r7, [sp, #15]
 800088a:	f001 fa85 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 800088e:	4642      	mov	r2, r8
 8000890:	a904      	add	r1, sp, #16
 8000892:	9600      	str	r6, [sp, #0]
 8000894:	2301      	movs	r3, #1
 8000896:	4628      	mov	r0, r5
 8000898:	f003 fb9a 	bl	8003fd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24_SPI, buf, len, NRF24_TIMEOUT);
 800089c:	4633      	mov	r3, r6
 800089e:	f10d 010f 	add.w	r1, sp, #15
 80008a2:	2201      	movs	r2, #1
 80008a4:	4628      	mov	r0, r5
 80008a6:	f003 fa89 	bl	8003dbc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 80008aa:	4620      	mov	r0, r4
 80008ac:	2201      	movs	r2, #1
 80008ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008b2:	f001 fa71 	bl	8001d98 <HAL_GPIO_WritePin>
 80008b6:	463a      	mov	r2, r7
 80008b8:	4620      	mov	r0, r4
 80008ba:	2322      	movs	r3, #34	@ 0x22
 80008bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c0:	f88d 3010 	strb.w	r3, [sp, #16]
 80008c4:	f88d 700f 	strb.w	r7, [sp, #15]
 80008c8:	f001 fa66 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 80008cc:	4642      	mov	r2, r8
 80008ce:	a904      	add	r1, sp, #16
 80008d0:	9600      	str	r6, [sp, #0]
 80008d2:	2301      	movs	r3, #1
 80008d4:	4628      	mov	r0, r5
 80008d6:	f003 fb7b 	bl	8003fd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24_SPI, buf, len, NRF24_TIMEOUT);
 80008da:	4633      	mov	r3, r6
 80008dc:	f10d 010f 	add.w	r1, sp, #15
 80008e0:	2201      	movs	r2, #1
 80008e2:	4628      	mov	r0, r5
 80008e4:	f003 fa6a 	bl	8003dbc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 80008e8:	4620      	mov	r0, r4
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008f0:	f001 fa52 	bl	8001d98 <HAL_GPIO_WritePin>
 80008f4:	463a      	mov	r2, r7
 80008f6:	4620      	mov	r0, r4
 80008f8:	2324      	movs	r3, #36	@ 0x24
 80008fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008fe:	f88d 3010 	strb.w	r3, [sp, #16]
 8000902:	f88d 700f 	strb.w	r7, [sp, #15]
 8000906:	f001 fa47 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 800090a:	4642      	mov	r2, r8
 800090c:	a904      	add	r1, sp, #16
 800090e:	9600      	str	r6, [sp, #0]
 8000910:	2301      	movs	r3, #1
 8000912:	4628      	mov	r0, r5
 8000914:	f003 fb5c 	bl	8003fd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24_SPI, buf, len, NRF24_TIMEOUT);
 8000918:	4633      	mov	r3, r6
 800091a:	f10d 010f 	add.w	r1, sp, #15
 800091e:	2201      	movs	r2, #1
 8000920:	4628      	mov	r0, r5
 8000922:	f003 fa4b 	bl	8003dbc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 8000926:	4620      	mov	r0, r4
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800092e:	f001 fa33 	bl	8001d98 <HAL_GPIO_WritePin>
 8000932:	463a      	mov	r2, r7
 8000934:	4620      	mov	r0, r4
 8000936:	2325      	movs	r3, #37	@ 0x25
 8000938:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800093c:	f88d 3010 	strb.w	r3, [sp, #16]
 8000940:	f88d a00f 	strb.w	sl, [sp, #15]
 8000944:	f001 fa28 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 8000948:	4642      	mov	r2, r8
 800094a:	a904      	add	r1, sp, #16
 800094c:	9600      	str	r6, [sp, #0]
 800094e:	2301      	movs	r3, #1
 8000950:	4628      	mov	r0, r5
 8000952:	f003 fb3d 	bl	8003fd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24_SPI, buf, len, NRF24_TIMEOUT);
 8000956:	4633      	mov	r3, r6
 8000958:	f10d 010f 	add.w	r1, sp, #15
 800095c:	2201      	movs	r2, #1
 800095e:	4628      	mov	r0, r5
 8000960:	f003 fa2c 	bl	8003dbc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 8000964:	4620      	mov	r0, r4
 8000966:	2201      	movs	r2, #1
 8000968:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800096c:	f001 fa14 	bl	8001d98 <HAL_GPIO_WritePin>
	NRF24_Register_Write(NRF24_REG_CONFIG, 0b01111100);
	NRF24_Register_Write(NRF24_REG_EN_AA, 0b00000000);
	NRF24_Register_Write(NRF24_REG_EN_RXADDR, 0b00000000);
	NRF24_Register_Write(NRF24_REG_SETUP_RETR , 0b00000000);
	NRF24_Register_Write(NRF24_REG_RF_CH , 0x7F & (2524 - 2400));
	NRF24_Register_Write(NRF24_REG_RF_SETUP , 0b00100110);
 8000970:	2326      	movs	r3, #38	@ 0x26
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 8000972:	463a      	mov	r2, r7
 8000974:	4620      	mov	r0, r4
 8000976:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800097a:	f88d 300f 	strb.w	r3, [sp, #15]
	NRF24_Command_Write(NRF24_CMD_W_REGISTER | reg, &value, 1);
 800097e:	f88d 3010 	strb.w	r3, [sp, #16]
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 8000982:	f001 fa09 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 8000986:	4642      	mov	r2, r8
 8000988:	a904      	add	r1, sp, #16
 800098a:	9600      	str	r6, [sp, #0]
 800098c:	2301      	movs	r3, #1
 800098e:	4628      	mov	r0, r5
 8000990:	f003 fb1e 	bl	8003fd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24_SPI, buf, len, NRF24_TIMEOUT);
 8000994:	4633      	mov	r3, r6
 8000996:	f10d 010f 	add.w	r1, sp, #15
 800099a:	2201      	movs	r2, #1
 800099c:	4628      	mov	r0, r5
 800099e:	f003 fa0d 	bl	8003dbc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 80009a2:	4620      	mov	r0, r4
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009aa:	f001 f9f5 	bl	8001d98 <HAL_GPIO_WritePin>
	uint8_t address[5] = "00001";
 80009ae:	4b3f      	ldr	r3, [pc, #252]	@ (8000aac <NRF24_Init_TX+0x28c>)
 80009b0:	e893 0003 	ldmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 80009b4:	463a      	mov	r2, r7
	uint8_t address[5] = "00001";
 80009b6:	9004      	str	r0, [sp, #16]
 80009b8:	f88d 1014 	strb.w	r1, [sp, #20]
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 80009bc:	4620      	mov	r0, r4
 80009be:	2330      	movs	r3, #48	@ 0x30
 80009c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009c4:	f88d 300f 	strb.w	r3, [sp, #15]
 80009c8:	f001 f9e6 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 80009cc:	4642      	mov	r2, r8
 80009ce:	f10d 010f 	add.w	r1, sp, #15
 80009d2:	9600      	str	r6, [sp, #0]
 80009d4:	2301      	movs	r3, #1
 80009d6:	4628      	mov	r0, r5
 80009d8:	f003 fafa 	bl	8003fd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24_SPI, buf, len, NRF24_TIMEOUT);
 80009dc:	4633      	mov	r3, r6
 80009de:	a904      	add	r1, sp, #16
 80009e0:	2205      	movs	r2, #5
 80009e2:	4628      	mov	r0, r5
 80009e4:	f003 f9ea 	bl	8003dbc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 80009e8:	4620      	mov	r0, r4
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009f0:	f001 f9d2 	bl	8001d98 <HAL_GPIO_WritePin>
 80009f4:	463a      	mov	r2, r7
 80009f6:	4620      	mov	r0, r4
 80009f8:	237e      	movs	r3, #126	@ 0x7e
 80009fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009fe:	f88d 300e 	strb.w	r3, [sp, #14]
 8000a02:	f88d 900f 	strb.w	r9, [sp, #15]
 8000a06:	f001 f9c7 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 8000a0a:	4642      	mov	r2, r8
 8000a0c:	f10d 010f 	add.w	r1, sp, #15
 8000a10:	9600      	str	r6, [sp, #0]
 8000a12:	2301      	movs	r3, #1
 8000a14:	4628      	mov	r0, r5
 8000a16:	f003 fadb 	bl	8003fd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24_SPI, buf, len, NRF24_TIMEOUT);
 8000a1a:	4633      	mov	r3, r6
 8000a1c:	f10d 010e 	add.w	r1, sp, #14
 8000a20:	2201      	movs	r2, #1
 8000a22:	4628      	mov	r0, r5
 8000a24:	f003 f9ca 	bl	8003dbc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 8000a28:	4620      	mov	r0, r4
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a30:	f001 f9b2 	bl	8001d98 <HAL_GPIO_WritePin>
 8000a34:	463a      	mov	r2, r7
 8000a36:	4620      	mov	r0, r4
 8000a38:	23e1      	movs	r3, #225	@ 0xe1
 8000a3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a3e:	f88d 300f 	strb.w	r3, [sp, #15]
 8000a42:	f001 f9a9 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 8000a46:	2301      	movs	r3, #1
 8000a48:	4642      	mov	r2, r8
 8000a4a:	f10d 010f 	add.w	r1, sp, #15
 8000a4e:	9600      	str	r6, [sp, #0]
 8000a50:	4628      	mov	r0, r5
 8000a52:	f003 fabd 	bl	8003fd0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 8000a56:	4620      	mov	r0, r4
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a5e:	f001 f99b 	bl	8001d98 <HAL_GPIO_WritePin>
 8000a62:	463a      	mov	r2, r7
 8000a64:	4620      	mov	r0, r4
 8000a66:	23e2      	movs	r3, #226	@ 0xe2
 8000a68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a6c:	f88d 300f 	strb.w	r3, [sp, #15]
 8000a70:	f001 f992 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 8000a74:	2301      	movs	r3, #1
 8000a76:	4642      	mov	r2, r8
 8000a78:	f10d 010f 	add.w	r1, sp, #15
 8000a7c:	9600      	str	r6, [sp, #0]
 8000a7e:	4628      	mov	r0, r5
 8000a80:	f003 faa6 	bl	8003fd0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 8000a84:	4620      	mov	r0, r4
 8000a86:	2201      	movs	r2, #1
 8000a88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a8c:	f001 f984 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, state);
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a96:	4620      	mov	r0, r4
 8000a98:	f001 f97e 	bl	8001d98 <HAL_GPIO_WritePin>

	NRF24_Register_Write(NRF24_REG_CONFIG, 0b01111110);
	NRF24_Command(NRF24_CMD_FLUSH_TX);
	NRF24_Command(NRF24_CMD_FLUSH_RX);
	set_ce(1);
}
 8000a9c:	b006      	add	sp, #24
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40020400 	.word	0x40020400
 8000aa8:	20000240 	.word	0x20000240
 8000aac:	0800724c 	.word	0x0800724c
 8000ab0:	200001ae 	.word	0x200001ae

08000ab4 <NRF24_Transmit>:

void NRF24_Transmit(uint8_t *buf, size_t len) {
 8000ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 8000ab8:	4e13      	ldr	r6, [pc, #76]	@ (8000b08 <NRF24_Transmit+0x54>)
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 8000aba:	4f14      	ldr	r7, [pc, #80]	@ (8000b0c <NRF24_Transmit+0x58>)
void NRF24_Transmit(uint8_t *buf, size_t len) {
 8000abc:	b084      	sub	sp, #16
 8000abe:	460d      	mov	r5, r1
 8000ac0:	23a0      	movs	r3, #160	@ 0xa0
 8000ac2:	4604      	mov	r4, r0
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 8000ac4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 8000ac8:	4630      	mov	r0, r6
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ad0:	f88d 300f 	strb.w	r3, [sp, #15]
 8000ad4:	f001 f960 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(NRF24_SPI, &command, &status, 1, NRF24_TIMEOUT);
 8000ad8:	f10d 010f 	add.w	r1, sp, #15
 8000adc:	4a0c      	ldr	r2, [pc, #48]	@ (8000b10 <NRF24_Transmit+0x5c>)
 8000ade:	f8cd 8000 	str.w	r8, [sp]
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	4638      	mov	r0, r7
 8000ae6:	f003 fa73 	bl	8003fd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24_SPI, buf, len, NRF24_TIMEOUT);
 8000aea:	4643      	mov	r3, r8
 8000aec:	b2aa      	uxth	r2, r5
 8000aee:	4621      	mov	r1, r4
 8000af0:	4638      	mov	r0, r7
 8000af2:	f003 f963 	bl	8003dbc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, state);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000afc:	4630      	mov	r0, r6
 8000afe:	f001 f94b 	bl	8001d98 <HAL_GPIO_WritePin>
	NRF24_Command_Write(NRF24_CMD_W_TX_PAYLOAD, buf, len);
}
 8000b02:	b004      	add	sp, #16
 8000b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b08:	40020400 	.word	0x40020400
 8000b0c:	20000240 	.word	0x20000240
 8000b10:	200001ae 	.word	0x200001ae

08000b14 <Timing_Start>:
#include "encoder.h"

extern TIM_HandleTypeDef htim10;
extern TIM_HandleTypeDef htim11;

void Timing_Start(void) {
 8000b14:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start_IT(&htim10);
 8000b16:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <Timing_Start+0x14>)
 8000b18:	f003 fbfc 	bl	8004314 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
}
 8000b1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start_IT(&htim11);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <Timing_Start+0x18>)
 8000b22:	f003 bbf7 	b.w	8004314 <HAL_TIM_Base_Start_IT>
 8000b26:	bf00      	nop
 8000b28:	200001f8 	.word	0x200001f8
 8000b2c:	200001b0 	.word	0x200001b0

08000b30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
    if (htim == &htim10) {
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b32:	4298      	cmp	r0, r3
{
 8000b34:	b510      	push	{r4, lr}
 8000b36:	4604      	mov	r4, r0
    if (htim == &htim10) {
 8000b38:	d003      	beq.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x12>
    	Input_Handler();
    }
    if (htim == &htim11) {
 8000b3a:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b3c:	429c      	cmp	r4, r3
 8000b3e:	d005      	beq.n	8000b4c <HAL_TIM_PeriodElapsedCallback+0x1c>
    	Encoder_Handler();
    }
}
 8000b40:	bd10      	pop	{r4, pc}
    	Input_Handler();
 8000b42:	f7ff fe4d 	bl	80007e0 <Input_Handler>
    if (htim == &htim11) {
 8000b46:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b48:	429c      	cmp	r4, r3
 8000b4a:	d1f9      	bne.n	8000b40 <HAL_TIM_PeriodElapsedCallback+0x10>
}
 8000b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	Encoder_Handler();
 8000b50:	f7ff bdd6 	b.w	8000700 <Encoder_Handler>
 8000b54:	200001f8 	.word	0x200001f8
 8000b58:	200001b0 	.word	0x200001b0

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	2300      	movs	r3, #0
{
 8000b60:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8000b66:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000b6e:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4921      	ldr	r1, [pc, #132]	@ (8000bf8 <SystemClock_Config+0x9c>)
 8000b74:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b76:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b7a:	4a20      	ldr	r2, [pc, #128]	@ (8000bfc <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7c:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000b80:	6408      	str	r0, [r1, #64]	@ 0x40
 8000b82:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000b84:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8000b88:	9101      	str	r1, [sp, #4]
 8000b8a:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b8c:	9302      	str	r3, [sp, #8]
 8000b8e:	6813      	ldr	r3, [r2, #0]
 8000b90:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ba2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba6:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000baa:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb2:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bb6:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bb8:	2107      	movs	r1, #7
 8000bba:	2004      	movs	r0, #4
 8000bbc:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bc0:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bc2:	23a8      	movs	r3, #168	@ 0xa8
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bc6:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bc8:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	f002 fd2b 	bl	8003624 <HAL_RCC_OscConfig>
 8000bce:	b108      	cbz	r0, 8000bd4 <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bd2:	e7fe      	b.n	8000bd2 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd4:	210f      	movs	r1, #15
 8000bd6:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd8:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bdc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000be0:	a803      	add	r0, sp, #12
 8000be2:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be4:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bea:	f002 ff23 	bl	8003a34 <HAL_RCC_ClockConfig>
 8000bee:	b108      	cbz	r0, 8000bf4 <SystemClock_Config+0x98>
 8000bf0:	b672      	cpsid	i
	while (1) {
 8000bf2:	e7fe      	b.n	8000bf2 <SystemClock_Config+0x96>
}
 8000bf4:	b014      	add	sp, #80	@ 0x50
 8000bf6:	bd10      	pop	{r4, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <main>:
{
 8000c00:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	2400      	movs	r4, #0
{
 8000c04:	b08d      	sub	sp, #52	@ 0x34
  HAL_Init();
 8000c06:	f000 fb39 	bl	800127c <HAL_Init>
  SystemClock_Config();
 8000c0a:	f7ff ffa7 	bl	8000b5c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000c12:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4da5      	ldr	r5, [pc, #660]	@ (8000eac <main+0x2ac>)
 8000c18:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1a:	940a      	str	r4, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  HAL_GPIO_WritePin(MTR_GPIO_Port, MTR_Pin, GPIO_PIN_SET);
 8000c1e:	48a4      	ldr	r0, [pc, #656]	@ (8000eb0 <main+0x2b0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	632b      	str	r3, [r5, #48]	@ 0x30
 8000c26:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c30:	9402      	str	r4, [sp, #8]
 8000c32:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c38:	632b      	str	r3, [r5, #48]	@ 0x30
 8000c3a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	9403      	str	r4, [sp, #12]
 8000c46:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  HAL_GPIO_WritePin(MTR_GPIO_Port, MTR_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	632b      	str	r3, [r5, #48]	@ 0x30
 8000c4e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000c50:	4013      	ands	r3, r2
 8000c52:	9303      	str	r3, [sp, #12]
 8000c54:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	9404      	str	r4, [sp, #16]
 8000c58:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	632b      	str	r3, [r5, #48]	@ 0x30
 8000c60:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	9304      	str	r3, [sp, #16]
 8000c68:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	9405      	str	r4, [sp, #20]
 8000c6c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000c6e:	f043 0308 	orr.w	r3, r3, #8
 8000c72:	632b      	str	r3, [r5, #48]	@ 0x30
 8000c74:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(MTR_GPIO_Port, MTR_Pin, GPIO_PIN_SET);
 8000c7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c80:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(MTR_GPIO_Port, MTR_Pin, GPIO_PIN_SET);
 8000c82:	f001 f889 	bl	8001d98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, BTNON_Pin|RFCS_Pin|GCS_Pin|PCS_Pin, GPIO_PIN_SET);
 8000c86:	488b      	ldr	r0, [pc, #556]	@ (8000eb4 <main+0x2b4>)
 8000c88:	f24c 2102 	movw	r1, #49666	@ 0xc202
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f001 f883 	bl	8001d98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RFCE_GPIO_Port, RFCE_Pin, GPIO_PIN_RESET);
 8000c92:	4888      	ldr	r0, [pc, #544]	@ (8000eb4 <main+0x2b4>)
 8000c94:	4622      	mov	r2, r4
 8000c96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9a:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(RFCE_GPIO_Port, RFCE_Pin, GPIO_PIN_RESET);
 8000c9c:	f001 f87c 	bl	8001d98 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = RE2SW_Pin|SW2B_Pin|SW2A_Pin|CHRG_Pin
 8000ca0:	f645 52e0 	movw	r2, #24032	@ 0x5de0
 8000ca4:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca6:	4882      	ldr	r0, [pc, #520]	@ (8000eb0 <main+0x2b0>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca8:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = RE2SW_Pin|SW2B_Pin|SW2A_Pin|CHRG_Pin
 8000cac:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f000 ff76 	bl	8001ba0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MTR_Pin;
 8000cb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(MTR_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	487d      	ldr	r0, [pc, #500]	@ (8000eb0 <main+0x2b0>)
  GPIO_InitStruct.Pin = MTR_Pin;
 8000cba:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(MTR_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	e9cd 6407 	strd	r6, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(MTR_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f000 ff6c 	bl	8001ba0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN4_Pin|RE2A_Pin|SW1B_Pin;
 8000cc8:	f248 4208 	movw	r2, #33800	@ 0x8408
 8000ccc:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	487a      	ldr	r0, [pc, #488]	@ (8000eb8 <main+0x2b8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd0:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = BTN4_Pin|RE2A_Pin|SW1B_Pin;
 8000cd4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f000 ff62 	bl	8001ba0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN3_Pin|JY2SW_Pin|RE2B_Pin|RE1SW_Pin
 8000cdc:	f240 423d 	movw	r2, #1085	@ 0x43d
 8000ce0:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	4874      	ldr	r0, [pc, #464]	@ (8000eb4 <main+0x2b4>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce4:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = BTN3_Pin|JY2SW_Pin|RE2B_Pin|RE1SW_Pin
 8000ce8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f000 ff58 	bl	8001ba0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTNON_Pin;
 8000cf0:	2302      	movs	r3, #2
  HAL_GPIO_Init(BTNON_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	4870      	ldr	r0, [pc, #448]	@ (8000eb4 <main+0x2b4>)
  GPIO_InitStruct.Pin = BTNON_Pin;
 8000cf4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(BTNON_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	e9cd 6407 	strd	r6, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000cfc:	9609      	str	r6, [sp, #36]	@ 0x24
  HAL_GPIO_Init(BTNON_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f000 ff4f 	bl	8001ba0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RFCE_Pin|RFCS_Pin|GCS_Pin|PCS_Pin;
 8000d02:	f44f 4352 	mov.w	r3, #53760	@ 0xd200
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	486b      	ldr	r0, [pc, #428]	@ (8000eb4 <main+0x2b4>)
  GPIO_InitStruct.Pin = RFCE_Pin|RFCS_Pin|GCS_Pin|PCS_Pin;
 8000d08:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f000 ff44 	bl	8001ba0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = JY1SW_Pin;
 8000d18:	2204      	movs	r2, #4
 8000d1a:	2300      	movs	r3, #0
  HAL_GPIO_Init(JY1SW_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	4867      	ldr	r0, [pc, #412]	@ (8000ebc <main+0x2bc>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1e:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(JY1SW_GPIO_Port, &GPIO_InitStruct);
 8000d20:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = JY1SW_Pin;
 8000d22:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(JY1SW_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f000 ff3b 	bl	8001ba0 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d2a:	9400      	str	r4, [sp, #0]
 8000d2c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000d2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d32:	632b      	str	r3, [r5, #48]	@ 0x30
 8000d34:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d3a:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d3c:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d3e:	4621      	mov	r1, r4
 8000d40:	2038      	movs	r0, #56	@ 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d42:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d44:	f000 fd20 	bl	8001788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d48:	2038      	movs	r0, #56	@ 0x38
 8000d4a:	f000 fd59 	bl	8001800 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8000d4e:	485c      	ldr	r0, [pc, #368]	@ (8000ec0 <main+0x2c0>)
  hi2c1.Init.ClockSpeed = 100000;
 8000d50:	4b5c      	ldr	r3, [pc, #368]	@ (8000ec4 <main+0x2c4>)
 8000d52:	4a5d      	ldr	r2, [pc, #372]	@ (8000ec8 <main+0x2c8>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d54:	6204      	str	r4, [r0, #32]
  hi2c1.Init.ClockSpeed = 100000;
 8000d56:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8000d5e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d62:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d66:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d6a:	f001 f91f 	bl	8001fac <HAL_I2C_Init>
 8000d6e:	b108      	cbz	r0, 8000d74 <main+0x174>
 8000d70:	b672      	cpsid	i
	while (1) {
 8000d72:	e7fe      	b.n	8000d72 <main+0x172>
  hadc1.Instance = ADC1;
 8000d74:	4d55      	ldr	r5, [pc, #340]	@ (8000ecc <main+0x2cc>)
 8000d76:	4604      	mov	r4, r0
  MX_USB_DEVICE_Init();
 8000d78:	f005 fb62 	bl	8006440 <MX_USB_DEVICE_Init>
  hadc1.Instance = ADC1;
 8000d7c:	4b54      	ldr	r3, [pc, #336]	@ (8000ed0 <main+0x2d0>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d7e:	4a55      	ldr	r2, [pc, #340]	@ (8000ed4 <main+0x2d4>)
  hadc1.Instance = ADC1;
 8000d80:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d86:	e9c5 3401 	strd	r3, r4, [r5, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e9c5 230a 	strd	r2, r3, [r5, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d90:	4628      	mov	r0, r5
  hadc1.Init.NbrOfConversion = 5;
 8000d92:	2305      	movs	r3, #5
 8000d94:	61eb      	str	r3, [r5, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d96:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000d9a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9e:	e9c5 6604 	strd	r6, r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da2:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da4:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da8:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000daa:	f885 4030 	strb.w	r4, [r5, #48]	@ 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dae:	f000 faa3 	bl	80012f8 <HAL_ADC_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	b108      	cbz	r0, 8000dba <main+0x1ba>
 8000db6:	b672      	cpsid	i
	while (1) {
 8000db8:	e7fe      	b.n	8000db8 <main+0x1b8>
  sConfig.Channel = ADC_CHANNEL_10;
 8000dba:	200a      	movs	r0, #10
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc2:	a906      	add	r1, sp, #24
 8000dc4:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dc6:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc8:	f000 fc24 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000dcc:	b108      	cbz	r0, 8000dd2 <main+0x1d2>
 8000dce:	b672      	cpsid	i
	while (1) {
 8000dd0:	e7fe      	b.n	8000dd0 <main+0x1d0>
  sConfig.Channel = ADC_CHANNEL_11;
 8000dd2:	220b      	movs	r2, #11
 8000dd4:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd6:	a906      	add	r1, sp, #24
 8000dd8:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_11;
 8000dda:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dde:	f000 fc19 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000de2:	b108      	cbz	r0, 8000de8 <main+0x1e8>
 8000de4:	b672      	cpsid	i
	while (1) {
 8000de6:	e7fe      	b.n	8000de6 <main+0x1e6>
  sConfig.Channel = ADC_CHANNEL_12;
 8000de8:	220c      	movs	r2, #12
 8000dea:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dec:	a906      	add	r1, sp, #24
 8000dee:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_12;
 8000df0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df4:	f000 fc0e 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000df8:	b108      	cbz	r0, 8000dfe <main+0x1fe>
 8000dfa:	b672      	cpsid	i
	while (1) {
 8000dfc:	e7fe      	b.n	8000dfc <main+0x1fc>
  sConfig.Channel = ADC_CHANNEL_13;
 8000dfe:	220d      	movs	r2, #13
 8000e00:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e02:	a906      	add	r1, sp, #24
 8000e04:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_13;
 8000e06:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e0a:	f000 fc03 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000e0e:	b108      	cbz	r0, 8000e14 <main+0x214>
 8000e10:	b672      	cpsid	i
	while (1) {
 8000e12:	e7fe      	b.n	8000e12 <main+0x212>
  sConfig.Channel = ADC_CHANNEL_14;
 8000e14:	2305      	movs	r3, #5
 8000e16:	220e      	movs	r2, #14
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e18:	a906      	add	r1, sp, #24
 8000e1a:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_14;
 8000e1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e20:	f000 fbf8 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	b108      	cbz	r0, 8000e2c <main+0x22c>
 8000e28:	b672      	cpsid	i
	while (1) {
 8000e2a:	e7fe      	b.n	8000e2a <main+0x22a>
  hspi1.Instance = SPI1;
 8000e2c:	482a      	ldr	r0, [pc, #168]	@ (8000ed8 <main+0x2d8>)
 8000e2e:	492b      	ldr	r1, [pc, #172]	@ (8000edc <main+0x2dc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e34:	e9c0 1200 	strd	r1, r2, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e38:	f44f 7400 	mov.w	r4, #512	@ 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e3c:	2118      	movs	r1, #24
  hspi1.Init.CRCPolynomial = 10;
 8000e3e:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e40:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e44:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e48:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 10;
 8000e4c:	e9c0 320a 	strd	r3, r2, [r0, #40]	@ 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e50:	e9c0 4106 	strd	r4, r1, [r0, #24]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e54:	f002 ff50 	bl	8003cf8 <HAL_SPI_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	b108      	cbz	r0, 8000e60 <main+0x260>
 8000e5c:	b672      	cpsid	i
	while (1) {
 8000e5e:	e7fe      	b.n	8000e5e <main+0x25e>
  htim10.Instance = TIM10;
 8000e60:	481f      	ldr	r0, [pc, #124]	@ (8000ee0 <main+0x2e0>)
 8000e62:	4c20      	ldr	r4, [pc, #128]	@ (8000ee4 <main+0x2e4>)
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	6103      	str	r3, [r0, #16]
  htim10.Init.Prescaler = 840-1;
 8000e66:	f240 3147 	movw	r1, #839	@ 0x347
  htim10.Init.Period = 1000-1;
 8000e6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e6e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	6183      	str	r3, [r0, #24]
  htim10.Init.Prescaler = 840-1;
 8000e74:	e9c0 4100 	strd	r4, r1, [r0]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000e78:	f003 f9d2 	bl	8004220 <HAL_TIM_Base_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	b108      	cbz	r0, 8000e84 <main+0x284>
 8000e80:	b672      	cpsid	i
	while (1) {
 8000e82:	e7fe      	b.n	8000e82 <main+0x282>
  htim11.Instance = TIM11;
 8000e84:	4818      	ldr	r0, [pc, #96]	@ (8000ee8 <main+0x2e8>)
 8000e86:	4c19      	ldr	r4, [pc, #100]	@ (8000eec <main+0x2ec>)
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	6103      	str	r3, [r0, #16]
  htim11.Init.Prescaler = 84-1;
 8000e8a:	2153      	movs	r1, #83	@ 0x53
  htim11.Init.Period = 100-1;
 8000e8c:	2263      	movs	r2, #99	@ 0x63
  htim11.Init.Prescaler = 84-1;
 8000e8e:	e9c0 4100 	strd	r4, r1, [r0]
  htim11.Init.Period = 100-1;
 8000e92:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000e98:	f003 f9c2 	bl	8004220 <HAL_TIM_Base_Init>
 8000e9c:	b108      	cbz	r0, 8000ea2 <main+0x2a2>
 8000e9e:	b672      	cpsid	i
	while (1) {
 8000ea0:	e7fe      	b.n	8000ea0 <main+0x2a0>
	Control_Init();
 8000ea2:	f7ff fb89 	bl	80005b8 <Control_Init>
		Control_Loop();
 8000ea6:	f7ff fb95 	bl	80005d4 <Control_Loop>
	while (1) {
 8000eaa:	e7fc      	b.n	8000ea6 <main+0x2a6>
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40020c00 	.word	0x40020c00
 8000ec0:	20000298 	.word	0x20000298
 8000ec4:	000186a0 	.word	0x000186a0
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	20000350 	.word	0x20000350
 8000ed0:	40012000 	.word	0x40012000
 8000ed4:	0f000001 	.word	0x0f000001
 8000ed8:	20000240 	.word	0x20000240
 8000edc:	40013000 	.word	0x40013000
 8000ee0:	200001f8 	.word	0x200001f8
 8000ee4:	40014400 	.word	0x40014400
 8000ee8:	200001b0 	.word	0x200001b0
 8000eec:	40014800 	.word	0x40014800

08000ef0 <Error_Handler>:
 8000ef0:	b672      	cpsid	i
	while (1) {
 8000ef2:	e7fe      	b.n	8000ef2 <Error_Handler+0x2>

08000ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <HAL_MspInit+0x34>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	9100      	str	r1, [sp, #0]
 8000efc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000efe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000f02:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f06:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000f0a:	9200      	str	r2, [sp, #0]
 8000f0c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	9101      	str	r1, [sp, #4]
 8000f10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f12:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f16:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	b002      	add	sp, #8
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8000f2e:	4b24      	ldr	r3, [pc, #144]	@ (8000fc0 <HAL_ADC_MspInit+0x94>)
 8000f30:	6802      	ldr	r2, [r0, #0]
{
 8000f32:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8000f36:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000f3c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000f40:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8000f42:	d001      	beq.n	8000f48 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f44:	b008      	add	sp, #32
 8000f46:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f48:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000f4c:	9400      	str	r4, [sp, #0]
 8000f4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8000f50:	4e1c      	ldr	r6, [pc, #112]	@ (8000fc4 <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f56:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f5a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000f5e:	9200      	str	r2, [sp, #0]
 8000f60:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	9401      	str	r4, [sp, #4]
 8000f64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f66:	f042 0204 	orr.w	r2, r2, #4
 8000f6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = JY1Y_Pin|JY1X_Pin|JY2X_Pin|JY2Y_Pin
 8000f74:	221f      	movs	r2, #31
 8000f76:	2303      	movs	r3, #3
 8000f78:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7a:	a902      	add	r1, sp, #8
 8000f7c:	4812      	ldr	r0, [pc, #72]	@ (8000fc8 <HAL_ADC_MspInit+0x9c>)
    GPIO_InitStruct.Pin = JY1Y_Pin|JY1X_Pin|JY2X_Pin|JY2Y_Pin
 8000f7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f84:	f000 fe0c 	bl	8001ba0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000f88:	4a10      	ldr	r2, [pc, #64]	@ (8000fcc <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f8a:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f90:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f94:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f9e:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa0:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fa4:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fa8:	e9c6 4407 	strd	r4, r4, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fac:	f000 fc50 	bl	8001850 <HAL_DMA_Init>
 8000fb0:	b918      	cbnz	r0, 8000fba <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fb2:	63ae      	str	r6, [r5, #56]	@ 0x38
 8000fb4:	63b5      	str	r5, [r6, #56]	@ 0x38
}
 8000fb6:	b008      	add	sp, #32
 8000fb8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000fba:	f7ff ff99 	bl	8000ef0 <Error_Handler>
 8000fbe:	e7f8      	b.n	8000fb2 <HAL_ADC_MspInit+0x86>
 8000fc0:	40012000 	.word	0x40012000
 8000fc4:	200002ec 	.word	0x200002ec
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40026410 	.word	0x40026410

08000fd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8000fd2:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <HAL_I2C_MspInit+0x64>)
 8000fd4:	6802      	ldr	r2, [r0, #0]
{
 8000fd6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8000fda:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000fe0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000fe4:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 8000fe6:	d001      	beq.n	8000fec <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fe8:	b009      	add	sp, #36	@ 0x24
 8000fea:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	4d12      	ldr	r5, [pc, #72]	@ (8001038 <HAL_I2C_MspInit+0x68>)
 8000fee:	9400      	str	r4, [sp, #0]
 8000ff0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	4812      	ldr	r0, [pc, #72]	@ (800103c <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	632b      	str	r3, [r5, #48]	@ 0x30
 8000ffa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001002:	22c0      	movs	r2, #192	@ 0xc0
 8001004:	2312      	movs	r3, #18
 8001006:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2304      	movs	r3, #4
 8001012:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f000 fdc3 	bl	8001ba0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800101a:	9401      	str	r4, [sp, #4]
 800101c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800101e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001022:	642b      	str	r3, [r5, #64]	@ 0x40
 8001024:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001026:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	9b01      	ldr	r3, [sp, #4]
}
 800102e:	b009      	add	sp, #36	@ 0x24
 8001030:	bd30      	pop	{r4, r5, pc}
 8001032:	bf00      	nop
 8001034:	40005400 	.word	0x40005400
 8001038:	40023800 	.word	0x40023800
 800103c:	40020400 	.word	0x40020400

08001040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001040:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8001042:	4a1b      	ldr	r2, [pc, #108]	@ (80010b0 <HAL_SPI_MspInit+0x70>)
 8001044:	6801      	ldr	r1, [r0, #0]
{
 8001046:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 800104a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001050:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001054:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI1)
 8001056:	d001      	beq.n	800105c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001058:	b008      	add	sp, #32
 800105a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800105c:	f502 3284 	add.w	r2, r2, #67584	@ 0x10800
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 8001064:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8001068:	6450      	str	r0, [r2, #68]	@ 0x44
 800106a:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 800106c:	f400 5080 	and.w	r0, r0, #4096	@ 0x1000
 8001070:	9000      	str	r0, [sp, #0]
 8001072:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	480e      	ldr	r0, [pc, #56]	@ (80010b4 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001080:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001082:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80010a8 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2203      	movs	r2, #3
 800108e:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001092:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f000 fd80 	bl	8001ba0 <HAL_GPIO_Init>
}
 80010a0:	b008      	add	sp, #32
 80010a2:	bd10      	pop	{r4, pc}
 80010a4:	f3af 8000 	nop.w
 80010a8:	000000e0 	.word	0x000000e0
 80010ac:	00000002 	.word	0x00000002
 80010b0:	40013000 	.word	0x40013000
 80010b4:	40020000 	.word	0x40020000

080010b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b8:	b500      	push	{lr}
  if(htim_base->Instance==TIM10)
 80010ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001128 <HAL_TIM_Base_MspInit+0x70>)
 80010bc:	6803      	ldr	r3, [r0, #0]
 80010be:	4293      	cmp	r3, r2
{
 80010c0:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM10)
 80010c2:	d005      	beq.n	80010d0 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 80010c4:	4a19      	ldr	r2, [pc, #100]	@ (800112c <HAL_TIM_Base_MspInit+0x74>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d018      	beq.n	80010fc <HAL_TIM_Base_MspInit+0x44>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80010ca:	b003      	add	sp, #12
 80010cc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM10_CLK_ENABLE();
 80010d0:	2200      	movs	r2, #0
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <HAL_TIM_Base_MspInit+0x78>)
 80010d4:	9200      	str	r2, [sp, #0]
 80010d6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80010d8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80010dc:	6459      	str	r1, [r3, #68]	@ 0x44
 80010de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e4:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010e6:	2019      	movs	r0, #25
 80010e8:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 80010ea:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010ec:	f000 fb4c 	bl	8001788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010f0:	2019      	movs	r0, #25
}
 80010f2:	b003      	add	sp, #12
 80010f4:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80010f8:	f000 bb82 	b.w	8001800 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80010fc:	2200      	movs	r2, #0
 80010fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <HAL_TIM_Base_MspInit+0x78>)
 8001100:	9201      	str	r2, [sp, #4]
 8001102:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001104:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8001108:	6459      	str	r1, [r3, #68]	@ 0x44
 800110a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001110:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001112:	201a      	movs	r0, #26
 8001114:	4611      	mov	r1, r2
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001116:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001118:	f000 fb36 	bl	8001788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800111c:	201a      	movs	r0, #26
}
 800111e:	b003      	add	sp, #12
 8001120:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001124:	f000 bb6c 	b.w	8001800 <HAL_NVIC_EnableIRQ>
 8001128:	40014400 	.word	0x40014400
 800112c:	40014800 	.word	0x40014800
 8001130:	40023800 	.word	0x40023800

08001134 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler>
 8001136:	bf00      	nop

08001138 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <HardFault_Handler>
 800113a:	bf00      	nop

0800113c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <MemManage_Handler>
 800113e:	bf00      	nop

08001140 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <BusFault_Handler>
 8001142:	bf00      	nop

08001144 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <UsageFault_Handler>
 8001146:	bf00      	nop

08001148 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 b8ac 	b.w	80012b0 <HAL_IncTick>

08001158 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001158:	4801      	ldr	r0, [pc, #4]	@ (8001160 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800115a:	f003 b915 	b.w	8004388 <HAL_TIM_IRQHandler>
 800115e:	bf00      	nop
 8001160:	200001f8 	.word	0x200001f8

08001164 <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001164:	4801      	ldr	r0, [pc, #4]	@ (800116c <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 8001166:	f003 b90f 	b.w	8004388 <HAL_TIM_IRQHandler>
 800116a:	bf00      	nop
 800116c:	200001b0 	.word	0x200001b0

08001170 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001170:	4801      	ldr	r0, [pc, #4]	@ (8001178 <DMA2_Stream0_IRQHandler+0x8>)
 8001172:	f000 bc3f 	b.w	80019f4 <HAL_DMA_IRQHandler>
 8001176:	bf00      	nop
 8001178:	200002ec 	.word	0x200002ec

0800117c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800117c:	4801      	ldr	r0, [pc, #4]	@ (8001184 <OTG_FS_IRQHandler+0x8>)
 800117e:	f001 baf9 	b.w	8002774 <HAL_PCD_IRQHandler>
 8001182:	bf00      	nop
 8001184:	200014a8 	.word	0x200014a8

08001188 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001188:	490c      	ldr	r1, [pc, #48]	@ (80011bc <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800118a:	4a0d      	ldr	r2, [pc, #52]	@ (80011c0 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800118c:	680b      	ldr	r3, [r1, #0]
{
 800118e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001190:	4c0c      	ldr	r4, [pc, #48]	@ (80011c4 <_sbrk+0x3c>)
 8001192:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001194:	b12b      	cbz	r3, 80011a2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001196:	4418      	add	r0, r3
 8001198:	4290      	cmp	r0, r2
 800119a:	d807      	bhi.n	80011ac <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800119c:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <_sbrk+0x40>)
 80011a4:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80011a6:	4418      	add	r0, r3
 80011a8:	4290      	cmp	r0, r2
 80011aa:	d9f7      	bls.n	800119c <_sbrk+0x14>
    errno = ENOMEM;
 80011ac:	f005 fb76 	bl	800689c <__errno>
 80011b0:	230c      	movs	r3, #12
 80011b2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	bd10      	pop	{r4, pc}
 80011bc:	20000398 	.word	0x20000398
 80011c0:	20010000 	.word	0x20010000
 80011c4:	00000400 	.word	0x00000400
 80011c8:	20001ad8 	.word	0x20001ad8

080011cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011cc:	4a03      	ldr	r2, [pc, #12]	@ (80011dc <SystemInit+0x10>)
 80011ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80011d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001218 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011e4:	f7ff fff2 	bl	80011cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e8:	480c      	ldr	r0, [pc, #48]	@ (800121c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ea:	490d      	ldr	r1, [pc, #52]	@ (8001220 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001224 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f0:	e002      	b.n	80011f8 <LoopCopyDataInit>

080011f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f6:	3304      	adds	r3, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011fc:	d3f9      	bcc.n	80011f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001200:	4c0a      	ldr	r4, [pc, #40]	@ (800122c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001204:	e001      	b.n	800120a <LoopFillZerobss>

08001206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001208:	3204      	adds	r2, #4

0800120a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800120c:	d3fb      	bcc.n	8001206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120e:	f005 fb4b 	bl	80068a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001212:	f7ff fcf5 	bl	8000c00 <main>
  bx  lr    
 8001216:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001218:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001224:	08007a6c 	.word	0x08007a6c
  ldr r2, =_sbss
 8001228:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 800122c:	20001ad4 	.word	0x20001ad4

08001230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC_IRQHandler>
	...

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001236:	4a0e      	ldr	r2, [pc, #56]	@ (8001270 <HAL_InitTick+0x3c>)
 8001238:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <HAL_InitTick+0x40>)
 800123a:	7812      	ldrb	r2, [r2, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
{
 800123e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001244:	fbb0 f0f2 	udiv	r0, r0, r2
 8001248:	fbb3 f0f0 	udiv	r0, r3, r0
 800124c:	f000 fae6 	bl	800181c <HAL_SYSTICK_Config>
 8001250:	b908      	cbnz	r0, 8001256 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	2d0f      	cmp	r5, #15
 8001254:	d901      	bls.n	800125a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001256:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001258:	bd38      	pop	{r3, r4, r5, pc}
 800125a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	4602      	mov	r2, r0
 800125e:	4629      	mov	r1, r5
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001264:	f000 fa90 	bl	8001788 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HAL_InitTick+0x44>)
 800126a:	4620      	mov	r0, r4
 800126c:	601d      	str	r5, [r3, #0]
}
 800126e:	bd38      	pop	{r3, r4, r5, pc}
 8001270:	20000004 	.word	0x20000004
 8001274:	20000000 	.word	0x20000000
 8001278:	20000008 	.word	0x20000008

0800127c <HAL_Init>:
{
 800127c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_Init+0x30>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001286:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800128e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001296:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 fa63 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	200f      	movs	r0, #15
 80012a0:	f7ff ffc8 	bl	8001234 <HAL_InitTick>
  HAL_MspInit();
 80012a4:	f7ff fe26 	bl	8000ef4 <HAL_MspInit>
}
 80012a8:	2000      	movs	r0, #0
 80012aa:	bd08      	pop	{r3, pc}
 80012ac:	40023c00 	.word	0x40023c00

080012b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80012b0:	4a03      	ldr	r2, [pc, #12]	@ (80012c0 <HAL_IncTick+0x10>)
 80012b2:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <HAL_IncTick+0x14>)
 80012b4:	6811      	ldr	r1, [r2, #0]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	440b      	add	r3, r1
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	2000039c 	.word	0x2000039c
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012c8:	4b01      	ldr	r3, [pc, #4]	@ (80012d0 <HAL_GetTick+0x8>)
 80012ca:	6818      	ldr	r0, [r3, #0]
}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000039c 	.word	0x2000039c

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b538      	push	{r3, r4, r5, lr}
 80012d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80012d8:	f7ff fff6 	bl	80012c8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012dc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80012de:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80012e0:	d002      	beq.n	80012e8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e2:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <HAL_Delay+0x20>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012e8:	f7ff ffee 	bl	80012c8 <HAL_GetTick>
 80012ec:	1b40      	subs	r0, r0, r5
 80012ee:	42a0      	cmp	r0, r4
 80012f0:	d3fa      	bcc.n	80012e8 <HAL_Delay+0x14>
  {
  }
}
 80012f2:	bd38      	pop	{r3, r4, r5, pc}
 80012f4:	20000004 	.word	0x20000004

080012f8 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 80012f8:	2800      	cmp	r0, #0
 80012fa:	f000 809e 	beq.w	800143a <HAL_ADC_Init+0x142>
{
 80012fe:	b538      	push	{r3, r4, r5, lr}
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001300:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001302:	4604      	mov	r4, r0
 8001304:	b13d      	cbz	r5, 8001316 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001306:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001308:	06db      	lsls	r3, r3, #27
 800130a:	d50c      	bpl.n	8001326 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800130c:	2300      	movs	r3, #0
 800130e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 8001312:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8001314:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8001316:	f7ff fe09 	bl	8000f2c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800131a:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800131c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 800131e:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001322:	06db      	lsls	r3, r3, #27
 8001324:	d4f2      	bmi.n	800130c <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8001326:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001328:	4a47      	ldr	r2, [pc, #284]	@ (8001448 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 800132a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800132e:	f023 0302 	bic.w	r3, r3, #2
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001338:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800133a:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800133c:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8001340:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001342:	6851      	ldr	r1, [r2, #4]
 8001344:	6860      	ldr	r0, [r4, #4]
 8001346:	4301      	orrs	r1, r0
 8001348:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800134a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800134c:	6920      	ldr	r0, [r4, #16]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800134e:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001350:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001354:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800135c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800135e:	685a      	ldr	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001360:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001362:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001366:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	430a      	orrs	r2, r1
 800136c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800136e:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001370:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001372:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001376:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	4302      	orrs	r2, r0
 800137c:	609a      	str	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800137e:	4a33      	ldr	r2, [pc, #204]	@ (800144c <HAL_ADC_Init+0x154>)
 8001380:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001382:	689a      	ldr	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001384:	d051      	beq.n	800142a <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001386:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800138a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800138c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	4311      	orrs	r1, r2
 8001392:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800139a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	4302      	orrs	r2, r0
 80013a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	f022 0202 	bic.w	r2, r2, #2
 80013a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	7e21      	ldrb	r1, [r4, #24]
 80013ae:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80013b2:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80013b4:	f894 2020 	ldrb.w	r2, [r4, #32]
 80013b8:	2a00      	cmp	r2, #0
 80013ba:	d040      	beq.n	800143e <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013bc:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013c4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80013cc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	3901      	subs	r1, #1
 80013d2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80013d6:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013da:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013dc:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80013e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013e4:	3901      	subs	r1, #1
 80013e6:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80013ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013ec:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013ee:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80013f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 80013fc:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8001400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001408:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800140a:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800140c:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800140e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001412:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001414:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001416:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001418:	f023 0303 	bic.w	r3, r3, #3
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8001422:	2300      	movs	r3, #0
 8001424:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001428:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800142a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800142e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	e7b3      	b.n	80013a2 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 800143a:	2001      	movs	r0, #1
}
 800143c:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	e7c7      	b.n	80013d8 <HAL_ADC_Init+0xe0>
 8001448:	40012300 	.word	0x40012300
 800144c:	0f000001 	.word	0x0f000001

08001450 <HAL_ADC_Start_DMA>:
{
 8001450:	b570      	push	{r4, r5, r6, lr}
 8001452:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001454:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
{
 8001458:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800145a:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 800145c:	2801      	cmp	r0, #1
  __IO uint32_t counter = 0U;
 800145e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001460:	d07b      	beq.n	800155a <HAL_ADC_Start_DMA+0x10a>
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001462:	682e      	ldr	r6, [r5, #0]
 8001464:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8001466:	2201      	movs	r2, #1
 8001468:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800146c:	68b2      	ldr	r2, [r6, #8]
 800146e:	07d2      	lsls	r2, r2, #31
 8001470:	d414      	bmi.n	800149c <HAL_ADC_Start_DMA+0x4c>
    __HAL_ADC_ENABLE(hadc);
 8001472:	68b2      	ldr	r2, [r6, #8]
 8001474:	f042 0201 	orr.w	r2, r2, #1
 8001478:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800147a:	4a39      	ldr	r2, [pc, #228]	@ (8001560 <HAL_ADC_Start_DMA+0x110>)
 800147c:	6810      	ldr	r0, [r2, #0]
 800147e:	4a39      	ldr	r2, [pc, #228]	@ (8001564 <HAL_ADC_Start_DMA+0x114>)
 8001480:	fba2 2000 	umull	r2, r0, r2, r0
 8001484:	0c80      	lsrs	r0, r0, #18
 8001486:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800148a:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 800148c:	9a01      	ldr	r2, [sp, #4]
 800148e:	b12a      	cbz	r2, 800149c <HAL_ADC_Start_DMA+0x4c>
      counter--;
 8001490:	9c01      	ldr	r4, [sp, #4]
 8001492:	3c01      	subs	r4, #1
 8001494:	9401      	str	r4, [sp, #4]
    while (counter != 0U)
 8001496:	9801      	ldr	r0, [sp, #4]
 8001498:	2800      	cmp	r0, #0
 800149a:	d1f9      	bne.n	8001490 <HAL_ADC_Start_DMA+0x40>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800149c:	68b2      	ldr	r2, [r6, #8]
 800149e:	05d4      	lsls	r4, r2, #23
 80014a0:	d503      	bpl.n	80014aa <HAL_ADC_Start_DMA+0x5a>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014a2:	68b2      	ldr	r2, [r6, #8]
 80014a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014a8:	60b2      	str	r2, [r6, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014aa:	68b2      	ldr	r2, [r6, #8]
 80014ac:	07d0      	lsls	r0, r2, #31
 80014ae:	d540      	bpl.n	8001532 <HAL_ADC_Start_DMA+0xe2>
    ADC_STATE_CLR_SET(hadc->State,
 80014b0:	6c28      	ldr	r0, [r5, #64]	@ 0x40
 80014b2:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 80014b6:	f020 0001 	bic.w	r0, r0, #1
 80014ba:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 80014be:	6428      	str	r0, [r5, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014c0:	6872      	ldr	r2, [r6, #4]
 80014c2:	0552      	lsls	r2, r2, #21
 80014c4:	d505      	bpl.n	80014d2 <HAL_ADC_Start_DMA+0x82>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014c6:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80014c8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80014cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80014d0:	642a      	str	r2, [r5, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d2:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014d4:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014da:	bf1c      	itt	ne
 80014dc:	6c6a      	ldrne	r2, [r5, #68]	@ 0x44
 80014de:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80014e2:	646a      	str	r2, [r5, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014ea:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014ec:	491e      	ldr	r1, [pc, #120]	@ (8001568 <HAL_ADC_Start_DMA+0x118>)
 80014ee:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014f0:	491e      	ldr	r1, [pc, #120]	@ (800156c <HAL_ADC_Start_DMA+0x11c>)
 80014f2:	6401      	str	r1, [r0, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014f4:	491e      	ldr	r1, [pc, #120]	@ (8001570 <HAL_ADC_Start_DMA+0x120>)
 80014f6:	64c1      	str	r1, [r0, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014f8:	f06f 0122 	mvn.w	r1, #34	@ 0x22
 80014fc:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014fe:	6871      	ldr	r1, [r6, #4]
 8001500:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8001504:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001506:	68b1      	ldr	r1, [r6, #8]
 8001508:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800150c:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800150e:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
 8001512:	f000 fa33 	bl	800197c <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001516:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <HAL_ADC_Start_DMA+0x124>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	06db      	lsls	r3, r3, #27
 800151c:	d114      	bne.n	8001548 <HAL_ADC_Start_DMA+0xf8>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800151e:	682b      	ldr	r3, [r5, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001526:	d10c      	bne.n	8001542 <HAL_ADC_Start_DMA+0xf2>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	e007      	b.n	8001542 <HAL_ADC_Start_DMA+0xf2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001534:	f043 0310 	orr.w	r3, r3, #16
 8001538:	642b      	str	r3, [r5, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	646b      	str	r3, [r5, #68]	@ 0x44
  return HAL_OK;
 8001542:	2000      	movs	r0, #0
}
 8001544:	b002      	add	sp, #8
 8001546:	bd70      	pop	{r4, r5, r6, pc}
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001548:	4a0b      	ldr	r2, [pc, #44]	@ (8001578 <HAL_ADC_Start_DMA+0x128>)
 800154a:	682b      	ldr	r3, [r5, #0]
 800154c:	4293      	cmp	r3, r2
 800154e:	d1f8      	bne.n	8001542 <HAL_ADC_Start_DMA+0xf2>
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001556:	d1f4      	bne.n	8001542 <HAL_ADC_Start_DMA+0xf2>
 8001558:	e7e6      	b.n	8001528 <HAL_ADC_Start_DMA+0xd8>
  __HAL_LOCK(hadc);
 800155a:	2002      	movs	r0, #2
}
 800155c:	b002      	add	sp, #8
 800155e:	bd70      	pop	{r4, r5, r6, pc}
 8001560:	20000000 	.word	0x20000000
 8001564:	431bde83 	.word	0x431bde83
 8001568:	080015a9 	.word	0x080015a9
 800156c:	08001581 	.word	0x08001581
 8001570:	08001591 	.word	0x08001591
 8001574:	40012300 	.word	0x40012300
 8001578:	40012000 	.word	0x40012000

0800157c <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001580:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001582:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001584:	f7ff fffa 	bl	800157c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001588:	bd08      	pop	{r3, pc}
 800158a:	bf00      	nop

0800158c <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop

08001590 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001590:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001592:	b508      	push	{r3, lr}
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001594:	2340      	movs	r3, #64	@ 0x40
 8001596:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001598:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015a0:	f7ff fff4 	bl	800158c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015a4:	bd08      	pop	{r3, pc}
 80015a6:	bf00      	nop

080015a8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015a8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ac:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 80015b0:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015b4:	d123      	bne.n	80015fe <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015ba:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015bc:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015be:	688a      	ldr	r2, [r1, #8]
 80015c0:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80015c4:	d117      	bne.n	80015f6 <ADC_DMAConvCplt+0x4e>
 80015c6:	7e1a      	ldrb	r2, [r3, #24]
 80015c8:	b9aa      	cbnz	r2, 80015f6 <ADC_DMAConvCplt+0x4e>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015ca:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015cc:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 80015d0:	d002      	beq.n	80015d8 <ADC_DMAConvCplt+0x30>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80015d2:	688a      	ldr	r2, [r1, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015d4:	0550      	lsls	r0, r2, #21
 80015d6:	d40e      	bmi.n	80015f6 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015d8:	684a      	ldr	r2, [r1, #4]
 80015da:	f022 0220 	bic.w	r2, r2, #32
 80015de:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015e6:	641a      	str	r2, [r3, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ea:	04d1      	lsls	r1, r2, #19
 80015ec:	d403      	bmi.n	80015f6 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffd4 	bl	80005a4 <HAL_ADC_ConvCpltCallback>
}
 80015fc:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80015fe:	06d2      	lsls	r2, r2, #27
 8001600:	d404      	bmi.n	800160c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160a:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ffbd 	bl	800158c <HAL_ADC_ErrorCallback>
}
 8001612:	bd10      	pop	{r4, pc}

08001614 <HAL_ADC_ConfigChannel>:
{
 8001614:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001616:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800161a:	b082      	sub	sp, #8
 800161c:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 800161e:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8001620:	f04f 0000 	mov.w	r0, #0
 8001624:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001626:	f000 8093 	beq.w	8001750 <HAL_ADC_ConfigChannel+0x13c>
 800162a:	2301      	movs	r3, #1
 800162c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001630:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001632:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001634:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001636:	2d09      	cmp	r5, #9
 8001638:	b2a8      	uxth	r0, r5
 800163a:	d828      	bhi.n	800168e <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800163c:	691e      	ldr	r6, [r3, #16]
 800163e:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8001642:	f04f 0c07 	mov.w	ip, #7
 8001646:	fa0c fc0e 	lsl.w	ip, ip, lr
 800164a:	ea26 060c 	bic.w	r6, r6, ip
 800164e:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001650:	691e      	ldr	r6, [r3, #16]
 8001652:	fa04 f40e 	lsl.w	r4, r4, lr
 8001656:	4334      	orrs	r4, r6
 8001658:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 800165a:	684c      	ldr	r4, [r1, #4]
 800165c:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800165e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8001662:	d82a      	bhi.n	80016ba <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001664:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8001666:	3905      	subs	r1, #5
 8001668:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800166c:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800166e:	fa0c f101 	lsl.w	r1, ip, r1
 8001672:	ea24 0101 	bic.w	r1, r4, r1
 8001676:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001678:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800167a:	4308      	orrs	r0, r1
 800167c:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800167e:	4936      	ldr	r1, [pc, #216]	@ (8001758 <HAL_ADC_ConfigChannel+0x144>)
 8001680:	428b      	cmp	r3, r1
 8001682:	d02b      	beq.n	80016dc <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8001684:	2000      	movs	r0, #0
 8001686:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 800168a:	b002      	add	sp, #8
 800168c:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800168e:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8001692:	68de      	ldr	r6, [r3, #12]
 8001694:	f1ac 0c1e 	sub.w	ip, ip, #30
 8001698:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800169c:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016a0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80016a4:	ea26 060c 	bic.w	r6, r6, ip
 80016a8:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016aa:	68de      	ldr	r6, [r3, #12]
 80016ac:	4334      	orrs	r4, r6
 80016ae:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 80016b0:	684c      	ldr	r4, [r1, #4]
 80016b2:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016b4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 80016b8:	d9d4      	bls.n	8001664 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 80016ba:	2c0c      	cmp	r4, #12
 80016bc:	d834      	bhi.n	8001728 <HAL_ADC_ConfigChannel+0x114>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016be:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80016c0:	3923      	subs	r1, #35	@ 0x23
 80016c2:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016c4:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016c6:	fa06 f101 	lsl.w	r1, r6, r1
 80016ca:	ea24 0101 	bic.w	r1, r4, r1
 80016ce:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016d2:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016d4:	4920      	ldr	r1, [pc, #128]	@ (8001758 <HAL_ADC_ConfigChannel+0x144>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016d6:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016d8:	428b      	cmp	r3, r1
 80016da:	d1d3      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x70>
 80016dc:	2d12      	cmp	r5, #18
 80016de:	d030      	beq.n	8001742 <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016e0:	f1a5 0310 	sub.w	r3, r5, #16
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d8cd      	bhi.n	8001684 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016e8:	491c      	ldr	r1, [pc, #112]	@ (800175c <HAL_ADC_ConfigChannel+0x148>)
 80016ea:	684b      	ldr	r3, [r1, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016ec:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016f2:	604b      	str	r3, [r1, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016f4:	d1c6      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <HAL_ADC_ConfigChannel+0x14c>)
 80016f8:	f101 7146 	add.w	r1, r1, #51904512	@ 0x3180000
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f501 312e 	add.w	r1, r1, #178176	@ 0x2b800
 8001702:	f201 3183 	addw	r1, r1, #899	@ 0x383
 8001706:	fba1 1303 	umull	r1, r3, r1, r3
 800170a:	0c9b      	lsrs	r3, r3, #18
 800170c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8001714:	9b01      	ldr	r3, [sp, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0b4      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 800171a:	9b01      	ldr	r3, [sp, #4]
 800171c:	3b01      	subs	r3, #1
 800171e:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8001720:	9b01      	ldr	r3, [sp, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f9      	bne.n	800171a <HAL_ADC_ConfigChannel+0x106>
 8001726:	e7ad      	b.n	8001684 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001728:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800172a:	3941      	subs	r1, #65	@ 0x41
 800172c:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800172e:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001730:	fa06 f101 	lsl.w	r1, r6, r1
 8001734:	ea24 0101 	bic.w	r1, r4, r1
 8001738:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800173a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800173c:	4308      	orrs	r0, r1
 800173e:	62d8      	str	r0, [r3, #44]	@ 0x2c
 8001740:	e79d      	b.n	800167e <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001742:	f8d1 3304 	ldr.w	r3, [r1, #772]	@ 0x304
 8001746:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800174a:	f8c1 3304 	str.w	r3, [r1, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800174e:	e799      	b.n	8001684 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8001750:	2002      	movs	r0, #2
}
 8001752:	b002      	add	sp, #8
 8001754:	bd70      	pop	{r4, r5, r6, pc}
 8001756:	bf00      	nop
 8001758:	40012000 	.word	0x40012000
 800175c:	40012300 	.word	0x40012300
 8001760:	20000000 	.word	0x20000000

08001764 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4907      	ldr	r1, [pc, #28]	@ (8001784 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001766:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001768:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800176e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001776:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800177a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800177e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <HAL_NVIC_SetPriority+0x70>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001790:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001792:	f1c3 0e07 	rsb	lr, r3, #7
 8001796:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179e:	bf28      	it	cs
 80017a0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a4:	f1bc 0f06 	cmp.w	ip, #6
 80017a8:	d91c      	bls.n	80017e4 <HAL_NVIC_SetPriority+0x5c>
 80017aa:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017b2:	fa03 f30c 	lsl.w	r3, r3, ip
 80017b6:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017be:	fa03 f30e 	lsl.w	r3, r3, lr
 80017c2:	ea21 0303 	bic.w	r3, r1, r3
 80017c6:	fa03 f30c 	lsl.w	r3, r3, ip
 80017ca:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80017ce:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80017d2:	db0a      	blt.n	80017ea <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80017d8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80017dc:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80017e4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	4694      	mov	ip, r2
 80017e8:	e7e7      	b.n	80017ba <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ea:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <HAL_NVIC_SetPriority+0x74>)
 80017ec:	f000 000f 	and.w	r0, r0, #15
 80017f0:	4402      	add	r2, r0
 80017f2:	7613      	strb	r3, [r2, #24]
 80017f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80017f8:	e000ed00 	.word	0xe000ed00
 80017fc:	e000ecfc 	.word	0xe000ecfc

08001800 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001800:	2800      	cmp	r0, #0
 8001802:	db07      	blt.n	8001814 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001804:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <HAL_NVIC_EnableIRQ+0x18>)
 8001806:	0941      	lsrs	r1, r0, #5
 8001808:	2301      	movs	r3, #1
 800180a:	f000 001f 	and.w	r0, r0, #31
 800180e:	4083      	lsls	r3, r0
 8001810:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e100 	.word	0xe000e100

0800181c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800181c:	3801      	subs	r0, #1
 800181e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001822:	d301      	bcc.n	8001828 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001824:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001826:	4770      	bx	lr
{
 8001828:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	4c07      	ldr	r4, [pc, #28]	@ (800184c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001830:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8001836:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001840:	619a      	str	r2, [r3, #24]
}
 8001842:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001846:	6119      	str	r1, [r3, #16]
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001850:	b538      	push	{r3, r4, r5, lr}
 8001852:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff fd38 	bl	80012c8 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001858:	2c00      	cmp	r4, #0
 800185a:	d06f      	beq.n	800193c <HAL_DMA_Init+0xec>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800185c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800185e:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001860:	2102      	movs	r1, #2
 8001862:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001866:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	4605      	mov	r5, r0
 8001872:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001874:	e005      	b.n	8001882 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001876:	f7ff fd27 	bl	80012c8 <HAL_GetTick>
 800187a:	1b43      	subs	r3, r0, r5
 800187c:	2b05      	cmp	r3, #5
 800187e:	d839      	bhi.n	80018f4 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	07d1      	lsls	r1, r2, #31
 8001886:	d4f6      	bmi.n	8001876 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001888:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800188c:	68e1      	ldr	r1, [r4, #12]
 800188e:	4302      	orrs	r2, r0
 8001890:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001892:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001896:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001898:	432a      	orrs	r2, r5
 800189a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189c:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 800189e:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a0:	4302      	orrs	r2, r0
 80018a2:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018a4:	4932      	ldr	r1, [pc, #200]	@ (8001970 <HAL_DMA_Init+0x120>)
 80018a6:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a8:	6a25      	ldr	r5, [r4, #32]
 80018aa:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ac:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018ae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80018b0:	2904      	cmp	r1, #4
 80018b2:	d026      	beq.n	8001902 <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018b4:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018b6:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018b8:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018bc:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018be:	b2d8      	uxtb	r0, r3
 80018c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001974 <HAL_DMA_Init+0x124>)
  hdma->Instance->FCR = tmp;
 80018c2:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018c4:	3810      	subs	r0, #16
 80018c6:	fba2 5200 	umull	r5, r2, r2, r0
 80018ca:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018cc:	492a      	ldr	r1, [pc, #168]	@ (8001978 <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018d2:	5c89      	ldrb	r1, [r1, r2]
 80018d4:	65e1      	str	r1, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018d6:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80018da:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018dc:	bf88      	it	hi
 80018de:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e0:	223f      	movs	r2, #63	@ 0x3f
 80018e2:	408a      	lsls	r2, r1
 80018e4:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e6:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e8:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 80018ea:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ec:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80018ee:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 80018f2:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018f6:	2220      	movs	r2, #32
 80018f8:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018fa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 80018fe:	4618      	mov	r0, r3
}
 8001900:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001902:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 8001906:	4329      	orrs	r1, r5
 8001908:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 800190a:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 800190c:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800190e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001910:	f021 0107 	bic.w	r1, r1, #7
 8001914:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8001916:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800191a:	2d00      	cmp	r5, #0
 800191c:	d0cf      	beq.n	80018be <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800191e:	b178      	cbz	r0, 8001940 <HAL_DMA_Init+0xf0>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001920:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8001924:	d016      	beq.n	8001954 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001926:	2a02      	cmp	r2, #2
 8001928:	d903      	bls.n	8001932 <HAL_DMA_Init+0xe2>
 800192a:	2a03      	cmp	r2, #3
 800192c:	d1c7      	bne.n	80018be <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800192e:	01ea      	lsls	r2, r5, #7
 8001930:	d5c5      	bpl.n	80018be <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001932:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001934:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001936:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001938:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 800193c:	2001      	movs	r0, #1
}
 800193e:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8001940:	2a01      	cmp	r2, #1
 8001942:	d003      	beq.n	800194c <HAL_DMA_Init+0xfc>
 8001944:	f032 0202 	bics.w	r2, r2, #2
 8001948:	d1b9      	bne.n	80018be <HAL_DMA_Init+0x6e>
 800194a:	e7f0      	b.n	800192e <HAL_DMA_Init+0xde>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800194c:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8001950:	d1b5      	bne.n	80018be <HAL_DMA_Init+0x6e>
 8001952:	e7ee      	b.n	8001932 <HAL_DMA_Init+0xe2>
    switch (tmp)
 8001954:	2a03      	cmp	r2, #3
 8001956:	d8b2      	bhi.n	80018be <HAL_DMA_Init+0x6e>
 8001958:	a001      	add	r0, pc, #4	@ (adr r0, 8001960 <HAL_DMA_Init+0x110>)
 800195a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800195e:	bf00      	nop
 8001960:	08001933 	.word	0x08001933
 8001964:	0800192f 	.word	0x0800192f
 8001968:	08001933 	.word	0x08001933
 800196c:	0800194d 	.word	0x0800194d
 8001970:	f010803f 	.word	0xf010803f
 8001974:	aaaaaaab 	.word	0xaaaaaaab
 8001978:	0800726c 	.word	0x0800726c

0800197c <HAL_DMA_Start_IT>:
{
 800197c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 800197e:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001982:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001984:	2c01      	cmp	r4, #1
 8001986:	d00a      	beq.n	800199e <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001988:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
  __HAL_LOCK(hdma);
 800198c:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001990:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8001992:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001996:	d005      	beq.n	80019a4 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001998:	2300      	movs	r3, #0
 800199a:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 800199e:	2002      	movs	r0, #2
}
 80019a0:	bc70      	pop	{r4, r5, r6}
 80019a2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80019a4:	2602      	movs	r6, #2
 80019a6:	f880 6035 	strb.w	r6, [r0, #53]	@ 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019aa:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ac:	2600      	movs	r6, #0
 80019ae:	6546      	str	r6, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019b0:	6826      	ldr	r6, [r4, #0]
 80019b2:	f426 2680 	bic.w	r6, r6, #262144	@ 0x40000
 80019b6:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80019b8:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ba:	6883      	ldr	r3, [r0, #8]
 80019bc:	2b40      	cmp	r3, #64	@ 0x40
    hdma->Instance->PAR = DstAddress;
 80019be:	bf0e      	itee	eq
 80019c0:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80019c2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80019c4:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019c6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80019c8:	bf08      	it	eq
 80019ca:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019cc:	233f      	movs	r3, #63	@ 0x3f
 80019ce:	4093      	lsls	r3, r2
 80019d0:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019d2:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80019d4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019d6:	f043 0316 	orr.w	r3, r3, #22
 80019da:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80019dc:	b11a      	cbz	r2, 80019e6 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	f043 0308 	orr.w	r3, r3, #8
 80019e4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80019ec:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80019ee:	6023      	str	r3, [r4, #0]
}
 80019f0:	bc70      	pop	{r4, r5, r6}
 80019f2:	4770      	bx	lr

080019f4 <HAL_DMA_IRQHandler>:
{
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f6:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 80019f8:	4a67      	ldr	r2, [pc, #412]	@ (8001b98 <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019fa:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80019fc:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a02:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8001a04:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a06:	2208      	movs	r2, #8
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	422a      	tst	r2, r5
{
 8001a0c:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a0e:	d003      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a10:	6801      	ldr	r1, [r0, #0]
 8001a12:	6808      	ldr	r0, [r1, #0]
 8001a14:	0740      	lsls	r0, r0, #29
 8001a16:	d478      	bmi.n	8001b0a <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	422a      	tst	r2, r5
 8001a1e:	d003      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a20:	6821      	ldr	r1, [r4, #0]
 8001a22:	6949      	ldr	r1, [r1, #20]
 8001a24:	0608      	lsls	r0, r1, #24
 8001a26:	d46a      	bmi.n	8001afe <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a28:	2204      	movs	r2, #4
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	422a      	tst	r2, r5
 8001a2e:	d003      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a30:	6821      	ldr	r1, [r4, #0]
 8001a32:	6809      	ldr	r1, [r1, #0]
 8001a34:	0789      	lsls	r1, r1, #30
 8001a36:	d45c      	bmi.n	8001af2 <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a38:	2210      	movs	r2, #16
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	422a      	tst	r2, r5
 8001a3e:	d003      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a40:	6821      	ldr	r1, [r4, #0]
 8001a42:	6808      	ldr	r0, [r1, #0]
 8001a44:	0700      	lsls	r0, r0, #28
 8001a46:	d441      	bmi.n	8001acc <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a48:	2220      	movs	r2, #32
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	422a      	tst	r2, r5
 8001a4e:	d014      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a50:	6821      	ldr	r1, [r4, #0]
 8001a52:	6808      	ldr	r0, [r1, #0]
 8001a54:	06c0      	lsls	r0, r0, #27
 8001a56:	d510      	bpl.n	8001a7a <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a58:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a5a:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8001a5e:	2a05      	cmp	r2, #5
 8001a60:	d063      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a62:	680b      	ldr	r3, [r1, #0]
 8001a64:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a68:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a6a:	d07e      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a6c:	0319      	lsls	r1, r3, #12
 8001a6e:	f140 8089 	bpl.w	8001b84 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8001a72:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001a74:	b10b      	cbz	r3, 8001a7a <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8001a76:	4620      	mov	r0, r4
 8001a78:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a7a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a7c:	b323      	cbz	r3, 8001ac8 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a7e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a80:	07da      	lsls	r2, r3, #31
 8001a82:	d51a      	bpl.n	8001aba <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8001a84:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a86:	4945      	ldr	r1, [pc, #276]	@ (8001b9c <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a88:	2305      	movs	r3, #5
 8001a8a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001a8e:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a90:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8001a94:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a98:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	e002      	b.n	8001aa4 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a9e:	6813      	ldr	r3, [r2, #0]
 8001aa0:	07db      	lsls	r3, r3, #31
 8001aa2:	d504      	bpl.n	8001aae <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	42b3      	cmp	r3, r6
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	d9f7      	bls.n	8001a9e <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 8001aae:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8001ab0:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001ab6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001aba:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001abc:	b123      	cbz	r3, 8001ac8 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8001abe:	4620      	mov	r0, r4
}
 8001ac0:	b003      	add	sp, #12
 8001ac2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001ac6:	4718      	bx	r3
}
 8001ac8:	b003      	add	sp, #12
 8001aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001acc:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ace:	680a      	ldr	r2, [r1, #0]
 8001ad0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ad4:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ad6:	d122      	bne.n	8001b1e <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ad8:	05d2      	lsls	r2, r2, #23
 8001ada:	d403      	bmi.n	8001ae4 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001adc:	680a      	ldr	r2, [r1, #0]
 8001ade:	f022 0208 	bic.w	r2, r2, #8
 8001ae2:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001ae4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001ae6:	2a00      	cmp	r2, #0
 8001ae8:	d0ae      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8001aea:	4620      	mov	r0, r4
 8001aec:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001aee:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001af0:	e7aa      	b.n	8001a48 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001af2:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001af4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001af6:	f042 0204 	orr.w	r2, r2, #4
 8001afa:	6562      	str	r2, [r4, #84]	@ 0x54
 8001afc:	e79c      	b.n	8001a38 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001afe:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001b02:	f042 0202 	orr.w	r2, r2, #2
 8001b06:	6562      	str	r2, [r4, #84]	@ 0x54
 8001b08:	e78e      	b.n	8001a28 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b0a:	6808      	ldr	r0, [r1, #0]
 8001b0c:	f020 0004 	bic.w	r0, r0, #4
 8001b10:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b12:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	6562      	str	r2, [r4, #84]	@ 0x54
 8001b1c:	e77c      	b.n	8001a18 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b1e:	0311      	lsls	r1, r2, #12
 8001b20:	d5e0      	bpl.n	8001ae4 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b22:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001b24:	2a00      	cmp	r2, #0
 8001b26:	d1e0      	bne.n	8001aea <HAL_DMA_IRQHandler+0xf6>
 8001b28:	e78e      	b.n	8001a48 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b2a:	680a      	ldr	r2, [r1, #0]
 8001b2c:	f022 0216 	bic.w	r2, r2, #22
 8001b30:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b32:	694a      	ldr	r2, [r1, #20]
 8001b34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b38:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b3a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001b3c:	b33a      	cbz	r2, 8001b8e <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b3e:	680a      	ldr	r2, [r1, #0]
 8001b40:	f022 0208 	bic.w	r2, r2, #8
 8001b44:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b46:	223f      	movs	r2, #63	@ 0x3f
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8001b4c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4e:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001b50:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8001b52:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001b54:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001b58:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001b5c:	2900      	cmp	r1, #0
 8001b5e:	d0b3      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8001b60:	4620      	mov	r0, r4
}
 8001b62:	b003      	add	sp, #12
 8001b64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8001b68:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b6a:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8001b6e:	d180      	bne.n	8001a72 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b70:	680a      	ldr	r2, [r1, #0]
 8001b72:	f022 0210 	bic.w	r2, r2, #16
 8001b76:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001b7e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8001b82:	e776      	b.n	8001a72 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8001b84:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f47f af75 	bne.w	8001a76 <HAL_DMA_IRQHandler+0x82>
 8001b8c:	e775      	b.n	8001a7a <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b8e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001b90:	2a00      	cmp	r2, #0
 8001b92:	d1d4      	bne.n	8001b3e <HAL_DMA_IRQHandler+0x14a>
 8001b94:	e7d7      	b.n	8001b46 <HAL_DMA_IRQHandler+0x152>
 8001b96:	bf00      	nop
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	1b4e81b5 	.word	0x1b4e81b5

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba4:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba6:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba8:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 8001d80 <HAL_GPIO_Init+0x1e0>
{
 8001bac:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8001bae:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb2:	4689      	mov	r9, r1
 8001bb4:	e003      	b.n	8001bbe <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	2b10      	cmp	r3, #16
 8001bba:	f000 8082 	beq.w	8001cc2 <HAL_GPIO_Init+0x122>
    ioposition = 0x01U << position;
 8001bbe:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc2:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8001bc6:	43a2      	bics	r2, r4
 8001bc8:	d1f5      	bne.n	8001bb6 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bca:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001bce:	f001 0203 	and.w	r2, r1, #3
 8001bd2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bd6:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd8:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bda:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bde:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001be0:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be4:	d970      	bls.n	8001cc8 <HAL_GPIO_Init+0x128>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be6:	2a03      	cmp	r2, #3
 8001be8:	f040 80a7 	bne.w	8001d3a <HAL_GPIO_Init+0x19a>
      temp = GPIOx->MODER;
 8001bec:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bee:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bf2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf4:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf6:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001bfa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bfc:	d0db      	beq.n	8001bb6 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2200      	movs	r2, #0
 8001c00:	9203      	str	r2, [sp, #12]
 8001c02:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001c06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c0a:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8001c0e:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001c12:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001c16:	9203      	str	r2, [sp, #12]
 8001c18:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1a:	f023 0203 	bic.w	r2, r3, #3
 8001c1e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c22:	f003 0703 	and.w	r7, r3, #3
 8001c26:	260f      	movs	r6, #15
 8001c28:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8001c2c:	00bf      	lsls	r7, r7, #2
 8001c2e:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c32:	4e50      	ldr	r6, [pc, #320]	@ (8001d74 <HAL_GPIO_Init+0x1d4>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c34:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c36:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c38:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3c:	d018      	beq.n	8001c70 <HAL_GPIO_Init+0xd0>
 8001c3e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001c42:	42b0      	cmp	r0, r6
 8001c44:	f000 8084 	beq.w	8001d50 <HAL_GPIO_Init+0x1b0>
 8001c48:	4e4b      	ldr	r6, [pc, #300]	@ (8001d78 <HAL_GPIO_Init+0x1d8>)
 8001c4a:	42b0      	cmp	r0, r6
 8001c4c:	f000 8086 	beq.w	8001d5c <HAL_GPIO_Init+0x1bc>
 8001c50:	f8df c130 	ldr.w	ip, [pc, #304]	@ 8001d84 <HAL_GPIO_Init+0x1e4>
 8001c54:	4560      	cmp	r0, ip
 8001c56:	f000 8087 	beq.w	8001d68 <HAL_GPIO_Init+0x1c8>
 8001c5a:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8001d88 <HAL_GPIO_Init+0x1e8>
 8001c5e:	4560      	cmp	r0, ip
 8001c60:	bf0c      	ite	eq
 8001c62:	f04f 0c04 	moveq.w	ip, #4
 8001c66:	f04f 0c07 	movne.w	ip, #7
 8001c6a:	fa0c f707 	lsl.w	r7, ip, r7
 8001c6e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c70:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c72:	4a42      	ldr	r2, [pc, #264]	@ (8001d7c <HAL_GPIO_Init+0x1dc>)
 8001c74:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c76:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8001c78:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001c7c:	4e3f      	ldr	r6, [pc, #252]	@ (8001d7c <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	bf54      	ite	pl
 8001c80:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001c82:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8001c86:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8001c88:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001c8a:	4e3c      	ldr	r6, [pc, #240]	@ (8001d7c <HAL_GPIO_Init+0x1dc>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c8c:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	bf54      	ite	pl
 8001c90:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001c92:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8001c96:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8001c98:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c9a:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001c9c:	4e37      	ldr	r6, [pc, #220]	@ (8001d7c <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	bf54      	ite	pl
 8001ca0:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001ca2:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8001ca6:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca8:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001caa:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cac:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001cb0:	4932      	ldr	r1, [pc, #200]	@ (8001d7c <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	bf54      	ite	pl
 8001cb4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001cb6:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8001cbc:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbe:	f47f af7e 	bne.w	8001bbe <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8001cc2:	b005      	add	sp, #20
 8001cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8001cc8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cca:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cce:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8001cd2:	fa07 f70c 	lsl.w	r7, r7, ip
 8001cd6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001cda:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001cdc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cde:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce2:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8001ce6:	409f      	lsls	r7, r3
 8001ce8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001cec:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001cee:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf0:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001cf8:	fa07 f70c 	lsl.w	r7, r7, ip
 8001cfc:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d00:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8001d02:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d04:	f47f af72 	bne.w	8001bec <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8001d08:	08df      	lsrs	r7, r3, #3
 8001d0a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8001d0e:	9701      	str	r7, [sp, #4]
 8001d10:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d12:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8001d16:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d18:	f003 0e07 	and.w	lr, r3, #7
 8001d1c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001d20:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d22:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	fa06 fe0e 	lsl.w	lr, r6, lr
 8001d2a:	9e00      	ldr	r6, [sp, #0]
 8001d2c:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001d30:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d32:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001d36:	6237      	str	r7, [r6, #32]
 8001d38:	e758      	b.n	8001bec <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8001d3a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3c:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d40:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001d44:	fa07 f70c 	lsl.w	r7, r7, ip
 8001d48:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001d4c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4e:	e74d      	b.n	8001bec <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d50:	f04f 0c01 	mov.w	ip, #1
 8001d54:	fa0c f707 	lsl.w	r7, ip, r7
 8001d58:	433d      	orrs	r5, r7
 8001d5a:	e789      	b.n	8001c70 <HAL_GPIO_Init+0xd0>
 8001d5c:	f04f 0c02 	mov.w	ip, #2
 8001d60:	fa0c f707 	lsl.w	r7, ip, r7
 8001d64:	433d      	orrs	r5, r7
 8001d66:	e783      	b.n	8001c70 <HAL_GPIO_Init+0xd0>
 8001d68:	f04f 0c03 	mov.w	ip, #3
 8001d6c:	fa0c f707 	lsl.w	r7, ip, r7
 8001d70:	433d      	orrs	r5, r7
 8001d72:	e77d      	b.n	8001c70 <HAL_GPIO_Init+0xd0>
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40013c00 	.word	0x40013c00
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d8c:	6903      	ldr	r3, [r0, #16]
 8001d8e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001d90:	bf14      	ite	ne
 8001d92:	2001      	movne	r0, #1
 8001d94:	2000      	moveq	r0, #0
 8001d96:	4770      	bx	lr

08001d98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d98:	b902      	cbnz	r2, 8001d9c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d9a:	0409      	lsls	r1, r1, #16
 8001d9c:	6181      	str	r1, [r0, #24]
  }
}
 8001d9e:	4770      	bx	lr

08001da0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8001da0:	b570      	push	{r4, r5, r6, lr}
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001da2:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8001da4:	4604      	mov	r4, r0
 8001da6:	1c48      	adds	r0, r1, #1
 8001da8:	d003      	beq.n	8001db2 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x12>
 8001daa:	e01e      	b.n	8001dea <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	0551      	lsls	r1, r2, #21
 8001db0:	d404      	bmi.n	8001dbc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001db2:	695a      	ldr	r2, [r3, #20]
 8001db4:	0790      	lsls	r0, r2, #30
 8001db6:	d5f9      	bpl.n	8001dac <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0xc>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001db8:	2000      	movs	r0, #0
}
 8001dba:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dc2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc4:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc6:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dca:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dcc:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dce:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dd0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dd4:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001de0:	2300      	movs	r3, #0
 8001de2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8001de6:	2001      	movs	r0, #1
}
 8001de8:	bd70      	pop	{r4, r5, r6, pc}
 8001dea:	460d      	mov	r5, r1
 8001dec:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	0792      	lsls	r2, r2, #30
 8001df2:	d4e1      	bmi.n	8001db8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x18>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	0551      	lsls	r1, r2, #21
 8001df8:	d4e0      	bmi.n	8001dbc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfa:	f7ff fa65 	bl	80012c8 <HAL_GetTick>
 8001dfe:	1b80      	subs	r0, r0, r6
 8001e00:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e02:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e04:	d301      	bcc.n	8001e0a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x6a>
 8001e06:	2d00      	cmp	r5, #0
 8001e08:	d1f1      	bne.n	8001dee <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	0792      	lsls	r2, r2, #30
 8001e0e:	d4ee      	bmi.n	8001dee <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4e>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e10:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e12:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e14:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e16:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e1a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e20:	4313      	orrs	r3, r2
 8001e22:	6423      	str	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8001e24:	e7dc      	b.n	8001de0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x40>
 8001e26:	bf00      	nop

08001e28 <I2C_RequestMemoryWrite>:
{
 8001e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e2c:	6805      	ldr	r5, [r0, #0]
{
 8001e2e:	b083      	sub	sp, #12
 8001e30:	469a      	mov	sl, r3
 8001e32:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e36:	682b      	ldr	r3, [r5, #0]
{
 8001e38:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e40:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
{
 8001e44:	4606      	mov	r6, r0
 8001e46:	460f      	mov	r7, r1
 8001e48:	4691      	mov	r9, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e4a:	602b      	str	r3, [r5, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8001e4c:	d114      	bne.n	8001e78 <I2C_RequestMemoryWrite+0x50>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e4e:	696c      	ldr	r4, [r5, #20]
 8001e50:	07e2      	lsls	r2, r4, #31
 8001e52:	d5fc      	bpl.n	8001e4e <I2C_RequestMemoryWrite+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e54:	f007 07fe 	and.w	r7, r7, #254	@ 0xfe
 8001e58:	612f      	str	r7, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e5a:	465a      	mov	r2, fp
 8001e5c:	4641      	mov	r1, r8
 8001e5e:	4630      	mov	r0, r6
 8001e60:	f7ff ff9e 	bl	8001da0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8001e64:	4604      	mov	r4, r0
 8001e66:	b1a8      	cbz	r0, 8001e94 <I2C_RequestMemoryWrite+0x6c>
    return HAL_ERROR;
 8001e68:	2401      	movs	r4, #1
 8001e6a:	e04d      	b.n	8001f08 <I2C_RequestMemoryWrite+0xe0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e6c:	f1b8 0f00 	cmp.w	r8, #0
 8001e70:	d102      	bne.n	8001e78 <I2C_RequestMemoryWrite+0x50>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e72:	696b      	ldr	r3, [r5, #20]
 8001e74:	07d8      	lsls	r0, r3, #31
 8001e76:	d536      	bpl.n	8001ee6 <I2C_RequestMemoryWrite+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e78:	696b      	ldr	r3, [r5, #20]
 8001e7a:	07db      	lsls	r3, r3, #31
 8001e7c:	d4ea      	bmi.n	8001e54 <I2C_RequestMemoryWrite+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e7e:	f7ff fa23 	bl	80012c8 <HAL_GetTick>
 8001e82:	eba0 000b 	sub.w	r0, r0, fp
 8001e86:	4580      	cmp	r8, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e88:	6835      	ldr	r5, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8a:	d2ef      	bcs.n	8001e6c <I2C_RequestMemoryWrite+0x44>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e8c:	696b      	ldr	r3, [r5, #20]
 8001e8e:	07d8      	lsls	r0, r3, #31
 8001e90:	d4f2      	bmi.n	8001e78 <I2C_RequestMemoryWrite+0x50>
 8001e92:	e028      	b.n	8001ee6 <I2C_RequestMemoryWrite+0xbe>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e94:	6833      	ldr	r3, [r6, #0]
 8001e96:	9001      	str	r0, [sp, #4]
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	9201      	str	r2, [sp, #4]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	9201      	str	r2, [sp, #4]
 8001ea0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001ea4:	9a01      	ldr	r2, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ea6:	d14e      	bne.n	8001f46 <I2C_RequestMemoryWrite+0x11e>
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	0610      	lsls	r0, r2, #24
 8001eac:	d430      	bmi.n	8001f10 <I2C_RequestMemoryWrite+0xe8>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	0551      	lsls	r1, r2, #21
 8001eb2:	d5f9      	bpl.n	8001ea8 <I2C_RequestMemoryWrite+0x80>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb4:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eb6:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8001eba:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ebc:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ebe:	6332      	str	r2, [r6, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ec0:	f886 103d 	strb.w	r1, [r6, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec4:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ec8:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001eca:	f042 0204 	orr.w	r2, r2, #4
 8001ece:	6432      	str	r2, [r6, #64]	@ 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ed0:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001ed2:	2100      	movs	r1, #0
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ed4:	2a04      	cmp	r2, #4
          __HAL_UNLOCK(hi2c);
 8001ed6:	f886 103c 	strb.w	r1, [r6, #60]	@ 0x3c
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eda:	d1c5      	bne.n	8001e68 <I2C_RequestMemoryWrite+0x40>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e7c0      	b.n	8001e68 <I2C_RequestMemoryWrite+0x40>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ee6:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ee8:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001eea:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001eec:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ef0:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ef4:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001ef6:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001efa:	f043 0320 	orr.w	r3, r3, #32
 8001efe:	6433      	str	r3, [r6, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f00:	682b      	ldr	r3, [r5, #0]
 8001f02:	05d9      	lsls	r1, r3, #23
 8001f04:	d40e      	bmi.n	8001f24 <I2C_RequestMemoryWrite+0xfc>
    return HAL_TIMEOUT;
 8001f06:	2403      	movs	r4, #3
}
 8001f08:	4620      	mov	r0, r4
 8001f0a:	b003      	add	sp, #12
 8001f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f10:	f1ba 0f01 	cmp.w	sl, #1
 8001f14:	d10a      	bne.n	8001f2c <I2C_RequestMemoryWrite+0x104>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f16:	fa5f f289 	uxtb.w	r2, r9
}
 8001f1a:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f1c:	611a      	str	r2, [r3, #16]
}
 8001f1e:	b003      	add	sp, #12
 8001f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f28:	6433      	str	r3, [r6, #64]	@ 0x40
 8001f2a:	e7ec      	b.n	8001f06 <I2C_RequestMemoryWrite+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f2c:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8001f30:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001f34:	611a      	str	r2, [r3, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f36:	d124      	bne.n	8001f82 <I2C_RequestMemoryWrite+0x15a>
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	0610      	lsls	r0, r2, #24
 8001f3c:	d4eb      	bmi.n	8001f16 <I2C_RequestMemoryWrite+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	0551      	lsls	r1, r2, #21
 8001f42:	d5f9      	bpl.n	8001f38 <I2C_RequestMemoryWrite+0x110>
 8001f44:	e7b6      	b.n	8001eb4 <I2C_RequestMemoryWrite+0x8c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	0612      	lsls	r2, r2, #24
 8001f4a:	d4e1      	bmi.n	8001f10 <I2C_RequestMemoryWrite+0xe8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	0557      	lsls	r7, r2, #21
 8001f50:	d4b0      	bmi.n	8001eb4 <I2C_RequestMemoryWrite+0x8c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7ff f9b9 	bl	80012c8 <HAL_GetTick>
 8001f56:	eba0 030b 	sub.w	r3, r0, fp
 8001f5a:	4598      	cmp	r8, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f5c:	6833      	ldr	r3, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5e:	d302      	bcc.n	8001f66 <I2C_RequestMemoryWrite+0x13e>
 8001f60:	f1b8 0f00 	cmp.w	r8, #0
 8001f64:	d1ef      	bne.n	8001f46 <I2C_RequestMemoryWrite+0x11e>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	0615      	lsls	r5, r2, #24
 8001f6a:	d4ec      	bmi.n	8001f46 <I2C_RequestMemoryWrite+0x11e>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6c:	2200      	movs	r2, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f6e:	2120      	movs	r1, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f70:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f72:	f886 103d 	strb.w	r1, [r6, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f76:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f7a:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	6432      	str	r2, [r6, #64]	@ 0x40
          return HAL_ERROR;
 8001f80:	e7a6      	b.n	8001ed0 <I2C_RequestMemoryWrite+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	0612      	lsls	r2, r2, #24
 8001f86:	d4c6      	bmi.n	8001f16 <I2C_RequestMemoryWrite+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	0557      	lsls	r7, r2, #21
 8001f8c:	d492      	bmi.n	8001eb4 <I2C_RequestMemoryWrite+0x8c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f8e:	f7ff f99b 	bl	80012c8 <HAL_GetTick>
 8001f92:	eba0 030b 	sub.w	r3, r0, fp
 8001f96:	4598      	cmp	r8, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f98:	6833      	ldr	r3, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9a:	d302      	bcc.n	8001fa2 <I2C_RequestMemoryWrite+0x17a>
 8001f9c:	f1b8 0f00 	cmp.w	r8, #0
 8001fa0:	d1ef      	bne.n	8001f82 <I2C_RequestMemoryWrite+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	0615      	lsls	r5, r2, #24
 8001fa6:	d4ec      	bmi.n	8001f82 <I2C_RequestMemoryWrite+0x15a>
 8001fa8:	e7e0      	b.n	8001f6c <I2C_RequestMemoryWrite+0x144>
 8001faa:	bf00      	nop

08001fac <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001fac:	2800      	cmp	r0, #0
 8001fae:	f000 80b8 	beq.w	8002122 <HAL_I2C_Init+0x176>
{
 8001fb2:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fb4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001fb8:	4604      	mov	r4, r0
 8001fba:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8098 	beq.w	80020f4 <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 8001fc4:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc6:	2224      	movs	r2, #36	@ 0x24
 8001fc8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fe2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fe4:	f001 fdca 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fe8:	6865      	ldr	r5, [r4, #4]
 8001fea:	4b4f      	ldr	r3, [pc, #316]	@ (8002128 <HAL_I2C_Init+0x17c>)
 8001fec:	429d      	cmp	r5, r3
 8001fee:	d84f      	bhi.n	8002090 <HAL_I2C_Init+0xe4>
 8001ff0:	4b4e      	ldr	r3, [pc, #312]	@ (800212c <HAL_I2C_Init+0x180>)
 8001ff2:	4298      	cmp	r0, r3
 8001ff4:	d97c      	bls.n	80020f0 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8001ff6:	4b4e      	ldr	r3, [pc, #312]	@ (8002130 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ff8:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8001ffa:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ffe:	1e43      	subs	r3, r0, #1
 8002000:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002004:	6822      	ldr	r2, [r4, #0]
 8002006:	6851      	ldr	r1, [r2, #4]
 8002008:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800200c:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8002010:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002012:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8002014:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002018:	f10c 0c01 	add.w	ip, ip, #1
 800201c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002020:	ea41 010c 	orr.w	r1, r1, ip
 8002024:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002026:	69d1      	ldr	r1, [r2, #28]
 8002028:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800202c:	3301      	adds	r3, #1
 800202e:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8002032:	4203      	tst	r3, r0
 8002034:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002038:	d161      	bne.n	80020fe <HAL_I2C_Init+0x152>
 800203a:	2304      	movs	r3, #4
 800203c:	430b      	orrs	r3, r1
 800203e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002040:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002044:	6811      	ldr	r1, [r2, #0]
 8002046:	4303      	orrs	r3, r0
 8002048:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 800204c:	430b      	orrs	r3, r1
 800204e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002050:	6891      	ldr	r1, [r2, #8]
 8002052:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002056:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 800205a:	4303      	orrs	r3, r0
 800205c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002060:	430b      	orrs	r3, r1
 8002062:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002064:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002068:	68d1      	ldr	r1, [r2, #12]
 800206a:	4303      	orrs	r3, r0
 800206c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002070:	430b      	orrs	r3, r1
 8002072:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002074:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002076:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8002078:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 800207c:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 800207e:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002080:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002082:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002086:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002088:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  return HAL_OK;
 800208c:	4618      	mov	r0, r3
}
 800208e:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002090:	4b28      	ldr	r3, [pc, #160]	@ (8002134 <HAL_I2C_Init+0x188>)
 8002092:	4298      	cmp	r0, r3
 8002094:	d92c      	bls.n	80020f0 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002096:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002098:	4b25      	ldr	r3, [pc, #148]	@ (8002130 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800209a:	4e27      	ldr	r6, [pc, #156]	@ (8002138 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 800209c:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020a0:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020a2:	6850      	ldr	r0, [r2, #4]
 80020a4:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 80020a8:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 80020ac:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80020ae:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020b2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80020b6:	fb00 f101 	mul.w	r1, r0, r1
 80020ba:	fba6 6101 	umull	r6, r1, r6, r1
 80020be:	6a10      	ldr	r0, [r2, #32]
 80020c0:	0989      	lsrs	r1, r1, #6
 80020c2:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 80020c6:	3101      	adds	r1, #1
 80020c8:	4301      	orrs	r1, r0
 80020ca:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020cc:	69d1      	ldr	r1, [r2, #28]
 80020ce:	68a0      	ldr	r0, [r4, #8]
 80020d0:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 80020d4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80020d8:	b9a0      	cbnz	r0, 8002104 <HAL_I2C_Init+0x158>
 80020da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80020de:	fbb3 f3f5 	udiv	r3, r3, r5
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	b1cb      	cbz	r3, 800211e <HAL_I2C_Init+0x172>
 80020ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ee:	e7a5      	b.n	800203c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80020f0:	2001      	movs	r0, #1
}
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80020f4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80020f8:	f7fe ff6a 	bl	8000fd0 <HAL_I2C_MspInit>
 80020fc:	e762      	b.n	8001fc4 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002102:	e79b      	b.n	800203c <HAL_I2C_Init+0x90>
 8002104:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002108:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800210c:	fbb3 f3f5 	udiv	r3, r3, r5
 8002110:	3301      	adds	r3, #1
 8002112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002116:	b113      	cbz	r3, 800211e <HAL_I2C_Init+0x172>
 8002118:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800211c:	e78e      	b.n	800203c <HAL_I2C_Init+0x90>
 800211e:	2301      	movs	r3, #1
 8002120:	e78c      	b.n	800203c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002122:	2001      	movs	r0, #1
}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	000186a0 	.word	0x000186a0
 800212c:	001e847f 	.word	0x001e847f
 8002130:	431bde83 	.word	0x431bde83
 8002134:	003d08ff 	.word	0x003d08ff
 8002138:	10624dd3 	.word	0x10624dd3

0800213c <HAL_I2C_Mem_Write>:
{
 800213c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002140:	4604      	mov	r4, r0
 8002142:	b082      	sub	sp, #8
 8002144:	4699      	mov	r9, r3
 8002146:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 800214a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800214c:	460f      	mov	r7, r1
 800214e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002150:	f7ff f8ba 	bl	80012c8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002154:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002158:	2b20      	cmp	r3, #32
 800215a:	d004      	beq.n	8002166 <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 800215c:	2702      	movs	r7, #2
}
 800215e:	4638      	mov	r0, r7
 8002160:	b002      	add	sp, #8
 8002162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002166:	4605      	mov	r5, r0
 8002168:	6820      	ldr	r0, [r4, #0]
 800216a:	6983      	ldr	r3, [r0, #24]
 800216c:	079b      	lsls	r3, r3, #30
 800216e:	d517      	bpl.n	80021a0 <HAL_I2C_Mem_Write+0x64>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002170:	f7ff f8aa 	bl	80012c8 <HAL_GetTick>
 8002174:	1b40      	subs	r0, r0, r5
 8002176:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002178:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217a:	d9f6      	bls.n	800216a <HAL_I2C_Mem_Write+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800217c:	6983      	ldr	r3, [r0, #24]
 800217e:	43db      	mvns	r3, r3
 8002180:	f013 0302 	ands.w	r3, r3, #2
 8002184:	d1f1      	bne.n	800216a <HAL_I2C_Mem_Write+0x2e>
          hi2c->State             = HAL_I2C_STATE_READY;
 8002186:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002188:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800218a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800218e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002192:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002194:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002198:	f042 0220 	orr.w	r2, r2, #32
 800219c:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 800219e:	e7dd      	b.n	800215c <HAL_I2C_Mem_Write+0x20>
    __HAL_LOCK(hi2c);
 80021a0:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d0d9      	beq.n	800215c <HAL_I2C_Mem_Write+0x20>
 80021a8:	2301      	movs	r3, #1
 80021aa:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ae:	6803      	ldr	r3, [r0, #0]
 80021b0:	07d9      	lsls	r1, r3, #31
 80021b2:	d572      	bpl.n	800229a <HAL_I2C_Mem_Write+0x15e>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021b4:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021b6:	6807      	ldr	r7, [r0, #0]
 80021b8:	f427 6700 	bic.w	r7, r7, #2048	@ 0x800
 80021bc:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 80021be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80021c0:	6260      	str	r0, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021c2:	2021      	movs	r0, #33	@ 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021c4:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021c8:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021cc:	2040      	movs	r0, #64	@ 0x40
 80021ce:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d2:	2000      	movs	r0, #0
 80021d4:	6420      	str	r0, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 80021d6:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021da:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 80021dc:	8520      	strh	r0, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021de:	484f      	ldr	r0, [pc, #316]	@ (800231c <HAL_I2C_Mem_Write+0x1e0>)
 80021e0:	62e0      	str	r0, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021e2:	464b      	mov	r3, r9
 80021e4:	4642      	mov	r2, r8
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff fe1e 	bl	8001e28 <I2C_RequestMemoryWrite>
 80021ec:	4607      	mov	r7, r0
 80021ee:	bb18      	cbnz	r0, 8002238 <HAL_I2C_Mem_Write+0xfc>
    while (hi2c->XferSize > 0U)
 80021f0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021f2:	6823      	ldr	r3, [r4, #0]
    while (hi2c->XferSize > 0U)
 80021f4:	2a00      	cmp	r2, #0
 80021f6:	d036      	beq.n	8002266 <HAL_I2C_Mem_Write+0x12a>
 80021f8:	1c72      	adds	r2, r6, #1
 80021fa:	d156      	bne.n	80022aa <HAL_I2C_Mem_Write+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	0611      	lsls	r1, r2, #24
 8002200:	d41c      	bmi.n	800223c <HAL_I2C_Mem_Write+0x100>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	0552      	lsls	r2, r2, #21
 8002206:	d5f9      	bpl.n	80021fc <HAL_I2C_Mem_Write+0xc0>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002208:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800220a:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800220e:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002210:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002212:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002214:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002218:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800221c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800221e:	f042 0204 	orr.w	r2, r2, #4
 8002222:	6422      	str	r2, [r4, #64]	@ 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002224:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002226:	2100      	movs	r1, #0
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002228:	2a04      	cmp	r2, #4
          __HAL_UNLOCK(hi2c);
 800222a:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222e:	d103      	bne.n	8002238 <HAL_I2C_Mem_Write+0xfc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002236:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8002238:	2701      	movs	r7, #1
 800223a:	e790      	b.n	800215e <HAL_I2C_Mem_Write+0x22>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800223c:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002240:	f8b4 e028 	ldrh.w	lr, [r4, #40]	@ 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002244:	4661      	mov	r1, ip
      hi2c->XferSize--;
 8002246:	f10e 30ff 	add.w	r0, lr, #4294967295	@ 0xffffffff
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800224a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800224e:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8002250:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8002252:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002254:	3a01      	subs	r2, #1
 8002256:	b292      	uxth	r2, r2
 8002258:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800225a:	b282      	uxth	r2, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800225c:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 800225e:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002260:	0741      	lsls	r1, r0, #29
 8002262:	d517      	bpl.n	8002294 <HAL_I2C_Mem_Write+0x158>
 8002264:	b942      	cbnz	r2, 8002278 <HAL_I2C_Mem_Write+0x13c>
 8002266:	1c70      	adds	r0, r6, #1
 8002268:	d13b      	bne.n	80022e2 <HAL_I2C_Mem_Write+0x1a6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	0750      	lsls	r0, r2, #29
 800226e:	d42b      	bmi.n	80022c8 <HAL_I2C_Mem_Write+0x18c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	0551      	lsls	r1, r2, #21
 8002274:	d5f9      	bpl.n	800226a <HAL_I2C_Mem_Write+0x12e>
 8002276:	e7c7      	b.n	8002208 <HAL_I2C_Mem_Write+0xcc>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002278:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800227c:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 800227e:	f10c 0102 	add.w	r1, ip, #2
 8002282:	6261      	str	r1, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8002284:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8002286:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 800228a:	3901      	subs	r1, #1
        hi2c->XferSize--;
 800228c:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 800228e:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 8002290:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002292:	8561      	strh	r1, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002294:	2a00      	cmp	r2, #0
 8002296:	d1af      	bne.n	80021f8 <HAL_I2C_Mem_Write+0xbc>
 8002298:	e7e5      	b.n	8002266 <HAL_I2C_Mem_Write+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 800229a:	6803      	ldr	r3, [r0, #0]
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6003      	str	r3, [r0, #0]
 80022a2:	e787      	b.n	80021b4 <HAL_I2C_Mem_Write+0x78>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	0610      	lsls	r0, r2, #24
 80022a8:	d52c      	bpl.n	8002304 <HAL_I2C_Mem_Write+0x1c8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	0610      	lsls	r0, r2, #24
 80022ae:	d4c5      	bmi.n	800223c <HAL_I2C_Mem_Write+0x100>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	0552      	lsls	r2, r2, #21
 80022b4:	d4a8      	bmi.n	8002208 <HAL_I2C_Mem_Write+0xcc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b6:	f7ff f807 	bl	80012c8 <HAL_GetTick>
 80022ba:	1b40      	subs	r0, r0, r5
 80022bc:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022be:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c0:	d3f0      	bcc.n	80022a4 <HAL_I2C_Mem_Write+0x168>
 80022c2:	2e00      	cmp	r6, #0
 80022c4:	d1f1      	bne.n	80022aa <HAL_I2C_Mem_Write+0x16e>
 80022c6:	e7ed      	b.n	80022a4 <HAL_I2C_Mem_Write+0x168>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c8:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ca:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d2:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80022d4:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80022d8:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022dc:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
    return HAL_OK;
 80022e0:	e73d      	b.n	800215e <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	0752      	lsls	r2, r2, #29
 80022e6:	d4ef      	bmi.n	80022c8 <HAL_I2C_Mem_Write+0x18c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	0551      	lsls	r1, r2, #21
 80022ec:	d48c      	bmi.n	8002208 <HAL_I2C_Mem_Write+0xcc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ee:	f7fe ffeb 	bl	80012c8 <HAL_GetTick>
 80022f2:	1b43      	subs	r3, r0, r5
 80022f4:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80022f6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f8:	d301      	bcc.n	80022fe <HAL_I2C_Mem_Write+0x1c2>
 80022fa:	2e00      	cmp	r6, #0
 80022fc:	d1f1      	bne.n	80022e2 <HAL_I2C_Mem_Write+0x1a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	0752      	lsls	r2, r2, #29
 8002302:	d4ee      	bmi.n	80022e2 <HAL_I2C_Mem_Write+0x1a6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002304:	2200      	movs	r2, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8002306:	2120      	movs	r1, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002308:	6322      	str	r2, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800230a:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800230e:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002312:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002314:	430a      	orrs	r2, r1
 8002316:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8002318:	e784      	b.n	8002224 <HAL_I2C_Mem_Write+0xe8>
 800231a:	bf00      	nop
 800231c:	ffff0000 	.word	0xffff0000

08002320 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002320:	b530      	push	{r4, r5, lr}
 8002322:	b083      	sub	sp, #12
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002324:	b308      	cbz	r0, 800236a <HAL_PCD_Init+0x4a>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002326:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
  USBx = hpcd->Instance;
 800232a:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800232c:	4604      	mov	r4, r0
 800232e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 81ef 	beq.w	8002716 <HAL_PCD_Init+0x3f6>
 8002338:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800233a:	2303      	movs	r3, #3

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800233c:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002340:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  {
    hpcd->Init.dma_enable = 0U;
 8002344:	bf04      	itt	eq
 8002346:	2300      	moveq	r3, #0
 8002348:	71a3      	strbeq	r3, [r4, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800234a:	f002 f9c3 	bl	80046d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800234e:	7c23      	ldrb	r3, [r4, #16]
 8002350:	f88d 3000 	strb.w	r3, [sp]
 8002354:	1d25      	adds	r5, r4, #4
 8002356:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800235a:	6820      	ldr	r0, [r4, #0]
 800235c:	f002 f8b4 	bl	80044c8 <USB_CoreInit>
 8002360:	4601      	mov	r1, r0
 8002362:	b130      	cbz	r0, 8002372 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002364:	2302      	movs	r3, #2
 8002366:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800236a:	2501      	movs	r5, #1
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800236c:	4628      	mov	r0, r5
 800236e:	b003      	add	sp, #12
 8002370:	bd30      	pop	{r4, r5, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002372:	6820      	ldr	r0, [r4, #0]
 8002374:	f002 f9b6 	bl	80046e4 <USB_SetCurrentMode>
 8002378:	2800      	cmp	r0, #0
 800237a:	d1f3      	bne.n	8002364 <HAL_PCD_Init+0x44>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237c:	7922      	ldrb	r2, [r4, #4]
 800237e:	2a00      	cmp	r2, #0
 8002380:	f000 81b3 	beq.w	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->IN_ep[i].num = i;
 8002384:	f44f 7380 	mov.w	r3, #256	@ 0x100
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	2a01      	cmp	r2, #1
    hpcd->IN_ep[i].xfer_buff = 0U;
 800238a:	e9c4 0007 	strd	r0, r0, [r4, #28]
    hpcd->IN_ep[i].num = i;
 800238e:	82a3      	strh	r3, [r4, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002390:	85e0      	strh	r0, [r4, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002392:	7620      	strb	r0, [r4, #24]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002394:	6260      	str	r0, [r4, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002396:	f000 81c4 	beq.w	8002722 <HAL_PCD_Init+0x402>
    hpcd->IN_ep[i].num = i;
 800239a:	f240 1301 	movw	r3, #257	@ 0x101
 800239e:	8723      	strh	r3, [r4, #56]	@ 0x38
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a0:	2a02      	cmp	r2, #2
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023a2:	f04f 0301 	mov.w	r3, #1
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023a6:	e9c4 0010 	strd	r0, r0, [r4, #64]	@ 0x40
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023aa:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023ae:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80023b2:	64a0      	str	r0, [r4, #72]	@ 0x48
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b4:	f000 80e2 	beq.w	800257c <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 80023b8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80023bc:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c0:	2a03      	cmp	r2, #3
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023c2:	f04f 0302 	mov.w	r3, #2
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023c6:	e9c4 0019 	strd	r0, r0, [r4, #100]	@ 0x64
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023ca:	f8a4 3076 	strh.w	r3, [r4, #118]	@ 0x76
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023ce:	f884 0060 	strb.w	r0, [r4, #96]	@ 0x60
    hpcd->IN_ep[i].xfer_len = 0U;
 80023d2:	66e0      	str	r0, [r4, #108]	@ 0x6c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d4:	f000 80d2 	beq.w	800257c <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 80023d8:	f240 1303 	movw	r3, #259	@ 0x103
 80023dc:	f8a4 3080 	strh.w	r3, [r4, #128]	@ 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e0:	2a04      	cmp	r2, #4
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023e2:	f04f 0303 	mov.w	r3, #3
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023e6:	e9c4 0022 	strd	r0, r0, [r4, #136]	@ 0x88
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023ea:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023ee:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
    hpcd->IN_ep[i].xfer_len = 0U;
 80023f2:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f6:	f000 80c1 	beq.w	800257c <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 80023fa:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80023fe:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002402:	2a05      	cmp	r2, #5
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002404:	f04f 0304 	mov.w	r3, #4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002408:	e9c4 002b 	strd	r0, r0, [r4, #172]	@ 0xac
    hpcd->IN_ep[i].tx_fifo_num = i;
 800240c:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002410:	f884 00a8 	strb.w	r0, [r4, #168]	@ 0xa8
    hpcd->IN_ep[i].xfer_len = 0U;
 8002414:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002418:	f000 80b0 	beq.w	800257c <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 800241c:	f240 1305 	movw	r3, #261	@ 0x105
 8002420:	f8a4 30c8 	strh.w	r3, [r4, #200]	@ 0xc8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002424:	2a06      	cmp	r2, #6
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002426:	f04f 0305 	mov.w	r3, #5
    hpcd->IN_ep[i].xfer_buff = 0U;
 800242a:	e9c4 0034 	strd	r0, r0, [r4, #208]	@ 0xd0
    hpcd->IN_ep[i].tx_fifo_num = i;
 800242e:	f8a4 30e2 	strh.w	r3, [r4, #226]	@ 0xe2
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002432:	f884 00cc 	strb.w	r0, [r4, #204]	@ 0xcc
    hpcd->IN_ep[i].xfer_len = 0U;
 8002436:	f8c4 00d8 	str.w	r0, [r4, #216]	@ 0xd8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243a:	f000 809f 	beq.w	800257c <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 800243e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002442:	f8a4 30ec 	strh.w	r3, [r4, #236]	@ 0xec
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002446:	2a07      	cmp	r2, #7
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002448:	f04f 0306 	mov.w	r3, #6
    hpcd->IN_ep[i].xfer_buff = 0U;
 800244c:	e9c4 003d 	strd	r0, r0, [r4, #244]	@ 0xf4
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002450:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002454:	f884 00f0 	strb.w	r0, [r4, #240]	@ 0xf0
    hpcd->IN_ep[i].xfer_len = 0U;
 8002458:	f8c4 00fc 	str.w	r0, [r4, #252]	@ 0xfc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245c:	f000 808e 	beq.w	800257c <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8002460:	f240 1107 	movw	r1, #263	@ 0x107
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002464:	2300      	movs	r3, #0
    hpcd->IN_ep[i].num = i;
 8002466:	f8a4 1110 	strh.w	r1, [r4, #272]	@ 0x110
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246a:	2a08      	cmp	r2, #8
    hpcd->IN_ep[i].tx_fifo_num = i;
 800246c:	f04f 0107 	mov.w	r1, #7
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002470:	e9c4 3346 	strd	r3, r3, [r4, #280]	@ 0x118
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002474:	f8a4 112a 	strh.w	r1, [r4, #298]	@ 0x12a
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002478:	f884 3114 	strb.w	r3, [r4, #276]	@ 0x114
    hpcd->IN_ep[i].xfer_len = 0U;
 800247c:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002480:	d07c      	beq.n	800257c <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8002482:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8002486:	f8a4 1134 	strh.w	r1, [r4, #308]	@ 0x134
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248a:	2a09      	cmp	r2, #9
    hpcd->IN_ep[i].tx_fifo_num = i;
 800248c:	f04f 0108 	mov.w	r1, #8
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002490:	e9c4 334f 	strd	r3, r3, [r4, #316]	@ 0x13c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002494:	f8a4 114e 	strh.w	r1, [r4, #334]	@ 0x14e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002498:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
    hpcd->IN_ep[i].xfer_len = 0U;
 800249c:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a0:	d06c      	beq.n	800257c <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 80024a2:	f240 1109 	movw	r1, #265	@ 0x109
 80024a6:	f8a4 1158 	strh.w	r1, [r4, #344]	@ 0x158
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024aa:	2a0a      	cmp	r2, #10
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024ac:	f04f 0109 	mov.w	r1, #9
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024b0:	e9c4 3358 	strd	r3, r3, [r4, #352]	@ 0x160
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024b4:	f8a4 1172 	strh.w	r1, [r4, #370]	@ 0x172
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024b8:	f884 315c 	strb.w	r3, [r4, #348]	@ 0x15c
    hpcd->IN_ep[i].xfer_len = 0U;
 80024bc:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c0:	d05c      	beq.n	800257c <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 80024c2:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80024c6:	f8a4 117c 	strh.w	r1, [r4, #380]	@ 0x17c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ca:	2a0b      	cmp	r2, #11
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024cc:	f04f 010a 	mov.w	r1, #10
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024d0:	e9c4 3361 	strd	r3, r3, [r4, #388]	@ 0x184
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024d4:	f8a4 1196 	strh.w	r1, [r4, #406]	@ 0x196
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024d8:	f884 3180 	strb.w	r3, [r4, #384]	@ 0x180
    hpcd->IN_ep[i].xfer_len = 0U;
 80024dc:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e0:	d04c      	beq.n	800257c <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 80024e2:	f240 110b 	movw	r1, #267	@ 0x10b
 80024e6:	f8a4 11a0 	strh.w	r1, [r4, #416]	@ 0x1a0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ea:	2a0c      	cmp	r2, #12
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024ec:	f04f 010b 	mov.w	r1, #11
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024f0:	e9c4 336a 	strd	r3, r3, [r4, #424]	@ 0x1a8
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024f4:	f8a4 11ba 	strh.w	r1, [r4, #442]	@ 0x1ba
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024f8:	f884 31a4 	strb.w	r3, [r4, #420]	@ 0x1a4
    hpcd->IN_ep[i].xfer_len = 0U;
 80024fc:	f8c4 31b0 	str.w	r3, [r4, #432]	@ 0x1b0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002500:	d03c      	beq.n	800257c <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8002502:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002506:	f8a4 11c4 	strh.w	r1, [r4, #452]	@ 0x1c4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250a:	2a0d      	cmp	r2, #13
    hpcd->IN_ep[i].tx_fifo_num = i;
 800250c:	f04f 010c 	mov.w	r1, #12
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002510:	e9c4 3373 	strd	r3, r3, [r4, #460]	@ 0x1cc
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002514:	f8a4 11de 	strh.w	r1, [r4, #478]	@ 0x1de
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002518:	f884 31c8 	strb.w	r3, [r4, #456]	@ 0x1c8
    hpcd->IN_ep[i].xfer_len = 0U;
 800251c:	f8c4 31d4 	str.w	r3, [r4, #468]	@ 0x1d4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002520:	d02c      	beq.n	800257c <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8002522:	f240 110d 	movw	r1, #269	@ 0x10d
 8002526:	f8a4 11e8 	strh.w	r1, [r4, #488]	@ 0x1e8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252a:	2a0e      	cmp	r2, #14
    hpcd->IN_ep[i].tx_fifo_num = i;
 800252c:	f04f 010d 	mov.w	r1, #13
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002530:	e9c4 337c 	strd	r3, r3, [r4, #496]	@ 0x1f0
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002534:	f8a4 1202 	strh.w	r1, [r4, #514]	@ 0x202
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002538:	f884 31ec 	strb.w	r3, [r4, #492]	@ 0x1ec
    hpcd->IN_ep[i].xfer_len = 0U;
 800253c:	f8c4 31f8 	str.w	r3, [r4, #504]	@ 0x1f8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002540:	d01c      	beq.n	800257c <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8002542:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002546:	f8a4 120c 	strh.w	r1, [r4, #524]	@ 0x20c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254a:	2a0f      	cmp	r2, #15
    hpcd->IN_ep[i].tx_fifo_num = i;
 800254c:	f04f 010e 	mov.w	r1, #14
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002550:	e9c4 3385 	strd	r3, r3, [r4, #532]	@ 0x214
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002554:	f8a4 1226 	strh.w	r1, [r4, #550]	@ 0x226
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002558:	f884 3210 	strb.w	r3, [r4, #528]	@ 0x210
    hpcd->IN_ep[i].xfer_len = 0U;
 800255c:	f8c4 321c 	str.w	r3, [r4, #540]	@ 0x21c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002560:	d00c      	beq.n	800257c <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8002562:	f240 110f 	movw	r1, #271	@ 0x10f
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002566:	e9c4 338e 	strd	r3, r3, [r4, #568]	@ 0x238
    hpcd->IN_ep[i].num = i;
 800256a:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
    hpcd->IN_ep[i].tx_fifo_num = i;
 800256e:	210f      	movs	r1, #15
 8002570:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002574:	f884 3234 	strb.w	r3, [r4, #564]	@ 0x234
    hpcd->IN_ep[i].xfer_len = 0U;
 8002578:	f8c4 3240 	str.w	r3, [r4, #576]	@ 0x240
    hpcd->OUT_ep[i].num = i;
 800257c:	2300      	movs	r3, #0
 800257e:	2101      	movs	r1, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002580:	2a02      	cmp	r2, #2
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002582:	e9c4 3397 	strd	r3, r3, [r4, #604]	@ 0x25c
 8002586:	e9c4 33a0 	strd	r3, r3, [r4, #640]	@ 0x280
    hpcd->OUT_ep[i].num = i;
 800258a:	f8a4 3254 	strh.w	r3, [r4, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800258e:	f884 3258 	strb.w	r3, [r4, #600]	@ 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002592:	f8c4 3264 	str.w	r3, [r4, #612]	@ 0x264
    hpcd->OUT_ep[i].num = i;
 8002596:	f8a4 1278 	strh.w	r1, [r4, #632]	@ 0x278
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800259a:	f884 327c 	strb.w	r3, [r4, #636]	@ 0x27c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800259e:	f8c4 3288 	str.w	r3, [r4, #648]	@ 0x288
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a2:	f000 80a2 	beq.w	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 80025a6:	2102      	movs	r1, #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a8:	2a03      	cmp	r2, #3
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025aa:	e9c4 33a9 	strd	r3, r3, [r4, #676]	@ 0x2a4
    hpcd->OUT_ep[i].num = i;
 80025ae:	f8a4 129c 	strh.w	r1, [r4, #668]	@ 0x29c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025b2:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025b6:	f8c4 32ac 	str.w	r3, [r4, #684]	@ 0x2ac
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ba:	f000 8096 	beq.w	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 80025be:	2103      	movs	r1, #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c0:	2a04      	cmp	r2, #4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025c2:	e9c4 33b2 	strd	r3, r3, [r4, #712]	@ 0x2c8
    hpcd->OUT_ep[i].num = i;
 80025c6:	f8a4 12c0 	strh.w	r1, [r4, #704]	@ 0x2c0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025ca:	f884 32c4 	strb.w	r3, [r4, #708]	@ 0x2c4
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025ce:	f8c4 32d0 	str.w	r3, [r4, #720]	@ 0x2d0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d2:	f000 808a 	beq.w	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 80025d6:	2104      	movs	r1, #4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d8:	2a05      	cmp	r2, #5
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025da:	e9c4 33bb 	strd	r3, r3, [r4, #748]	@ 0x2ec
    hpcd->OUT_ep[i].num = i;
 80025de:	f8a4 12e4 	strh.w	r1, [r4, #740]	@ 0x2e4
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025e2:	f884 32e8 	strb.w	r3, [r4, #744]	@ 0x2e8
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025e6:	f8c4 32f4 	str.w	r3, [r4, #756]	@ 0x2f4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ea:	d07e      	beq.n	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 80025ec:	2105      	movs	r1, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ee:	2a06      	cmp	r2, #6
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025f0:	e9c4 33c4 	strd	r3, r3, [r4, #784]	@ 0x310
    hpcd->OUT_ep[i].num = i;
 80025f4:	f8a4 1308 	strh.w	r1, [r4, #776]	@ 0x308
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025f8:	f884 330c 	strb.w	r3, [r4, #780]	@ 0x30c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025fc:	f8c4 3318 	str.w	r3, [r4, #792]	@ 0x318
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002600:	d073      	beq.n	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8002602:	2106      	movs	r1, #6
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002604:	2a07      	cmp	r2, #7
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002606:	e9c4 33cd 	strd	r3, r3, [r4, #820]	@ 0x334
    hpcd->OUT_ep[i].num = i;
 800260a:	f8a4 132c 	strh.w	r1, [r4, #812]	@ 0x32c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800260e:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002612:	f8c4 333c 	str.w	r3, [r4, #828]	@ 0x33c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002616:	d068      	beq.n	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8002618:	2107      	movs	r1, #7
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261a:	2a08      	cmp	r2, #8
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800261c:	e9c4 33d6 	strd	r3, r3, [r4, #856]	@ 0x358
    hpcd->OUT_ep[i].num = i;
 8002620:	f8a4 1350 	strh.w	r1, [r4, #848]	@ 0x350
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002624:	f884 3354 	strb.w	r3, [r4, #852]	@ 0x354
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002628:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262c:	d05d      	beq.n	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 800262e:	2108      	movs	r1, #8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002630:	2a09      	cmp	r2, #9
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002632:	e9c4 33df 	strd	r3, r3, [r4, #892]	@ 0x37c
    hpcd->OUT_ep[i].num = i;
 8002636:	f8a4 1374 	strh.w	r1, [r4, #884]	@ 0x374
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800263a:	f884 3378 	strb.w	r3, [r4, #888]	@ 0x378
    hpcd->OUT_ep[i].xfer_len = 0U;
 800263e:	f8c4 3384 	str.w	r3, [r4, #900]	@ 0x384
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002642:	d052      	beq.n	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8002644:	2109      	movs	r1, #9
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002646:	2a0a      	cmp	r2, #10
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002648:	e9c4 33e8 	strd	r3, r3, [r4, #928]	@ 0x3a0
    hpcd->OUT_ep[i].num = i;
 800264c:	f8a4 1398 	strh.w	r1, [r4, #920]	@ 0x398
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002650:	f884 339c 	strb.w	r3, [r4, #924]	@ 0x39c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002654:	f8c4 33a8 	str.w	r3, [r4, #936]	@ 0x3a8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002658:	d047      	beq.n	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 800265a:	210a      	movs	r1, #10
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265c:	2a0b      	cmp	r2, #11
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800265e:	e9c4 33f1 	strd	r3, r3, [r4, #964]	@ 0x3c4
    hpcd->OUT_ep[i].num = i;
 8002662:	f8a4 13bc 	strh.w	r1, [r4, #956]	@ 0x3bc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002666:	f884 33c0 	strb.w	r3, [r4, #960]	@ 0x3c0
    hpcd->OUT_ep[i].xfer_len = 0U;
 800266a:	f8c4 33cc 	str.w	r3, [r4, #972]	@ 0x3cc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800266e:	d03c      	beq.n	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8002670:	210b      	movs	r1, #11
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002672:	2a0c      	cmp	r2, #12
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002674:	e9c4 33fa 	strd	r3, r3, [r4, #1000]	@ 0x3e8
    hpcd->OUT_ep[i].num = i;
 8002678:	f8a4 13e0 	strh.w	r1, [r4, #992]	@ 0x3e0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800267c:	f884 33e4 	strb.w	r3, [r4, #996]	@ 0x3e4
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002680:	f8c4 33f0 	str.w	r3, [r4, #1008]	@ 0x3f0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002684:	d031      	beq.n	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8002686:	210c      	movs	r1, #12
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002688:	2a0d      	cmp	r2, #13
    hpcd->OUT_ep[i].num = i;
 800268a:	f8a4 1404 	strh.w	r1, [r4, #1028]	@ 0x404
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800268e:	f884 3408 	strb.w	r3, [r4, #1032]	@ 0x408
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002692:	f8c4 340c 	str.w	r3, [r4, #1036]	@ 0x40c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002696:	f8c4 3410 	str.w	r3, [r4, #1040]	@ 0x410
    hpcd->OUT_ep[i].xfer_len = 0U;
 800269a:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269e:	d024      	beq.n	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 80026a0:	210d      	movs	r1, #13
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a2:	2a0e      	cmp	r2, #14
    hpcd->OUT_ep[i].num = i;
 80026a4:	f8a4 1428 	strh.w	r1, [r4, #1064]	@ 0x428
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026a8:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026ac:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026b0:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026b4:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b8:	d017      	beq.n	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 80026ba:	210e      	movs	r1, #14
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026bc:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[i].num = i;
 80026be:	f8a4 144c 	strh.w	r1, [r4, #1100]	@ 0x44c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026c2:	f884 3450 	strb.w	r3, [r4, #1104]	@ 0x450
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026c6:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026ca:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026ce:	f8c4 345c 	str.w	r3, [r4, #1116]	@ 0x45c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d2:	d00a      	beq.n	80026ea <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 80026d4:	220f      	movs	r2, #15
 80026d6:	f8a4 2470 	strh.w	r2, [r4, #1136]	@ 0x470
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026da:	f884 3474 	strb.w	r3, [r4, #1140]	@ 0x474
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026de:	f8c4 3478 	str.w	r3, [r4, #1144]	@ 0x478
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026e2:	f8c4 347c 	str.w	r3, [r4, #1148]	@ 0x47c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026e6:	f8c4 3480 	str.w	r3, [r4, #1152]	@ 0x480
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ea:	7c20      	ldrb	r0, [r4, #16]
 80026ec:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80026f0:	f88d 0000 	strb.w	r0, [sp]
 80026f4:	6820      	ldr	r0, [r4, #0]
 80026f6:	f002 f82d 	bl	8004754 <USB_DevInit>
 80026fa:	4605      	mov	r5, r0
 80026fc:	2800      	cmp	r0, #0
 80026fe:	f47f ae31 	bne.w	8002364 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 8002702:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8002704:	7460      	strb	r0, [r4, #17]
  (void)USB_DevDisconnect(hpcd->Instance);
 8002706:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8002708:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 800270c:	f002 fc50 	bl	8004fb0 <USB_DevDisconnect>
}
 8002710:	4628      	mov	r0, r5
 8002712:	b003      	add	sp, #12
 8002714:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002716:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 800271a:	f003 ff3d 	bl	8006598 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800271e:	6820      	ldr	r0, [r4, #0]
 8002720:	e60b      	b.n	800233a <HAL_PCD_Init+0x1a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002722:	e9c4 0097 	strd	r0, r0, [r4, #604]	@ 0x25c
    hpcd->OUT_ep[i].num = i;
 8002726:	f8a4 0254 	strh.w	r0, [r4, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800272a:	f884 0258 	strb.w	r0, [r4, #600]	@ 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 800272e:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002732:	e7da      	b.n	80026ea <HAL_PCD_Init+0x3ca>

08002734 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002734:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8002736:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 800273a:	2b01      	cmp	r3, #1
{
 800273c:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800273e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002740:	d016      	beq.n	8002770 <HAL_PCD_Start+0x3c>
 8002742:	2301      	movs	r3, #1
 8002744:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002748:	68c3      	ldr	r3, [r0, #12]
 800274a:	065b      	lsls	r3, r3, #25
 800274c:	d502      	bpl.n	8002754 <HAL_PCD_Start+0x20>
 800274e:	7b63      	ldrb	r3, [r4, #13]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d008      	beq.n	8002766 <HAL_PCD_Start+0x32>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8002754:	f001 ffb6 	bl	80046c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002758:	6820      	ldr	r0, [r4, #0]
 800275a:	f002 fc19 	bl	8004f90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800275e:	2000      	movs	r0, #0
 8002760:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8002764:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002766:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276c:	6383      	str	r3, [r0, #56]	@ 0x38
 800276e:	e7f1      	b.n	8002754 <HAL_PCD_Start+0x20>
  __HAL_LOCK(hpcd);
 8002770:	2002      	movs	r0, #2
}
 8002772:	bd10      	pop	{r4, pc}

08002774 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002778:	6806      	ldr	r6, [r0, #0]
{
 800277a:	b089      	sub	sp, #36	@ 0x24
 800277c:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800277e:	4630      	mov	r0, r6
 8002780:	f002 fc54 	bl	800502c <USB_GetMode>
 8002784:	b110      	cbz	r0, 800278c <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 8002786:	b009      	add	sp, #36	@ 0x24
 8002788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800278c:	4605      	mov	r5, r0
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	f002 fc1e 	bl	8004fd0 <USB_ReadInterrupts>
 8002794:	2800      	cmp	r0, #0
 8002796:	d0f6      	beq.n	8002786 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002798:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800279c:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800279e:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80027a2:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027a6:	f002 fc13 	bl	8004fd0 <USB_ReadInterrupts>
 80027aa:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027ae:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027b0:	f506 6300 	add.w	r3, r6, #2048	@ 0x800
 80027b4:	9303      	str	r3, [sp, #12]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027b6:	bf1e      	ittt	ne
 80027b8:	6943      	ldrne	r3, [r0, #20]
 80027ba:	f003 0302 	andne.w	r3, r3, #2
 80027be:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027c0:	f002 fc06 	bl	8004fd0 <USB_ReadInterrupts>
 80027c4:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027c8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027ca:	d012      	beq.n	80027f2 <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027cc:	6983      	ldr	r3, [r0, #24]
 80027ce:	f023 0310 	bic.w	r3, r3, #16
 80027d2:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 80027d4:	6a37      	ldr	r7, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027d6:	f3c7 4343 	ubfx	r3, r7, #17, #4
 80027da:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027dc:	f007 080f 	and.w	r8, r7, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027e0:	f000 83b6 	beq.w	8002f50 <HAL_PCD_IRQHandler+0x7dc>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80027e4:	2b06      	cmp	r3, #6
 80027e6:	f000 8356 	beq.w	8002e96 <HAL_PCD_IRQHandler+0x722>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027ea:	6983      	ldr	r3, [r0, #24]
 80027ec:	f043 0310 	orr.w	r3, r3, #16
 80027f0:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027f2:	f002 fbed 	bl	8004fd0 <USB_ReadInterrupts>
 80027f6:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027fa:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027fc:	f040 82b1 	bne.w	8002d62 <HAL_PCD_IRQHandler+0x5ee>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002800:	f002 fbe6 	bl	8004fd0 <USB_ReadInterrupts>
 8002804:	0347      	lsls	r7, r0, #13
 8002806:	f100 8210 	bmi.w	8002c2a <HAL_PCD_IRQHandler+0x4b6>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800280a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800280c:	f002 fbe0 	bl	8004fd0 <USB_ReadInterrupts>
 8002810:	2800      	cmp	r0, #0
 8002812:	f2c0 8182 	blt.w	8002b1a <HAL_PCD_IRQHandler+0x3a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002816:	6820      	ldr	r0, [r4, #0]
 8002818:	f002 fbda 	bl	8004fd0 <USB_ReadInterrupts>
 800281c:	0503      	lsls	r3, r0, #20
 800281e:	f100 813d 	bmi.w	8002a9c <HAL_PCD_IRQHandler+0x328>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002822:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002824:	f002 fbd4 	bl	8004fd0 <USB_ReadInterrupts>
 8002828:	04c0      	lsls	r0, r0, #19
 800282a:	f100 81a0 	bmi.w	8002b6e <HAL_PCD_IRQHandler+0x3fa>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800282e:	6820      	ldr	r0, [r4, #0]
 8002830:	f002 fbce 	bl	8004fd0 <USB_ReadInterrupts>
 8002834:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8002838:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800283a:	f040 8181 	bne.w	8002b40 <HAL_PCD_IRQHandler+0x3cc>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800283e:	f002 fbc7 	bl	8004fd0 <USB_ReadInterrupts>
 8002842:	0701      	lsls	r1, r0, #28
 8002844:	f100 81e8 	bmi.w	8002c18 <HAL_PCD_IRQHandler+0x4a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002848:	6820      	ldr	r0, [r4, #0]
 800284a:	f002 fbc1 	bl	8004fd0 <USB_ReadInterrupts>
 800284e:	0602      	lsls	r2, r0, #24
 8002850:	d571      	bpl.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002852:	69b3      	ldr	r3, [r6, #24]
 8002854:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002858:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800285a:	7923      	ldrb	r3, [r4, #4]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d96a      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002860:	f894 227b 	ldrb.w	r2, [r4, #635]	@ 0x27b
 8002864:	2a01      	cmp	r2, #1
 8002866:	f000 83e0 	beq.w	800302a <HAL_PCD_IRQHandler+0x8b6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800286a:	2b02      	cmp	r3, #2
 800286c:	d963      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800286e:	f894 229f 	ldrb.w	r2, [r4, #671]	@ 0x29f
 8002872:	2a01      	cmp	r2, #1
 8002874:	f000 83f4 	beq.w	8003060 <HAL_PCD_IRQHandler+0x8ec>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002878:	2b03      	cmp	r3, #3
 800287a:	d95c      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800287c:	f894 22c3 	ldrb.w	r2, [r4, #707]	@ 0x2c3
 8002880:	2a01      	cmp	r2, #1
 8002882:	f000 8301 	beq.w	8002e88 <HAL_PCD_IRQHandler+0x714>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002886:	2b04      	cmp	r3, #4
 8002888:	d955      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800288a:	f894 22e7 	ldrb.w	r2, [r4, #743]	@ 0x2e7
 800288e:	2a01      	cmp	r2, #1
 8002890:	f000 8314 	beq.w	8002ebc <HAL_PCD_IRQHandler+0x748>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002894:	2b05      	cmp	r3, #5
 8002896:	d94e      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002898:	f894 230b 	ldrb.w	r2, [r4, #779]	@ 0x30b
 800289c:	2a01      	cmp	r2, #1
 800289e:	f000 841a 	beq.w	80030d6 <HAL_PCD_IRQHandler+0x962>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d947      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028a6:	f894 232f 	ldrb.w	r2, [r4, #815]	@ 0x32f
 80028aa:	2a01      	cmp	r2, #1
 80028ac:	f000 8427 	beq.w	80030fe <HAL_PCD_IRQHandler+0x98a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028b0:	2b07      	cmp	r3, #7
 80028b2:	d940      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028b4:	f894 2353 	ldrb.w	r2, [r4, #851]	@ 0x353
 80028b8:	2a01      	cmp	r2, #1
 80028ba:	f000 8439 	beq.w	8003130 <HAL_PCD_IRQHandler+0x9bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d939      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028c2:	f894 2377 	ldrb.w	r2, [r4, #887]	@ 0x377
 80028c6:	2a01      	cmp	r2, #1
 80028c8:	f000 8446 	beq.w	8003158 <HAL_PCD_IRQHandler+0x9e4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028cc:	2b09      	cmp	r3, #9
 80028ce:	d932      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028d0:	f894 239b 	ldrb.w	r2, [r4, #923]	@ 0x39b
 80028d4:	2a01      	cmp	r2, #1
 80028d6:	f000 8453 	beq.w	8003180 <HAL_PCD_IRQHandler+0xa0c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028da:	2b0a      	cmp	r3, #10
 80028dc:	d92b      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028de:	f894 23bf 	ldrb.w	r2, [r4, #959]	@ 0x3bf
 80028e2:	2a01      	cmp	r2, #1
 80028e4:	f000 8460 	beq.w	80031a8 <HAL_PCD_IRQHandler+0xa34>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028e8:	2b0b      	cmp	r3, #11
 80028ea:	d924      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028ec:	f894 23e3 	ldrb.w	r2, [r4, #995]	@ 0x3e3
 80028f0:	2a01      	cmp	r2, #1
 80028f2:	f000 846d 	beq.w	80031d0 <HAL_PCD_IRQHandler+0xa5c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	d91d      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028fa:	f894 2407 	ldrb.w	r2, [r4, #1031]	@ 0x407
 80028fe:	2a01      	cmp	r2, #1
 8002900:	f000 8472 	beq.w	80031e8 <HAL_PCD_IRQHandler+0xa74>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002904:	2b0d      	cmp	r3, #13
 8002906:	d916      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002908:	f894 242b 	ldrb.w	r2, [r4, #1067]	@ 0x42b
 800290c:	2a01      	cmp	r2, #1
 800290e:	f000 8492 	beq.w	8003236 <HAL_PCD_IRQHandler+0xac2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002912:	2b0e      	cmp	r3, #14
 8002914:	d90f      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002916:	f894 244f 	ldrb.w	r2, [r4, #1103]	@ 0x44f
 800291a:	2a01      	cmp	r2, #1
 800291c:	f000 8499 	beq.w	8003252 <HAL_PCD_IRQHandler+0xade>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002920:	2b0f      	cmp	r3, #15
 8002922:	d908      	bls.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002924:	f894 3473 	ldrb.w	r3, [r4, #1139]	@ 0x473
 8002928:	2b01      	cmp	r3, #1
 800292a:	d104      	bne.n	8002936 <HAL_PCD_IRQHandler+0x1c2>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800292c:	6820      	ldr	r0, [r4, #0]
 800292e:	f504 618e 	add.w	r1, r4, #1136	@ 0x470
 8002932:	f002 fa3d 	bl	8004db0 <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002936:	6820      	ldr	r0, [r4, #0]
 8002938:	f002 fb4a 	bl	8004fd0 <USB_ReadInterrupts>
 800293c:	02c3      	lsls	r3, r0, #11
 800293e:	f140 80ab 	bpl.w	8002a98 <HAL_PCD_IRQHandler+0x324>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002942:	7923      	ldrb	r3, [r4, #4]
 8002944:	2b01      	cmp	r3, #1
 8002946:	f240 8089 	bls.w	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800294a:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800294e:	f8d6 1920 	ldr.w	r1, [r6, #2336]	@ 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002952:	2a01      	cmp	r2, #1
 8002954:	f000 8261 	beq.w	8002e1a <HAL_PCD_IRQHandler+0x6a6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002958:	2b02      	cmp	r3, #2
 800295a:	d97f      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800295c:	f894 2060 	ldrb.w	r2, [r4, #96]	@ 0x60
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002960:	f8d6 1940 	ldr.w	r1, [r6, #2368]	@ 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002964:	2a01      	cmp	r2, #1
 8002966:	f000 826b 	beq.w	8002e40 <HAL_PCD_IRQHandler+0x6cc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800296a:	2b03      	cmp	r3, #3
 800296c:	d976      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800296e:	f894 2084 	ldrb.w	r2, [r4, #132]	@ 0x84
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002972:	f8d6 1960 	ldr.w	r1, [r6, #2400]	@ 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002976:	2a01      	cmp	r2, #1
 8002978:	f000 826e 	beq.w	8002e58 <HAL_PCD_IRQHandler+0x6e4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800297c:	2b04      	cmp	r3, #4
 800297e:	d96d      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002980:	f894 20a8 	ldrb.w	r2, [r4, #168]	@ 0xa8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002984:	f8d6 1980 	ldr.w	r1, [r6, #2432]	@ 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002988:	2a01      	cmp	r2, #1
 800298a:	f000 8271 	beq.w	8002e70 <HAL_PCD_IRQHandler+0x6fc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800298e:	2b05      	cmp	r3, #5
 8002990:	d964      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002992:	f894 20cc 	ldrb.w	r2, [r4, #204]	@ 0xcc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002996:	f8d6 19a0 	ldr.w	r1, [r6, #2464]	@ 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800299a:	2a01      	cmp	r2, #1
 800299c:	f000 8339 	beq.w	8003012 <HAL_PCD_IRQHandler+0x89e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a0:	2b06      	cmp	r3, #6
 80029a2:	d95b      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029a4:	f894 20f0 	ldrb.w	r2, [r4, #240]	@ 0xf0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029a8:	f8d6 19c0 	ldr.w	r1, [r6, #2496]	@ 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029ac:	2a01      	cmp	r2, #1
 80029ae:	f000 834b 	beq.w	8003048 <HAL_PCD_IRQHandler+0x8d4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029b2:	2b07      	cmp	r3, #7
 80029b4:	d952      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029b6:	f894 2114 	ldrb.w	r2, [r4, #276]	@ 0x114
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029ba:	f8d6 19e0 	ldr.w	r1, [r6, #2528]	@ 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029be:	2a01      	cmp	r2, #1
 80029c0:	f000 8355 	beq.w	800306e <HAL_PCD_IRQHandler+0x8fa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d949      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029c8:	f894 2138 	ldrb.w	r2, [r4, #312]	@ 0x138
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029cc:	f8d6 1a00 	ldr.w	r1, [r6, #2560]	@ 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029d0:	2a01      	cmp	r2, #1
 80029d2:	f000 8358 	beq.w	8003086 <HAL_PCD_IRQHandler+0x912>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d6:	2b09      	cmp	r3, #9
 80029d8:	d940      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029da:	f894 215c 	ldrb.w	r2, [r4, #348]	@ 0x15c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029de:	f8d6 1a20 	ldr.w	r1, [r6, #2592]	@ 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029e2:	2a01      	cmp	r2, #1
 80029e4:	f000 836b 	beq.w	80030be <HAL_PCD_IRQHandler+0x94a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029e8:	2b0a      	cmp	r3, #10
 80029ea:	d937      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029ec:	f894 2180 	ldrb.w	r2, [r4, #384]	@ 0x180
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029f0:	f8d6 1a40 	ldr.w	r1, [r6, #2624]	@ 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029f4:	2a01      	cmp	r2, #1
 80029f6:	f000 8376 	beq.w	80030e6 <HAL_PCD_IRQHandler+0x972>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029fa:	2b0b      	cmp	r3, #11
 80029fc:	d92e      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029fe:	f894 21a4 	ldrb.w	r2, [r4, #420]	@ 0x1a4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a02:	f8d6 1a60 	ldr.w	r1, [r6, #2656]	@ 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a06:	2a01      	cmp	r2, #1
 8002a08:	f000 8386 	beq.w	8003118 <HAL_PCD_IRQHandler+0x9a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a0c:	2b0c      	cmp	r3, #12
 8002a0e:	d925      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a10:	f894 21c8 	ldrb.w	r2, [r4, #456]	@ 0x1c8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a14:	f8d6 1a80 	ldr.w	r1, [r6, #2688]	@ 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a18:	2a01      	cmp	r2, #1
 8002a1a:	f000 8391 	beq.w	8003140 <HAL_PCD_IRQHandler+0x9cc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a1e:	2b0d      	cmp	r3, #13
 8002a20:	d91c      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a22:	f894 21ec 	ldrb.w	r2, [r4, #492]	@ 0x1ec
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a26:	f8d6 1aa0 	ldr.w	r1, [r6, #2720]	@ 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a2a:	2a01      	cmp	r2, #1
 8002a2c:	f000 839c 	beq.w	8003168 <HAL_PCD_IRQHandler+0x9f4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a30:	2b0e      	cmp	r3, #14
 8002a32:	d913      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a34:	f894 2210 	ldrb.w	r2, [r4, #528]	@ 0x210
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a38:	f8d6 1ac0 	ldr.w	r1, [r6, #2752]	@ 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a3c:	2a01      	cmp	r2, #1
 8002a3e:	f000 83a7 	beq.w	8003190 <HAL_PCD_IRQHandler+0xa1c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a42:	2b0f      	cmp	r3, #15
 8002a44:	d90a      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a46:	f894 2234 	ldrb.w	r2, [r4, #564]	@ 0x234
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a4a:	f8d6 1ae0 	ldr.w	r1, [r6, #2784]	@ 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a4e:	2a01      	cmp	r2, #1
 8002a50:	f000 83b2 	beq.w	80031b8 <HAL_PCD_IRQHandler+0xa44>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a54:	2b10      	cmp	r3, #16
 8002a56:	d901      	bls.n	8002a5c <HAL_PCD_IRQHandler+0x2e8>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a58:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	@ 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a5c:	6820      	ldr	r0, [r4, #0]
 8002a5e:	6943      	ldr	r3, [r0, #20]
 8002a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a64:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a66:	f002 fab3 	bl	8004fd0 <USB_ReadInterrupts>
 8002a6a:	0287      	lsls	r7, r0, #10
 8002a6c:	d421      	bmi.n	8002ab2 <HAL_PCD_IRQHandler+0x33e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a6e:	6820      	ldr	r0, [r4, #0]
 8002a70:	f002 faae 	bl	8004fd0 <USB_ReadInterrupts>
 8002a74:	0040      	lsls	r0, r0, #1
 8002a76:	f100 80c6 	bmi.w	8002c06 <HAL_PCD_IRQHandler+0x492>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a7a:	6820      	ldr	r0, [r4, #0]
 8002a7c:	f002 faa8 	bl	8004fd0 <USB_ReadInterrupts>
 8002a80:	0741      	lsls	r1, r0, #29
 8002a82:	f57f ae80 	bpl.w	8002786 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a8a:	076a      	lsls	r2, r5, #29
 8002a8c:	f100 8281 	bmi.w	8002f92 <HAL_PCD_IRQHandler+0x81e>
      hpcd->Instance->GOTGINT |= RegVal;
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	432a      	orrs	r2, r5
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	e676      	b.n	8002786 <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a98:	6820      	ldr	r0, [r4, #0]
 8002a9a:	e7e4      	b.n	8002a66 <HAL_PCD_IRQHandler+0x2f2>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a9c:	9b03      	ldr	r3, [sp, #12]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	07df      	lsls	r7, r3, #31
 8002aa2:	f100 8272 	bmi.w	8002f8a <HAL_PCD_IRQHandler+0x816>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002aa6:	6820      	ldr	r0, [r4, #0]
 8002aa8:	6943      	ldr	r3, [r0, #20]
 8002aaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aae:	6143      	str	r3, [r0, #20]
 8002ab0:	e6b8      	b.n	8002824 <HAL_PCD_IRQHandler+0xb0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ab2:	f894 c004 	ldrb.w	ip, [r4, #4]
 8002ab6:	f1bc 0f01 	cmp.w	ip, #1
 8002aba:	d928      	bls.n	8002b0e <HAL_PCD_IRQHandler+0x39a>
 8002abc:	f506 6232 	add.w	r2, r6, #2848	@ 0xb20
 8002ac0:	4623      	mov	r3, r4
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	e006      	b.n	8002ad4 <HAL_PCD_IRQHandler+0x360>
 8002ac6:	3101      	adds	r1, #1
 8002ac8:	4561      	cmp	r1, ip
 8002aca:	f102 0220 	add.w	r2, r2, #32
 8002ace:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002ad2:	d01c      	beq.n	8002b0e <HAL_PCD_IRQHandler+0x39a>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ad4:	f893 027c 	ldrb.w	r0, [r3, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ad8:	6815      	ldr	r5, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ada:	2801      	cmp	r0, #1
 8002adc:	d1f3      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x352>
 8002ade:	2d00      	cmp	r5, #0
 8002ae0:	daf1      	bge.n	8002ac6 <HAL_PCD_IRQHandler+0x352>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ae2:	f8d4 74d4 	ldr.w	r7, [r4, #1236]	@ 0x4d4
 8002ae6:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 8002aea:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002aee:	42bd      	cmp	r5, r7
 8002af0:	d1e9      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x352>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002af2:	f883 027b 	strb.w	r0, [r3, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002af6:	69b0      	ldr	r0, [r6, #24]
 8002af8:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8002afc:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002afe:	6970      	ldr	r0, [r6, #20]
 8002b00:	0605      	lsls	r5, r0, #24
 8002b02:	d4e0      	bmi.n	8002ac6 <HAL_PCD_IRQHandler+0x352>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b04:	9a03      	ldr	r2, [sp, #12]
 8002b06:	6853      	ldr	r3, [r2, #4]
 8002b08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b0c:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b0e:	6820      	ldr	r0, [r4, #0]
 8002b10:	6943      	ldr	r3, [r0, #20]
 8002b12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b16:	6143      	str	r3, [r0, #20]
 8002b18:	e7aa      	b.n	8002a70 <HAL_PCD_IRQHandler+0x2fc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b1a:	9a03      	ldr	r2, [sp, #12]
 8002b1c:	6853      	ldr	r3, [r2, #4]
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 8002b24:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	f000 8182 	beq.w	8002e32 <HAL_PCD_IRQHandler+0x6be>
        HAL_PCD_ResumeCallback(hpcd);
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f003 fdc6 	bl	80066c0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b34:	6820      	ldr	r0, [r4, #0]
 8002b36:	6943      	ldr	r3, [r0, #20]
 8002b38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b3c:	6143      	str	r3, [r0, #20]
 8002b3e:	e66b      	b.n	8002818 <HAL_PCD_IRQHandler+0xa4>
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b40:	f002 fa78 	bl	8005034 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b44:	6820      	ldr	r0, [r4, #0]
 8002b46:	f001 ff59 	bl	80049fc <USB_GetDevSpeed>
 8002b4a:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b4c:	6825      	ldr	r5, [r4, #0]
 8002b4e:	f001 f80f 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8002b52:	79e2      	ldrb	r2, [r4, #7]
 8002b54:	4601      	mov	r1, r0
 8002b56:	4628      	mov	r0, r5
 8002b58:	f001 fd3a 	bl	80045d0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f003 fd85 	bl	800666c <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b62:	6820      	ldr	r0, [r4, #0]
 8002b64:	6943      	ldr	r3, [r0, #20]
 8002b66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b6a:	6143      	str	r3, [r0, #20]
 8002b6c:	e667      	b.n	800283e <HAL_PCD_IRQHandler+0xca>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b6e:	9a03      	ldr	r2, [sp, #12]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b70:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b72:	6853      	ldr	r3, [r2, #4]
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b7a:	2110      	movs	r1, #16
 8002b7c:	f001 ff16 	bl	80049ac <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b80:	7920      	ldrb	r0, [r4, #4]
 8002b82:	b1d8      	cbz	r0, 8002bbc <HAL_PCD_IRQHandler+0x448>
 8002b84:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b88:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8002b8c:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002b94:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b96:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b9a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002b9e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002ba2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ba6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002baa:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bac:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb0:	4285      	cmp	r5, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bb2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb6:	f103 0320 	add.w	r3, r3, #32
 8002bba:	d1e7      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x418>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bbc:	9a03      	ldr	r2, [sp, #12]
 8002bbe:	69d3      	ldr	r3, [r2, #28]
 8002bc0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002bc4:	61d3      	str	r3, [r2, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bc6:	7be3      	ldrb	r3, [r4, #15]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f040 811b 	bne.w	8002e04 <HAL_PCD_IRQHandler+0x690>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bce:	6953      	ldr	r3, [r2, #20]
 8002bd0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bd4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002bd8:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002bda:	6913      	ldr	r3, [r2, #16]
 8002bdc:	f043 030b 	orr.w	r3, r3, #11
 8002be0:	6113      	str	r3, [r2, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002be2:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002be6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002be8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002bec:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bf0:	79a1      	ldrb	r1, [r4, #6]
 8002bf2:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002bf6:	f002 fa2f 	bl	8005058 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002bfa:	6820      	ldr	r0, [r4, #0]
 8002bfc:	6943      	ldr	r3, [r0, #20]
 8002bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c02:	6143      	str	r3, [r0, #20]
 8002c04:	e614      	b.n	8002830 <HAL_PCD_IRQHandler+0xbc>
      HAL_PCD_ConnectCallback(hpcd);
 8002c06:	4620      	mov	r0, r4
 8002c08:	f003 fd66 	bl	80066d8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c0c:	6820      	ldr	r0, [r4, #0]
 8002c0e:	6943      	ldr	r3, [r0, #20]
 8002c10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002c14:	6143      	str	r3, [r0, #20]
 8002c16:	e731      	b.n	8002a7c <HAL_PCD_IRQHandler+0x308>
      HAL_PCD_SOFCallback(hpcd);
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f003 fd23 	bl	8006664 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c1e:	6820      	ldr	r0, [r4, #0]
 8002c20:	6943      	ldr	r3, [r0, #20]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	6143      	str	r3, [r0, #20]
 8002c28:	e60f      	b.n	800284a <HAL_PCD_IRQHandler+0xd6>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c2a:	6820      	ldr	r0, [r4, #0]
 8002c2c:	f002 f9dc 	bl	8004fe8 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8002c30:	4681      	mov	r9, r0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c32:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8002c34:	f1b9 0f00 	cmp.w	r9, #0
 8002c38:	f43f ade8 	beq.w	800280c <HAL_PCD_IRQHandler+0x98>
 8002c3c:	f506 6710 	add.w	r7, r6, #2304	@ 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c40:	9604      	str	r6, [sp, #16]
 8002c42:	46a0      	mov	r8, r4
      epnum = 0U;
 8002c44:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c48:	4606      	mov	r6, r0
 8002c4a:	9505      	str	r5, [sp, #20]
 8002c4c:	e009      	b.n	8002c62 <HAL_PCD_IRQHandler+0x4ee>
      while (ep_intr != 0U)
 8002c4e:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8002c52:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 8002c56:	f108 0824 	add.w	r8, r8, #36	@ 0x24
 8002c5a:	f107 0720 	add.w	r7, r7, #32
 8002c5e:	f000 8137 	beq.w	8002ed0 <HAL_PCD_IRQHandler+0x75c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c62:	f019 0f01 	tst.w	r9, #1
 8002c66:	d0f2      	beq.n	8002c4e <HAL_PCD_IRQHandler+0x4da>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c68:	fa5f fb8a 	uxtb.w	fp, sl
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	4659      	mov	r1, fp
 8002c70:	f002 f9cc 	bl	800500c <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c74:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c76:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c78:	d512      	bpl.n	8002ca0 <HAL_PCD_IRQHandler+0x52c>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c7a:	9803      	ldr	r0, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c7c:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c7e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c80:	f00a 020f 	and.w	r2, sl, #15
 8002c84:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c88:	ea23 0302 	bic.w	r3, r3, r2
 8002c8c:	6343      	str	r3, [r0, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c8e:	60b9      	str	r1, [r7, #8]
            if (hpcd->Init.dma_enable == 1U)
 8002c90:	79a1      	ldrb	r1, [r4, #6]
 8002c92:	2901      	cmp	r1, #1
 8002c94:	f000 8182 	beq.w	8002f9c <HAL_PCD_IRQHandler+0x828>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c98:	4659      	mov	r1, fp
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f003 fcd8 	bl	8006650 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ca0:	072b      	lsls	r3, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ca2:	bf44      	itt	mi
 8002ca4:	2308      	movmi	r3, #8
 8002ca6:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ca8:	06ee      	lsls	r6, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002caa:	bf44      	itt	mi
 8002cac:	2310      	movmi	r3, #16
 8002cae:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cb0:	0668      	lsls	r0, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cb2:	bf44      	itt	mi
 8002cb4:	2340      	movmi	r3, #64	@ 0x40
 8002cb6:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002cb8:	07a9      	lsls	r1, r5, #30
 8002cba:	f100 813d 	bmi.w	8002f38 <HAL_PCD_IRQHandler+0x7c4>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cbe:	062a      	lsls	r2, r5, #24
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cc0:	6826      	ldr	r6, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cc2:	d5c4      	bpl.n	8002c4e <HAL_PCD_IRQHandler+0x4da>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8002cc4:	e9d8 5309 	ldrd	r5, r3, [r8, #36]	@ 0x24
 8002cc8:	42ab      	cmp	r3, r5
 8002cca:	d8c0      	bhi.n	8002c4e <HAL_PCD_IRQHandler+0x4da>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ccc:	f506 6110 	add.w	r1, r6, #2304	@ 0x900
  len32b = (len + 3U) / 4U;
 8002cd0:	f8d8 001c 	ldr.w	r0, [r8, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd4:	9607      	str	r6, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cd6:	eb01 114a 	add.w	r1, r1, sl, lsl #5
  len = ep->xfer_len - ep->xfer_count;
 8002cda:	eba5 0c03 	sub.w	ip, r5, r3
  len32b = (len + 3U) / 4U;
 8002cde:	4584      	cmp	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ce0:	698a      	ldr	r2, [r1, #24]
  len32b = (len + 3U) / 4U;
 8002ce2:	bf28      	it	cs
 8002ce4:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ce6:	fa1f fe82 	uxth.w	lr, r2
  len32b = (len + 3U) / 4U;
 8002cea:	f10c 0c03 	add.w	ip, ip, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cee:	ebbe 0f9c 	cmp.w	lr, ip, lsr #2
 8002cf2:	f0c0 818a 	bcc.w	800300a <HAL_PCD_IRQHandler+0x896>
 8002cf6:	9706      	str	r7, [sp, #24]
 8002cf8:	460f      	mov	r7, r1
 8002cfa:	e021      	b.n	8002d40 <HAL_PCD_IRQHandler+0x5cc>
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002cfc:	1aed      	subs	r5, r5, r3
 8002cfe:	f8d8 301c 	ldr.w	r3, [r8, #28]
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d02:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8002d06:	429d      	cmp	r5, r3
 8002d08:	bf28      	it	cs
 8002d0a:	461d      	movcs	r5, r3
 8002d0c:	79a3      	ldrb	r3, [r4, #6]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	465a      	mov	r2, fp
 8002d12:	b2ab      	uxth	r3, r5
 8002d14:	4630      	mov	r0, r6
 8002d16:	f002 f895 	bl	8004e44 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8002d1a:	f8d8 3020 	ldr.w	r3, [r8, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d1e:	69ba      	ldr	r2, [r7, #24]
    ep->xfer_buff  += len;
 8002d20:	442b      	add	r3, r5
 8002d22:	f8c8 3020 	str.w	r3, [r8, #32]
    ep->xfer_count += len;
 8002d26:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d2a:	b292      	uxth	r2, r2
    ep->xfer_count += len;
 8002d2c:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 8002d2e:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d30:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
    ep->xfer_count += len;
 8002d34:	f8c8 3028 	str.w	r3, [r8, #40]	@ 0x28
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d38:	f0c0 8163 	bcc.w	8003002 <HAL_PCD_IRQHandler+0x88e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d3c:	f8d8 5024 	ldr.w	r5, [r8, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d40:	429d      	cmp	r5, r3
 8002d42:	d8db      	bhi.n	8002cfc <HAL_PCD_IRQHandler+0x588>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d44:	9f06      	ldr	r7, [sp, #24]
 8002d46:	6826      	ldr	r6, [r4, #0]
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d48:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d4a:	f00a 050f 	and.w	r5, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d4e:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d52:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d54:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d58:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d5a:	ea23 0302 	bic.w	r3, r3, r2
 8002d5e:	634b      	str	r3, [r1, #52]	@ 0x34
 8002d60:	e775      	b.n	8002c4e <HAL_PCD_IRQHandler+0x4da>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d62:	f002 f939 	bl	8004fd8 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8002d66:	4607      	mov	r7, r0
 8002d68:	6820      	ldr	r0, [r4, #0]
 8002d6a:	2f00      	cmp	r7, #0
 8002d6c:	f43f ad48 	beq.w	8002800 <HAL_PCD_IRQHandler+0x8c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d70:	9504      	str	r5, [sp, #16]
 8002d72:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
 8002d76:	46a3      	mov	fp, r4
      epnum = 0U;
 8002d78:	f04f 0a00 	mov.w	sl, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d7c:	4625      	mov	r5, r4
 8002d7e:	e008      	b.n	8002d92 <HAL_PCD_IRQHandler+0x61e>
      while (ep_intr != 0U)
 8002d80:	087f      	lsrs	r7, r7, #1
        epnum++;
 8002d82:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 8002d86:	f108 0820 	add.w	r8, r8, #32
 8002d8a:	f10b 0b24 	add.w	fp, fp, #36	@ 0x24
 8002d8e:	f000 809c 	beq.w	8002eca <HAL_PCD_IRQHandler+0x756>
        if ((ep_intr & 0x1U) != 0U)
 8002d92:	07fc      	lsls	r4, r7, #31
 8002d94:	d5f4      	bpl.n	8002d80 <HAL_PCD_IRQHandler+0x60c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d96:	fa5f f48a 	uxtb.w	r4, sl
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	f002 f92c 	bl	8004ff8 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002da0:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002da4:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002da6:	f040 80a8 	bne.w	8002efa <HAL_PCD_IRQHandler+0x786>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002daa:	f019 0f08 	tst.w	r9, #8
 8002dae:	f040 8093 	bne.w	8002ed8 <HAL_PCD_IRQHandler+0x764>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002db2:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002db6:	bf1c      	itt	ne
 8002db8:	2210      	movne	r2, #16
 8002dba:	f8c8 2008 	strne.w	r2, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002dbe:	f019 0f02 	tst.w	r9, #2
 8002dc2:	d00f      	beq.n	8002de4 <HAL_PCD_IRQHandler+0x670>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002dc4:	6972      	ldr	r2, [r6, #20]
 8002dc6:	0611      	lsls	r1, r2, #24
 8002dc8:	d504      	bpl.n	8002dd4 <HAL_PCD_IRQHandler+0x660>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002dca:	9b03      	ldr	r3, [sp, #12]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dd2:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 8002dd4:	f89b 2257 	ldrb.w	r2, [fp, #599]	@ 0x257
 8002dd8:	2a01      	cmp	r2, #1
 8002dda:	f000 812d 	beq.w	8003038 <HAL_PCD_IRQHandler+0x8c4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002dde:	2302      	movs	r3, #2
 8002de0:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002de4:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002de8:	bf1c      	itt	ne
 8002dea:	2320      	movne	r3, #32
 8002dec:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002df0:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002df4:	bf18      	it	ne
 8002df6:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 8002dfa:	6828      	ldr	r0, [r5, #0]
 8002dfc:	bf18      	it	ne
 8002dfe:	f8c8 3008 	strne.w	r3, [r8, #8]
 8002e02:	e7bd      	b.n	8002d80 <HAL_PCD_IRQHandler+0x60c>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e04:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8002e08:	f043 030b 	orr.w	r3, r3, #11
 8002e0c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e10:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8002e12:	f043 030b 	orr.w	r3, r3, #11
 8002e16:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e18:	e6e3      	b.n	8002be2 <HAL_PCD_IRQHandler+0x46e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e1a:	2900      	cmp	r1, #0
 8002e1c:	f6bf ad9c 	bge.w	8002958 <HAL_PCD_IRQHandler+0x1e4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e20:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e22:	f884 203b 	strb.w	r2, [r4, #59]	@ 0x3b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e26:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8002e2a:	f001 ffc1 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e2e:	7923      	ldrb	r3, [r4, #4]
 8002e30:	e592      	b.n	8002958 <HAL_PCD_IRQHandler+0x1e4>
        hpcd->LPM_State = LPM_L0;
 8002e32:	2100      	movs	r1, #0
 8002e34:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f000 fbf1 	bl	8003620 <HAL_PCDEx_LPM_Callback>
 8002e3e:	e679      	b.n	8002b34 <HAL_PCD_IRQHandler+0x3c0>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e40:	2900      	cmp	r1, #0
 8002e42:	f6bf ad92 	bge.w	800296a <HAL_PCD_IRQHandler+0x1f6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e46:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e48:	f884 205f 	strb.w	r2, [r4, #95]	@ 0x5f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e4c:	f104 015c 	add.w	r1, r4, #92	@ 0x5c
 8002e50:	f001 ffae 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e54:	7923      	ldrb	r3, [r4, #4]
 8002e56:	e588      	b.n	800296a <HAL_PCD_IRQHandler+0x1f6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e58:	2900      	cmp	r1, #0
 8002e5a:	f6bf ad8f 	bge.w	800297c <HAL_PCD_IRQHandler+0x208>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e5e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e60:	f884 2083 	strb.w	r2, [r4, #131]	@ 0x83
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e64:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 8002e68:	f001 ffa2 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e6c:	7923      	ldrb	r3, [r4, #4]
 8002e6e:	e585      	b.n	800297c <HAL_PCD_IRQHandler+0x208>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e70:	2900      	cmp	r1, #0
 8002e72:	f6bf ad8c 	bge.w	800298e <HAL_PCD_IRQHandler+0x21a>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e76:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e78:	f884 20a7 	strb.w	r2, [r4, #167]	@ 0xa7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e7c:	f104 01a4 	add.w	r1, r4, #164	@ 0xa4
 8002e80:	f001 ff96 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e84:	7923      	ldrb	r3, [r4, #4]
 8002e86:	e582      	b.n	800298e <HAL_PCD_IRQHandler+0x21a>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e88:	6820      	ldr	r0, [r4, #0]
 8002e8a:	f504 7130 	add.w	r1, r4, #704	@ 0x2c0
 8002e8e:	f001 ff8f 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e92:	7923      	ldrb	r3, [r4, #4]
 8002e94:	e4f7      	b.n	8002886 <HAL_PCD_IRQHandler+0x112>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e96:	2208      	movs	r2, #8
 8002e98:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8002e9c:	4630      	mov	r0, r6
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e9e:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ea2:	f001 ffe5 	bl	8004e70 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ea6:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 8002eaa:	f3c7 130a 	ubfx	r3, r7, #4, #11
 8002eae:	f8d2 1268 	ldr.w	r1, [r2, #616]	@ 0x268
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eb2:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eb4:	440b      	add	r3, r1
 8002eb6:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8002eba:	e496      	b.n	80027ea <HAL_PCD_IRQHandler+0x76>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ebc:	6820      	ldr	r0, [r4, #0]
 8002ebe:	f504 7139 	add.w	r1, r4, #740	@ 0x2e4
 8002ec2:	f001 ff75 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec6:	7923      	ldrb	r3, [r4, #4]
 8002ec8:	e4e4      	b.n	8002894 <HAL_PCD_IRQHandler+0x120>
 8002eca:	462c      	mov	r4, r5
 8002ecc:	9d04      	ldr	r5, [sp, #16]
 8002ece:	e497      	b.n	8002800 <HAL_PCD_IRQHandler+0x8c>
 8002ed0:	4630      	mov	r0, r6
 8002ed2:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
 8002ed6:	e499      	b.n	800280c <HAL_PCD_IRQHandler+0x98>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ed8:	6829      	ldr	r1, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002eda:	2208      	movs	r2, #8
 8002edc:	f8c8 2008 	str.w	r2, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ee0:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ee2:	f501 6230 	add.w	r2, r1, #2816	@ 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee6:	49be      	ldr	r1, [pc, #760]	@ (80031e0 <HAL_PCD_IRQHandler+0xa6c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ee8:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eec:	4288      	cmp	r0, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eee:	6893      	ldr	r3, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef0:	d867      	bhi.n	8002fc2 <HAL_PCD_IRQHandler+0x84e>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f003 fb9c 	bl	8006630 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ef8:	e75b      	b.n	8002db2 <HAL_PCD_IRQHandler+0x63e>
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002efa:	6828      	ldr	r0, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002efc:	2201      	movs	r2, #1
 8002efe:	f8c8 2008 	str.w	r2, [r8, #8]
  if (hpcd->Init.dma_enable == 1U)
 8002f02:	79a9      	ldrb	r1, [r5, #6]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002f04:	f8d0 e040 	ldr.w	lr, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f08:	f500 6230 	add.w	r2, r0, #2816	@ 0xb00
 8002f0c:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8002f10:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f12:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8002f14:	d067      	beq.n	8002fe6 <HAL_PCD_IRQHandler+0x872>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f16:	49b3      	ldr	r1, [pc, #716]	@ (80031e4 <HAL_PCD_IRQHandler+0xa70>)
 8002f18:	458e      	cmp	lr, r1
 8002f1a:	f000 80c0 	beq.w	800309e <HAL_PCD_IRQHandler+0x92a>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f1e:	f1ba 0f00 	cmp.w	sl, #0
 8002f22:	d104      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x7ba>
 8002f24:	f8d5 2264 	ldr.w	r2, [r5, #612]	@ 0x264
 8002f28:	2a00      	cmp	r2, #0
 8002f2a:	f000 818c 	beq.w	8003246 <HAL_PCD_IRQHandler+0xad2>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f2e:	4621      	mov	r1, r4
 8002f30:	4628      	mov	r0, r5
 8002f32:	f003 fb83 	bl	800663c <HAL_PCD_DataOutStageCallback>
 8002f36:	e738      	b.n	8002daa <HAL_PCD_IRQHandler+0x636>
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f38:	9804      	ldr	r0, [sp, #16]
 8002f3a:	4651      	mov	r1, sl
 8002f3c:	f001 fd36 	bl	80049ac <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8002f40:	f898 3017 	ldrb.w	r3, [r8, #23]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	f000 80b2 	beq.w	80030ae <HAL_PCD_IRQHandler+0x93a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	e6b6      	b.n	8002cbe <HAL_PCD_IRQHandler+0x54a>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f50:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002f54:	421f      	tst	r7, r3
 8002f56:	f43f ac48 	beq.w	80027ea <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f5a:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
 8002f5e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8002f62:	f3c7 120a 	ubfx	r2, r7, #4, #11
 8002f66:	f8d8 1260 	ldr.w	r1, [r8, #608]	@ 0x260
 8002f6a:	4630      	mov	r0, r6
 8002f6c:	4617      	mov	r7, r2
 8002f6e:	f001 ff7f 	bl	8004e70 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f72:	f8d8 3260 	ldr.w	r3, [r8, #608]	@ 0x260
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f76:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f78:	443b      	add	r3, r7
 8002f7a:	f8c8 3260 	str.w	r3, [r8, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f7e:	f8d8 3268 	ldr.w	r3, [r8, #616]	@ 0x268
 8002f82:	443b      	add	r3, r7
 8002f84:	f8c8 3268 	str.w	r3, [r8, #616]	@ 0x268
 8002f88:	e42f      	b.n	80027ea <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f003 fb80 	bl	8006690 <HAL_PCD_SuspendCallback>
 8002f90:	e589      	b.n	8002aa6 <HAL_PCD_IRQHandler+0x332>
        HAL_PCD_DisconnectCallback(hpcd);
 8002f92:	4620      	mov	r0, r4
 8002f94:	f003 fba4 	bl	80066e0 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	e579      	b.n	8002a90 <HAL_PCD_IRQHandler+0x31c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f9c:	e9d8 2307 	ldrd	r2, r3, [r8, #28]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f8c8 3020 	str.w	r3, [r8, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fa6:	f1ba 0f00 	cmp.w	sl, #0
 8002faa:	f47f ae75 	bne.w	8002c98 <HAL_PCD_IRQHandler+0x524>
 8002fae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f47f ae71 	bne.w	8002c98 <HAL_PCD_IRQHandler+0x524>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fb6:	6820      	ldr	r0, [r4, #0]
 8002fb8:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002fbc:	f002 f84c 	bl	8005058 <USB_EP0_OutStart>
 8002fc0:	e66a      	b.n	8002c98 <HAL_PCD_IRQHandler+0x524>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fc2:	0418      	lsls	r0, r3, #16
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fc4:	bf44      	itt	mi
 8002fc6:	f44f 4100 	movmi.w	r1, #32768	@ 0x8000
 8002fca:	6091      	strmi	r1, [r2, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 8002fcc:	4628      	mov	r0, r5
 8002fce:	f003 fb2f 	bl	8006630 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002fd2:	79a9      	ldrb	r1, [r5, #6]
 8002fd4:	2901      	cmp	r1, #1
 8002fd6:	f47f aeec 	bne.w	8002db2 <HAL_PCD_IRQHandler+0x63e>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fda:	6828      	ldr	r0, [r5, #0]
 8002fdc:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8002fe0:	f002 f83a 	bl	8005058 <USB_EP0_OutStart>
 8002fe4:	e6e5      	b.n	8002db2 <HAL_PCD_IRQHandler+0x63e>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fe6:	0719      	lsls	r1, r3, #28
 8002fe8:	f140 8091 	bpl.w	800310e <HAL_PCD_IRQHandler+0x99a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fec:	497c      	ldr	r1, [pc, #496]	@ (80031e0 <HAL_PCD_IRQHandler+0xa6c>)
 8002fee:	458e      	cmp	lr, r1
 8002ff0:	f67f aedb 	bls.w	8002daa <HAL_PCD_IRQHandler+0x636>
 8002ff4:	0418      	lsls	r0, r3, #16
 8002ff6:	f57f aed8 	bpl.w	8002daa <HAL_PCD_IRQHandler+0x636>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ffa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ffe:	6091      	str	r1, [r2, #8]
 8003000:	e6d3      	b.n	8002daa <HAL_PCD_IRQHandler+0x636>
  if (ep->xfer_len <= ep->xfer_count)
 8003002:	9f06      	ldr	r7, [sp, #24]
 8003004:	f8d8 5024 	ldr.w	r5, [r8, #36]	@ 0x24
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003008:	6826      	ldr	r6, [r4, #0]
  if (ep->xfer_len <= ep->xfer_count)
 800300a:	429d      	cmp	r5, r3
 800300c:	f63f ae1f 	bhi.w	8002c4e <HAL_PCD_IRQHandler+0x4da>
 8003010:	e69a      	b.n	8002d48 <HAL_PCD_IRQHandler+0x5d4>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003012:	2900      	cmp	r1, #0
 8003014:	f6bf acc4 	bge.w	80029a0 <HAL_PCD_IRQHandler+0x22c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003018:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800301a:	f884 20cb 	strb.w	r2, [r4, #203]	@ 0xcb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800301e:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8003022:	f001 fec5 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003026:	7923      	ldrb	r3, [r4, #4]
 8003028:	e4ba      	b.n	80029a0 <HAL_PCD_IRQHandler+0x22c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800302a:	6820      	ldr	r0, [r4, #0]
 800302c:	f504 711e 	add.w	r1, r4, #632	@ 0x278
 8003030:	f001 febe 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003034:	7923      	ldrb	r3, [r4, #4]
 8003036:	e418      	b.n	800286a <HAL_PCD_IRQHandler+0xf6>
              ep->is_iso_incomplete = 0U;
 8003038:	2200      	movs	r2, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800303a:	4621      	mov	r1, r4
              ep->is_iso_incomplete = 0U;
 800303c:	f88b 2257 	strb.w	r2, [fp, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003040:	4628      	mov	r0, r5
 8003042:	f003 fb41 	bl	80066c8 <HAL_PCD_ISOOUTIncompleteCallback>
 8003046:	e6ca      	b.n	8002dde <HAL_PCD_IRQHandler+0x66a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003048:	2900      	cmp	r1, #0
 800304a:	f6bf acb2 	bge.w	80029b2 <HAL_PCD_IRQHandler+0x23e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800304e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003050:	f884 20ef 	strb.w	r2, [r4, #239]	@ 0xef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003054:	f104 01ec 	add.w	r1, r4, #236	@ 0xec
 8003058:	f001 feaa 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800305c:	7923      	ldrb	r3, [r4, #4]
 800305e:	e4a8      	b.n	80029b2 <HAL_PCD_IRQHandler+0x23e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003060:	6820      	ldr	r0, [r4, #0]
 8003062:	f504 7127 	add.w	r1, r4, #668	@ 0x29c
 8003066:	f001 fea3 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800306a:	7923      	ldrb	r3, [r4, #4]
 800306c:	e404      	b.n	8002878 <HAL_PCD_IRQHandler+0x104>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800306e:	2900      	cmp	r1, #0
 8003070:	f6bf aca8 	bge.w	80029c4 <HAL_PCD_IRQHandler+0x250>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003074:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003076:	f884 2113 	strb.w	r2, [r4, #275]	@ 0x113
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800307a:	f504 7188 	add.w	r1, r4, #272	@ 0x110
 800307e:	f001 fe97 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003082:	7923      	ldrb	r3, [r4, #4]
 8003084:	e49e      	b.n	80029c4 <HAL_PCD_IRQHandler+0x250>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003086:	2900      	cmp	r1, #0
 8003088:	f6bf aca5 	bge.w	80029d6 <HAL_PCD_IRQHandler+0x262>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800308c:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800308e:	f884 2137 	strb.w	r2, [r4, #311]	@ 0x137
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003092:	f504 719a 	add.w	r1, r4, #308	@ 0x134
 8003096:	f001 fe8b 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800309a:	7923      	ldrb	r3, [r4, #4]
 800309c:	e49b      	b.n	80029d6 <HAL_PCD_IRQHandler+0x262>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800309e:	0419      	lsls	r1, r3, #16
 80030a0:	d4ab      	bmi.n	8002ffa <HAL_PCD_IRQHandler+0x886>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030a2:	069b      	lsls	r3, r3, #26
 80030a4:	f57f af43 	bpl.w	8002f2e <HAL_PCD_IRQHandler+0x7ba>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030a8:	2120      	movs	r1, #32
 80030aa:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030ac:	e73f      	b.n	8002f2e <HAL_PCD_IRQHandler+0x7ba>
              ep->is_iso_incomplete = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f888 3017 	strb.w	r3, [r8, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80030b4:	4659      	mov	r1, fp
 80030b6:	4620      	mov	r0, r4
 80030b8:	f003 fb0a 	bl	80066d0 <HAL_PCD_ISOINIncompleteCallback>
 80030bc:	e745      	b.n	8002f4a <HAL_PCD_IRQHandler+0x7d6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030be:	2900      	cmp	r1, #0
 80030c0:	f6bf ac92 	bge.w	80029e8 <HAL_PCD_IRQHandler+0x274>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030c4:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030c6:	f884 215b 	strb.w	r2, [r4, #347]	@ 0x15b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030ca:	f504 71ac 	add.w	r1, r4, #344	@ 0x158
 80030ce:	f001 fe6f 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030d2:	7923      	ldrb	r3, [r4, #4]
 80030d4:	e488      	b.n	80029e8 <HAL_PCD_IRQHandler+0x274>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030d6:	6820      	ldr	r0, [r4, #0]
 80030d8:	f504 7142 	add.w	r1, r4, #776	@ 0x308
 80030dc:	f001 fe68 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030e0:	7923      	ldrb	r3, [r4, #4]
 80030e2:	f7ff bbde 	b.w	80028a2 <HAL_PCD_IRQHandler+0x12e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030e6:	2900      	cmp	r1, #0
 80030e8:	f6bf ac87 	bge.w	80029fa <HAL_PCD_IRQHandler+0x286>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030ec:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030ee:	f884 217f 	strb.w	r2, [r4, #383]	@ 0x17f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030f2:	f504 71be 	add.w	r1, r4, #380	@ 0x17c
 80030f6:	f001 fe5b 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030fa:	7923      	ldrb	r3, [r4, #4]
 80030fc:	e47d      	b.n	80029fa <HAL_PCD_IRQHandler+0x286>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030fe:	6820      	ldr	r0, [r4, #0]
 8003100:	f504 714b 	add.w	r1, r4, #812	@ 0x32c
 8003104:	f001 fe54 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003108:	7923      	ldrb	r3, [r4, #4]
 800310a:	f7ff bbd1 	b.w	80028b0 <HAL_PCD_IRQHandler+0x13c>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800310e:	0699      	lsls	r1, r3, #26
 8003110:	d572      	bpl.n	80031f8 <HAL_PCD_IRQHandler+0xa84>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003112:	2120      	movs	r1, #32
 8003114:	6091      	str	r1, [r2, #8]
 8003116:	e648      	b.n	8002daa <HAL_PCD_IRQHandler+0x636>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003118:	2900      	cmp	r1, #0
 800311a:	f6bf ac77 	bge.w	8002a0c <HAL_PCD_IRQHandler+0x298>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800311e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003120:	f884 21a3 	strb.w	r2, [r4, #419]	@ 0x1a3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003124:	f504 71d0 	add.w	r1, r4, #416	@ 0x1a0
 8003128:	f001 fe42 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800312c:	7923      	ldrb	r3, [r4, #4]
 800312e:	e46d      	b.n	8002a0c <HAL_PCD_IRQHandler+0x298>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003130:	6820      	ldr	r0, [r4, #0]
 8003132:	f504 7154 	add.w	r1, r4, #848	@ 0x350
 8003136:	f001 fe3b 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800313a:	7923      	ldrb	r3, [r4, #4]
 800313c:	f7ff bbbf 	b.w	80028be <HAL_PCD_IRQHandler+0x14a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003140:	2900      	cmp	r1, #0
 8003142:	f6bf ac6c 	bge.w	8002a1e <HAL_PCD_IRQHandler+0x2aa>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003146:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003148:	f884 21c7 	strb.w	r2, [r4, #455]	@ 0x1c7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800314c:	f504 71e2 	add.w	r1, r4, #452	@ 0x1c4
 8003150:	f001 fe2e 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003154:	7923      	ldrb	r3, [r4, #4]
 8003156:	e462      	b.n	8002a1e <HAL_PCD_IRQHandler+0x2aa>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003158:	6820      	ldr	r0, [r4, #0]
 800315a:	f504 715d 	add.w	r1, r4, #884	@ 0x374
 800315e:	f001 fe27 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003162:	7923      	ldrb	r3, [r4, #4]
 8003164:	f7ff bbb2 	b.w	80028cc <HAL_PCD_IRQHandler+0x158>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003168:	2900      	cmp	r1, #0
 800316a:	f6bf ac61 	bge.w	8002a30 <HAL_PCD_IRQHandler+0x2bc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800316e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003170:	f884 21eb 	strb.w	r2, [r4, #491]	@ 0x1eb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003174:	f504 71f4 	add.w	r1, r4, #488	@ 0x1e8
 8003178:	f001 fe1a 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800317c:	7923      	ldrb	r3, [r4, #4]
 800317e:	e457      	b.n	8002a30 <HAL_PCD_IRQHandler+0x2bc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003180:	6820      	ldr	r0, [r4, #0]
 8003182:	f504 7166 	add.w	r1, r4, #920	@ 0x398
 8003186:	f001 fe13 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800318a:	7923      	ldrb	r3, [r4, #4]
 800318c:	f7ff bba5 	b.w	80028da <HAL_PCD_IRQHandler+0x166>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003190:	2900      	cmp	r1, #0
 8003192:	f6bf ac56 	bge.w	8002a42 <HAL_PCD_IRQHandler+0x2ce>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003196:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003198:	f884 220f 	strb.w	r2, [r4, #527]	@ 0x20f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800319c:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80031a0:	f001 fe06 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031a4:	7923      	ldrb	r3, [r4, #4]
 80031a6:	e44c      	b.n	8002a42 <HAL_PCD_IRQHandler+0x2ce>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80031a8:	6820      	ldr	r0, [r4, #0]
 80031aa:	f504 716f 	add.w	r1, r4, #956	@ 0x3bc
 80031ae:	f001 fdff 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031b2:	7923      	ldrb	r3, [r4, #4]
 80031b4:	f7ff bb98 	b.w	80028e8 <HAL_PCD_IRQHandler+0x174>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031b8:	2900      	cmp	r1, #0
 80031ba:	f6bf ac4b 	bge.w	8002a54 <HAL_PCD_IRQHandler+0x2e0>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80031be:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031c0:	f884 2233 	strb.w	r2, [r4, #563]	@ 0x233
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80031c4:	f504 710c 	add.w	r1, r4, #560	@ 0x230
 80031c8:	f001 fdf2 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031cc:	7923      	ldrb	r3, [r4, #4]
 80031ce:	e441      	b.n	8002a54 <HAL_PCD_IRQHandler+0x2e0>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80031d0:	6820      	ldr	r0, [r4, #0]
 80031d2:	f504 7178 	add.w	r1, r4, #992	@ 0x3e0
 80031d6:	f001 fdeb 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031da:	7923      	ldrb	r3, [r4, #4]
 80031dc:	f7ff bb8b 	b.w	80028f6 <HAL_PCD_IRQHandler+0x182>
 80031e0:	4f54300a 	.word	0x4f54300a
 80031e4:	4f54310a 	.word	0x4f54310a
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80031e8:	6820      	ldr	r0, [r4, #0]
 80031ea:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 80031ee:	f001 fddf 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031f2:	7923      	ldrb	r3, [r4, #4]
 80031f4:	f7ff bb86 	b.w	8002904 <HAL_PCD_IRQHandler+0x190>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031f8:	f013 0f28 	tst.w	r3, #40	@ 0x28
 80031fc:	f47f add5 	bne.w	8002daa <HAL_PCD_IRQHandler+0x636>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003200:	491b      	ldr	r1, [pc, #108]	@ (8003270 <HAL_PCD_IRQHandler+0xafc>)
 8003202:	458e      	cmp	lr, r1
 8003204:	d902      	bls.n	800320c <HAL_PCD_IRQHandler+0xa98>
 8003206:	041b      	lsls	r3, r3, #16
 8003208:	f53f aef7 	bmi.w	8002ffa <HAL_PCD_IRQHandler+0x886>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800320c:	6911      	ldr	r1, [r2, #16]
 800320e:	f8db 2274 	ldr.w	r2, [fp, #628]	@ 0x274
 8003212:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8003216:	1a52      	subs	r2, r2, r1
 8003218:	f8cb 2268 	str.w	r2, [fp, #616]	@ 0x268
        if (epnum == 0U)
 800321c:	f1ba 0f00 	cmp.w	sl, #0
 8003220:	f47f ae85 	bne.w	8002f2e <HAL_PCD_IRQHandler+0x7ba>
          if (ep->xfer_len == 0U)
 8003224:	f8d5 1264 	ldr.w	r1, [r5, #612]	@ 0x264
 8003228:	b1d9      	cbz	r1, 8003262 <HAL_PCD_IRQHandler+0xaee>
            ep->xfer_buff += ep->xfer_count;
 800322a:	f8d5 1260 	ldr.w	r1, [r5, #608]	@ 0x260
 800322e:	4411      	add	r1, r2
 8003230:	f8c5 1260 	str.w	r1, [r5, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003234:	e67b      	b.n	8002f2e <HAL_PCD_IRQHandler+0x7ba>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003236:	6820      	ldr	r0, [r4, #0]
 8003238:	f504 6185 	add.w	r1, r4, #1064	@ 0x428
 800323c:	f001 fdb8 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003240:	7923      	ldrb	r3, [r4, #4]
 8003242:	f7ff bb66 	b.w	8002912 <HAL_PCD_IRQHandler+0x19e>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003246:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 800324a:	4651      	mov	r1, sl
 800324c:	f001 ff04 	bl	8005058 <USB_EP0_OutStart>
 8003250:	e66d      	b.n	8002f2e <HAL_PCD_IRQHandler+0x7ba>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003252:	6820      	ldr	r0, [r4, #0]
 8003254:	f204 414c 	addw	r1, r4, #1100	@ 0x44c
 8003258:	f001 fdaa 	bl	8004db0 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800325c:	7923      	ldrb	r3, [r4, #4]
 800325e:	f7ff bb5f 	b.w	8002920 <HAL_PCD_IRQHandler+0x1ac>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003262:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8003266:	2101      	movs	r1, #1
 8003268:	f001 fef6 	bl	8005058 <USB_EP0_OutStart>
 800326c:	e65f      	b.n	8002f2e <HAL_PCD_IRQHandler+0x7ba>
 800326e:	bf00      	nop
 8003270:	4f54300a 	.word	0x4f54300a

08003274 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003274:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8003278:	2a01      	cmp	r2, #1
 800327a:	d00c      	beq.n	8003296 <HAL_PCD_SetAddress+0x22>
{
 800327c:	b510      	push	{r4, lr}
 800327e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003280:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003282:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8003284:	f884 2494 	strb.w	r2, [r4, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003288:	7461      	strb	r1, [r4, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800328a:	f001 fe71 	bl	8004f70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800328e:	2000      	movs	r0, #0
 8003290:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003294:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003296:	2002      	movs	r0, #2
}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop

0800329c <HAL_PCD_EP_Open>:
{
 800329c:	b510      	push	{r4, lr}
 800329e:	f001 0e0f 	and.w	lr, r1, #15
 80032a2:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 80032a6:	0609      	lsls	r1, r1, #24
{
 80032a8:	4604      	mov	r4, r0
 80032aa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 80032ae:	d424      	bmi.n	80032fa <HAL_PCD_EP_Open+0x5e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032b0:	f50c 7115 	add.w	r1, ip, #596	@ 0x254
 80032b4:	4401      	add	r1, r0
    ep->is_in = 0U;
 80032b6:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 80032ba:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80032be:	f04f 0c00 	mov.w	ip, #0
 80032c2:	f880 c255 	strb.w	ip, [r0, #597]	@ 0x255
  ep->maxpacket = ep_mps;
 80032c6:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80032c8:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ca:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 80032ce:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80032d0:	b10a      	cbz	r2, 80032d6 <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 80032d2:	f8a1 e01a 	strh.w	lr, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 80032d6:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80032d8:	bf04      	itt	eq
 80032da:	2300      	moveq	r3, #0
 80032dc:	714b      	strbeq	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 80032de:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d015      	beq.n	8003312 <HAL_PCD_EP_Open+0x76>
 80032e6:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032e8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80032ea:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032ee:	f001 fb91 	bl	8004a14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032f2:	2000      	movs	r0, #0
 80032f4:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80032f8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fa:	f10c 0114 	add.w	r1, ip, #20
 80032fe:	4401      	add	r1, r0
    ep->is_in = 1U;
 8003300:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8003304:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003308:	f04f 0c01 	mov.w	ip, #1
 800330c:	f880 c015 	strb.w	ip, [r0, #21]
 8003310:	e7d9      	b.n	80032c6 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8003312:	2002      	movs	r0, #2
}
 8003314:	bd10      	pop	{r4, pc}
 8003316:	bf00      	nop

08003318 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8003318:	f001 030f 	and.w	r3, r1, #15
 800331c:	f001 020f 	and.w	r2, r1, #15
{
 8003320:	b510      	push	{r4, lr}
 8003322:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003326:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8003328:	0609      	lsls	r1, r1, #24
    ep->is_in = 1U;
 800332a:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 800332e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003332:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8003336:	d415      	bmi.n	8003364 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003338:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800333c:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 800333e:	f04f 0c00 	mov.w	ip, #0
 8003342:	f880 c255 	strb.w	ip, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8003346:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003348:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800334c:	2b01      	cmp	r3, #1
 800334e:	d014      	beq.n	800337a <HAL_PCD_EP_Close+0x62>
 8003350:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003352:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003354:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003358:	f001 fba4 	bl	8004aa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800335c:	2000      	movs	r0, #0
 800335e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003362:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003364:	3314      	adds	r3, #20
 8003366:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8003368:	f04f 0c01 	mov.w	ip, #1
 800336c:	f880 c015 	strb.w	ip, [r0, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003370:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003372:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8003376:	2b01      	cmp	r3, #1
 8003378:	d1ea      	bne.n	8003350 <HAL_PCD_EP_Close+0x38>
 800337a:	2002      	movs	r0, #2
}
 800337c:	bd10      	pop	{r4, pc}
 800337e:	bf00      	nop

08003380 <HAL_PCD_EP_Receive>:
{
 8003380:	b510      	push	{r4, lr}
 8003382:	f001 0e0f 	and.w	lr, r1, #15
  ep->xfer_buff = pBuf;
 8003386:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 800338a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
{
 800338e:	4614      	mov	r4, r2
  ep->xfer_len = len;
 8003390:	f8cc 3264 	str.w	r3, [ip, #612]	@ 0x264
  ep->xfer_count = 0U;
 8003394:	2300      	movs	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8003396:	f88c e254 	strb.w	lr, [ip, #596]	@ 0x254
  ep->xfer_buff = pBuf;
 800339a:	f8cc 2260 	str.w	r2, [ip, #608]	@ 0x260
  ep->xfer_count = 0U;
 800339e:	f8cc 3268 	str.w	r3, [ip, #616]	@ 0x268
  ep->is_in = 0U;
 80033a2:	f88c 3255 	strb.w	r3, [ip, #597]	@ 0x255
  if (hpcd->Init.dma_enable == 1U)
 80033a6:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a8:	2124      	movs	r1, #36	@ 0x24
 80033aa:	fb01 010e 	mla	r1, r1, lr, r0
  if (hpcd->Init.dma_enable == 1U)
 80033ae:	2a01      	cmp	r2, #1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b0:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->dma_addr = (uint32_t)pBuf;
 80033b4:	bf08      	it	eq
 80033b6:	f8cc 4270 	streq.w	r4, [ip, #624]	@ 0x270
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033ba:	6800      	ldr	r0, [r0, #0]
 80033bc:	f001 fbd4 	bl	8004b68 <USB_EPStartXfer>
}
 80033c0:	2000      	movs	r0, #0
 80033c2:	bd10      	pop	{r4, pc}

080033c4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033c4:	f001 010f 	and.w	r1, r1, #15
 80033c8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80033cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80033d0:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop

080033d8 <HAL_PCD_EP_Transmit>:
{
 80033d8:	b510      	push	{r4, lr}
 80033da:	f001 0e0f 	and.w	lr, r1, #15
  ep->xfer_buff = pBuf;
 80033de:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 80033e2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
{
 80033e6:	4614      	mov	r4, r2
  ep->xfer_len = len;
 80033e8:	f8cc 3024 	str.w	r3, [ip, #36]	@ 0x24
  ep->xfer_count = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  ep->is_in = 1U;
 80033f2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80033f4:	f88c e014 	strb.w	lr, [ip, #20]
  ep->xfer_buff = pBuf;
 80033f8:	f8cc 2020 	str.w	r2, [ip, #32]
  ep->is_in = 1U;
 80033fc:	f88c 3015 	strb.w	r3, [ip, #21]
  if (hpcd->Init.dma_enable == 1U)
 8003400:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003402:	2124      	movs	r1, #36	@ 0x24
 8003404:	fb01 010e 	mla	r1, r1, lr, r0
  if (hpcd->Init.dma_enable == 1U)
 8003408:	429a      	cmp	r2, r3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800340a:	f101 0114 	add.w	r1, r1, #20
    ep->dma_addr = (uint32_t)pBuf;
 800340e:	bf08      	it	eq
 8003410:	f8cc 4030 	streq.w	r4, [ip, #48]	@ 0x30
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003414:	6800      	ldr	r0, [r0, #0]
 8003416:	f001 fba7 	bl	8004b68 <USB_EPStartXfer>
}
 800341a:	2000      	movs	r0, #0
 800341c:	bd10      	pop	{r4, pc}
 800341e:	bf00      	nop

08003420 <HAL_PCD_EP_SetStall>:
{
 8003420:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003422:	7903      	ldrb	r3, [r0, #4]
 8003424:	f001 050f 	and.w	r5, r1, #15
 8003428:	42ab      	cmp	r3, r5
 800342a:	d332      	bcc.n	8003492 <HAL_PCD_EP_SetStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800342c:	060b      	lsls	r3, r1, #24
 800342e:	4604      	mov	r4, r0
 8003430:	d41c      	bmi.n	800346c <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8003432:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8003436:	2224      	movs	r2, #36	@ 0x24
 8003438:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800343c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8003440:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 800344a:	2301      	movs	r3, #1
 800344c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800344e:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003450:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 8003454:	429a      	cmp	r2, r3
 8003456:	d01a      	beq.n	800348e <HAL_PCD_EP_SetStall+0x6e>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003458:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800345a:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800345e:	f001 fd2d 	bl	8004ebc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003462:	b1c5      	cbz	r5, 8003496 <HAL_PCD_EP_SetStall+0x76>
  __HAL_UNLOCK(hpcd);
 8003464:	2000      	movs	r0, #0
 8003466:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800346a:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 800346c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003470:	2124      	movs	r1, #36	@ 0x24
 8003472:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8003476:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800347a:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800347c:	3114      	adds	r1, #20
    ep->is_in = 1U;
 800347e:	755a      	strb	r2, [r3, #21]
  ep->is_stall = 1U;
 8003480:	2301      	movs	r3, #1
 8003482:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003484:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003486:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 800348a:	429a      	cmp	r2, r3
 800348c:	d1e4      	bne.n	8003458 <HAL_PCD_EP_SetStall+0x38>
 800348e:	2002      	movs	r0, #2
}
 8003490:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003492:	2001      	movs	r0, #1
}
 8003494:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003496:	79a1      	ldrb	r1, [r4, #6]
 8003498:	6820      	ldr	r0, [r4, #0]
 800349a:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800349e:	f001 fddb 	bl	8005058 <USB_EP0_OutStart>
 80034a2:	e7df      	b.n	8003464 <HAL_PCD_EP_SetStall+0x44>

080034a4 <HAL_PCD_EP_ClrStall>:
{
 80034a4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034a6:	7903      	ldrb	r3, [r0, #4]
 80034a8:	f001 020f 	and.w	r2, r1, #15
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d32e      	bcc.n	800350e <HAL_PCD_EP_ClrStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 80034b0:	4604      	mov	r4, r0
 80034b2:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 80034b6:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 80034ba:	0609      	lsls	r1, r1, #24
 80034bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ep->is_in = 1U;
 80034c0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 80034c4:	d416      	bmi.n	80034f4 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80034ca:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 80034cc:	2500      	movs	r5, #0
 80034ce:	f880 5255 	strb.w	r5, [r0, #597]	@ 0x255
  ep->is_stall = 0U;
 80034d2:	2500      	movs	r5, #0
 80034d4:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80034d8:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d014      	beq.n	800350a <HAL_PCD_EP_ClrStall+0x66>
 80034e0:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034e2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80034e4:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034e8:	f001 fd16 	bl	8004f18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034ec:	f884 5494 	strb.w	r5, [r4, #1172]	@ 0x494
  return HAL_OK;
 80034f0:	4628      	mov	r0, r5
}
 80034f2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f4:	3314      	adds	r3, #20
 80034f6:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 80034f8:	2501      	movs	r5, #1
 80034fa:	7545      	strb	r5, [r0, #21]
  ep->is_stall = 0U;
 80034fc:	2500      	movs	r5, #0
 80034fe:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003500:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003502:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8003506:	2b01      	cmp	r3, #1
 8003508:	d1ea      	bne.n	80034e0 <HAL_PCD_EP_ClrStall+0x3c>
 800350a:	2002      	movs	r0, #2
}
 800350c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800350e:	2001      	movs	r0, #1
}
 8003510:	bd38      	pop	{r3, r4, r5, pc}
 8003512:	bf00      	nop

08003514 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003514:	6800      	ldr	r0, [r0, #0]

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003516:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003518:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  if (fifo == 0U)
 800351a:	b919      	cbnz	r1, 8003524 <HAL_PCDEx_SetTxFiFo+0x10>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800351c:	4313      	orrs	r3, r2
 800351e:	6283      	str	r3, [r0, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003520:	2000      	movs	r0, #0
 8003522:	4770      	bx	lr
{
 8003524:	b430      	push	{r4, r5}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003526:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003528:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800352a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800352e:	d06b      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003530:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
    for (i = 0U; i < (fifo - 1U); i++)
 8003534:	2901      	cmp	r1, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003536:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800353a:	d065      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800353c:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    for (i = 0U; i < (fifo - 1U); i++)
 8003540:	2902      	cmp	r1, #2
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003542:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003546:	d05f      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003548:	f8d0 410c 	ldr.w	r4, [r0, #268]	@ 0x10c
    for (i = 0U; i < (fifo - 1U); i++)
 800354c:	2903      	cmp	r1, #3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800354e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003552:	d059      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003554:	f8d0 4110 	ldr.w	r4, [r0, #272]	@ 0x110
    for (i = 0U; i < (fifo - 1U); i++)
 8003558:	2904      	cmp	r1, #4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800355a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800355e:	d053      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003560:	f8d0 4114 	ldr.w	r4, [r0, #276]	@ 0x114
    for (i = 0U; i < (fifo - 1U); i++)
 8003564:	2905      	cmp	r1, #5
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003566:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800356a:	d04d      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800356c:	f8d0 4118 	ldr.w	r4, [r0, #280]	@ 0x118
    for (i = 0U; i < (fifo - 1U); i++)
 8003570:	2906      	cmp	r1, #6
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003572:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003576:	d047      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003578:	f8d0 411c 	ldr.w	r4, [r0, #284]	@ 0x11c
    for (i = 0U; i < (fifo - 1U); i++)
 800357c:	2907      	cmp	r1, #7
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800357e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003582:	d041      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003584:	f8d0 4120 	ldr.w	r4, [r0, #288]	@ 0x120
    for (i = 0U; i < (fifo - 1U); i++)
 8003588:	2908      	cmp	r1, #8
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800358a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800358e:	d03b      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003590:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
    for (i = 0U; i < (fifo - 1U); i++)
 8003594:	2909      	cmp	r1, #9
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003596:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800359a:	d035      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800359c:	f8d0 4128 	ldr.w	r4, [r0, #296]	@ 0x128
    for (i = 0U; i < (fifo - 1U); i++)
 80035a0:	290a      	cmp	r1, #10
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035a2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80035a6:	d02f      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035a8:	f8d0 412c 	ldr.w	r4, [r0, #300]	@ 0x12c
    for (i = 0U; i < (fifo - 1U); i++)
 80035ac:	290b      	cmp	r1, #11
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035ae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80035b2:	d029      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035b4:	f8d0 4130 	ldr.w	r4, [r0, #304]	@ 0x130
    for (i = 0U; i < (fifo - 1U); i++)
 80035b8:	290c      	cmp	r1, #12
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035ba:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80035be:	d023      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035c0:	f8d0 4134 	ldr.w	r4, [r0, #308]	@ 0x134
    for (i = 0U; i < (fifo - 1U); i++)
 80035c4:	290d      	cmp	r1, #13
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035c6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80035ca:	d01d      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035cc:	f8d0 4138 	ldr.w	r4, [r0, #312]	@ 0x138
    for (i = 0U; i < (fifo - 1U); i++)
 80035d0:	290e      	cmp	r1, #14
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035d2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80035d6:	d017      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035d8:	f8d0 413c 	ldr.w	r4, [r0, #316]	@ 0x13c
    for (i = 0U; i < (fifo - 1U); i++)
 80035dc:	290f      	cmp	r1, #15
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035de:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80035e2:	d011      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035e4:	f8d0 4140 	ldr.w	r4, [r0, #320]	@ 0x140
    for (i = 0U; i < (fifo - 1U); i++)
 80035e8:	2910      	cmp	r1, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035ea:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80035ee:	d00b      	beq.n	8003608 <HAL_PCDEx_SetTxFiFo+0xf4>
 80035f0:	2410      	movs	r4, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035f2:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 80035f6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 80035fa:	3401      	adds	r4, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035fc:	f8dc 5004 	ldr.w	r5, [ip, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8003600:	428c      	cmp	r4, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003602:	eb03 4315 	add.w	r3, r3, r5, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003606:	d3f4      	bcc.n	80035f2 <HAL_PCDEx_SetTxFiFo+0xde>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003608:	3140      	adds	r1, #64	@ 0x40
 800360a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800360e:	431a      	orrs	r2, r3
}
 8003610:	2000      	movs	r0, #0
 8003612:	bc30      	pop	{r4, r5}
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003614:	604a      	str	r2, [r1, #4]
}
 8003616:	4770      	bx	lr

08003618 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003618:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 800361a:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800361c:	6259      	str	r1, [r3, #36]	@ 0x24
}
 800361e:	4770      	bx	lr

08003620 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop

08003624 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003624:	2800      	cmp	r0, #0
 8003626:	f000 81d8 	beq.w	80039da <HAL_RCC_OscConfig+0x3b6>
{
 800362a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362e:	6803      	ldr	r3, [r0, #0]
 8003630:	07dd      	lsls	r5, r3, #31
{
 8003632:	b082      	sub	sp, #8
 8003634:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003636:	d52f      	bpl.n	8003698 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003638:	499d      	ldr	r1, [pc, #628]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
 800363a:	688a      	ldr	r2, [r1, #8]
 800363c:	f002 020c 	and.w	r2, r2, #12
 8003640:	2a04      	cmp	r2, #4
 8003642:	f000 80ec 	beq.w	800381e <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003646:	688a      	ldr	r2, [r1, #8]
 8003648:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800364c:	2a08      	cmp	r2, #8
 800364e:	f000 80e2 	beq.w	8003816 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003652:	6863      	ldr	r3, [r4, #4]
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003658:	f000 80eb 	beq.w	8003832 <HAL_RCC_OscConfig+0x20e>
 800365c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003660:	f000 8173 	beq.w	800394a <HAL_RCC_OscConfig+0x326>
 8003664:	4d92      	ldr	r5, [pc, #584]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
 8003666:	682a      	ldr	r2, [r5, #0]
 8003668:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800366c:	602a      	str	r2, [r5, #0]
 800366e:	682a      	ldr	r2, [r5, #0]
 8003670:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003674:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003676:	2b00      	cmp	r3, #0
 8003678:	f040 80e0 	bne.w	800383c <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fd fe24 	bl	80012c8 <HAL_GetTick>
 8003680:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003682:	e005      	b.n	8003690 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003684:	f7fd fe20 	bl	80012c8 <HAL_GetTick>
 8003688:	1b80      	subs	r0, r0, r6
 800368a:	2864      	cmp	r0, #100	@ 0x64
 800368c:	f200 8100 	bhi.w	8003890 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003690:	682b      	ldr	r3, [r5, #0]
 8003692:	039f      	lsls	r7, r3, #14
 8003694:	d4f6      	bmi.n	8003684 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	079d      	lsls	r5, r3, #30
 800369a:	d528      	bpl.n	80036ee <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800369c:	4a84      	ldr	r2, [pc, #528]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
 800369e:	6891      	ldr	r1, [r2, #8]
 80036a0:	f011 0f0c 	tst.w	r1, #12
 80036a4:	f000 809b 	beq.w	80037de <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a8:	6891      	ldr	r1, [r2, #8]
 80036aa:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ae:	2908      	cmp	r1, #8
 80036b0:	f000 8091 	beq.w	80037d6 <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036b4:	68e3      	ldr	r3, [r4, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 810c 	beq.w	80038d4 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036bc:	4b7d      	ldr	r3, [pc, #500]	@ (80038b4 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036be:	4e7c      	ldr	r6, [pc, #496]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80036c0:	2201      	movs	r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80036c4:	f7fd fe00 	bl	80012c8 <HAL_GetTick>
 80036c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ca:	e005      	b.n	80036d8 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036cc:	f7fd fdfc 	bl	80012c8 <HAL_GetTick>
 80036d0:	1b40      	subs	r0, r0, r5
 80036d2:	2802      	cmp	r0, #2
 80036d4:	f200 80dc 	bhi.w	8003890 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	6833      	ldr	r3, [r6, #0]
 80036da:	079f      	lsls	r7, r3, #30
 80036dc:	d5f6      	bpl.n	80036cc <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036de:	6833      	ldr	r3, [r6, #0]
 80036e0:	6922      	ldr	r2, [r4, #16]
 80036e2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80036e6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80036ea:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	071a      	lsls	r2, r3, #28
 80036f0:	d45c      	bmi.n	80037ac <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f2:	075d      	lsls	r5, r3, #29
 80036f4:	d53a      	bpl.n	800376c <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f6:	4a6e      	ldr	r2, [pc, #440]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
 80036f8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80036fa:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 80036fe:	f040 8088 	bne.w	8003812 <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800370a:	6413      	str	r3, [r2, #64]	@ 0x40
 800370c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800370e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003716:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003718:	4e67      	ldr	r6, [pc, #412]	@ (80038b8 <HAL_RCC_OscConfig+0x294>)
 800371a:	6833      	ldr	r3, [r6, #0]
 800371c:	05d8      	lsls	r0, r3, #23
 800371e:	f140 80a7 	bpl.w	8003870 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003722:	68a3      	ldr	r3, [r4, #8]
 8003724:	2b01      	cmp	r3, #1
 8003726:	f000 80b7 	beq.w	8003898 <HAL_RCC_OscConfig+0x274>
 800372a:	2b05      	cmp	r3, #5
 800372c:	f000 811d 	beq.w	800396a <HAL_RCC_OscConfig+0x346>
 8003730:	4e5f      	ldr	r6, [pc, #380]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
 8003732:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	6732      	str	r2, [r6, #112]	@ 0x70
 800373a:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 800373c:	f022 0204 	bic.w	r2, r2, #4
 8003740:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003742:	2b00      	cmp	r3, #0
 8003744:	f040 80ad 	bne.w	80038a2 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003748:	f7fd fdbe 	bl	80012c8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800374c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003750:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003752:	e005      	b.n	8003760 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003754:	f7fd fdb8 	bl	80012c8 <HAL_GetTick>
 8003758:	1bc0      	subs	r0, r0, r7
 800375a:	4540      	cmp	r0, r8
 800375c:	f200 8098 	bhi.w	8003890 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003760:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003762:	079b      	lsls	r3, r3, #30
 8003764:	d4f6      	bmi.n	8003754 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003766:	2d00      	cmp	r5, #0
 8003768:	f040 80f9 	bne.w	800395e <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800376c:	69a3      	ldr	r3, [r4, #24]
 800376e:	b1cb      	cbz	r3, 80037a4 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003770:	4d4f      	ldr	r5, [pc, #316]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
 8003772:	68aa      	ldr	r2, [r5, #8]
 8003774:	f002 020c 	and.w	r2, r2, #12
 8003778:	2a08      	cmp	r2, #8
 800377a:	f000 80bc 	beq.w	80038f6 <HAL_RCC_OscConfig+0x2d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377e:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003780:	4b4c      	ldr	r3, [pc, #304]	@ (80038b4 <HAL_RCC_OscConfig+0x290>)
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003788:	f000 80f9 	beq.w	800397e <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fd fd9c 	bl	80012c8 <HAL_GetTick>
 8003790:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	e004      	b.n	800379e <HAL_RCC_OscConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fd fd98 	bl	80012c8 <HAL_GetTick>
 8003798:	1b00      	subs	r0, r0, r4
 800379a:	2802      	cmp	r0, #2
 800379c:	d878      	bhi.n	8003890 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	682b      	ldr	r3, [r5, #0]
 80037a0:	019b      	lsls	r3, r3, #6
 80037a2:	d4f7      	bmi.n	8003794 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80037a4:	2000      	movs	r0, #0
}
 80037a6:	b002      	add	sp, #8
 80037a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ac:	6963      	ldr	r3, [r4, #20]
 80037ae:	b1fb      	cbz	r3, 80037f0 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 80037b0:	4b40      	ldr	r3, [pc, #256]	@ (80038b4 <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b2:	4e3f      	ldr	r6, [pc, #252]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 80037b4:	2201      	movs	r2, #1
 80037b6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80037ba:	f7fd fd85 	bl	80012c8 <HAL_GetTick>
 80037be:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c0:	e004      	b.n	80037cc <HAL_RCC_OscConfig+0x1a8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c2:	f7fd fd81 	bl	80012c8 <HAL_GetTick>
 80037c6:	1b40      	subs	r0, r0, r5
 80037c8:	2802      	cmp	r0, #2
 80037ca:	d861      	bhi.n	8003890 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037cc:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80037ce:	079b      	lsls	r3, r3, #30
 80037d0:	d5f7      	bpl.n	80037c2 <HAL_RCC_OscConfig+0x19e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	e78d      	b.n	80036f2 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d6:	6852      	ldr	r2, [r2, #4]
 80037d8:	0251      	lsls	r1, r2, #9
 80037da:	f53f af6b 	bmi.w	80036b4 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037de:	4a34      	ldr	r2, [pc, #208]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	0792      	lsls	r2, r2, #30
 80037e4:	d538      	bpl.n	8003858 <HAL_RCC_OscConfig+0x234>
 80037e6:	68e2      	ldr	r2, [r4, #12]
 80037e8:	2a01      	cmp	r2, #1
 80037ea:	d035      	beq.n	8003858 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 80037ec:	2001      	movs	r0, #1
 80037ee:	e7da      	b.n	80037a6 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 80037f0:	4a30      	ldr	r2, [pc, #192]	@ (80038b4 <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f2:	4e2f      	ldr	r6, [pc, #188]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 80037f4:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80037f8:	f7fd fd66 	bl	80012c8 <HAL_GetTick>
 80037fc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037fe:	e004      	b.n	800380a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003800:	f7fd fd62 	bl	80012c8 <HAL_GetTick>
 8003804:	1b40      	subs	r0, r0, r5
 8003806:	2802      	cmp	r0, #2
 8003808:	d842      	bhi.n	8003890 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380a:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800380c:	079f      	lsls	r7, r3, #30
 800380e:	d4f7      	bmi.n	8003800 <HAL_RCC_OscConfig+0x1dc>
 8003810:	e7df      	b.n	80037d2 <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8003812:	2500      	movs	r5, #0
 8003814:	e780      	b.n	8003718 <HAL_RCC_OscConfig+0xf4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003816:	684a      	ldr	r2, [r1, #4]
 8003818:	0251      	lsls	r1, r2, #9
 800381a:	f57f af1a 	bpl.w	8003652 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381e:	4a24      	ldr	r2, [pc, #144]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	0392      	lsls	r2, r2, #14
 8003824:	f57f af38 	bpl.w	8003698 <HAL_RCC_OscConfig+0x74>
 8003828:	6862      	ldr	r2, [r4, #4]
 800382a:	2a00      	cmp	r2, #0
 800382c:	f47f af34 	bne.w	8003698 <HAL_RCC_OscConfig+0x74>
 8003830:	e7dc      	b.n	80037ec <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003832:	4a1f      	ldr	r2, [pc, #124]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
 8003834:	6813      	ldr	r3, [r2, #0]
 8003836:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800383a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800383c:	f7fd fd44 	bl	80012c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003840:	4e1b      	ldr	r6, [pc, #108]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8003842:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003844:	e004      	b.n	8003850 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003846:	f7fd fd3f 	bl	80012c8 <HAL_GetTick>
 800384a:	1b40      	subs	r0, r0, r5
 800384c:	2864      	cmp	r0, #100	@ 0x64
 800384e:	d81f      	bhi.n	8003890 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003850:	6833      	ldr	r3, [r6, #0]
 8003852:	039b      	lsls	r3, r3, #14
 8003854:	d5f7      	bpl.n	8003846 <HAL_RCC_OscConfig+0x222>
 8003856:	e71e      	b.n	8003696 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003858:	4915      	ldr	r1, [pc, #84]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
 800385a:	6920      	ldr	r0, [r4, #16]
 800385c:	680a      	ldr	r2, [r1, #0]
 800385e:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8003862:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003866:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003868:	071a      	lsls	r2, r3, #28
 800386a:	f57f af42 	bpl.w	80036f2 <HAL_RCC_OscConfig+0xce>
 800386e:	e79d      	b.n	80037ac <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003870:	6833      	ldr	r3, [r6, #0]
 8003872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003876:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003878:	f7fd fd26 	bl	80012c8 <HAL_GetTick>
 800387c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387e:	6833      	ldr	r3, [r6, #0]
 8003880:	05d9      	lsls	r1, r3, #23
 8003882:	f53f af4e 	bmi.w	8003722 <HAL_RCC_OscConfig+0xfe>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7fd fd1f 	bl	80012c8 <HAL_GetTick>
 800388a:	1bc0      	subs	r0, r0, r7
 800388c:	2802      	cmp	r0, #2
 800388e:	d9f6      	bls.n	800387e <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8003890:	2003      	movs	r0, #3
}
 8003892:	b002      	add	sp, #8
 8003894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003898:	4a05      	ldr	r2, [pc, #20]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
 800389a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80038a2:	f7fd fd11 	bl	80012c8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a6:	4f02      	ldr	r7, [pc, #8]	@ (80038b0 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80038a8:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038aa:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_OscConfig+0x2a2>
 80038b0:	40023800 	.word	0x40023800
 80038b4:	42470000 	.word	0x42470000
 80038b8:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fd fd04 	bl	80012c8 <HAL_GetTick>
 80038c0:	1b80      	subs	r0, r0, r6
 80038c2:	4540      	cmp	r0, r8
 80038c4:	d8e4      	bhi.n	8003890 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038c8:	079a      	lsls	r2, r3, #30
 80038ca:	d5f7      	bpl.n	80038bc <HAL_RCC_OscConfig+0x298>
    if(pwrclkchanged == SET)
 80038cc:	2d00      	cmp	r5, #0
 80038ce:	f43f af4d 	beq.w	800376c <HAL_RCC_OscConfig+0x148>
 80038d2:	e044      	b.n	800395e <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 80038d4:	4a42      	ldr	r2, [pc, #264]	@ (80039e0 <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	4e43      	ldr	r6, [pc, #268]	@ (80039e4 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 80038d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80038da:	f7fd fcf5 	bl	80012c8 <HAL_GetTick>
 80038de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e0:	e004      	b.n	80038ec <HAL_RCC_OscConfig+0x2c8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e2:	f7fd fcf1 	bl	80012c8 <HAL_GetTick>
 80038e6:	1b40      	subs	r0, r0, r5
 80038e8:	2802      	cmp	r0, #2
 80038ea:	d8d1      	bhi.n	8003890 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ec:	6833      	ldr	r3, [r6, #0]
 80038ee:	0799      	lsls	r1, r3, #30
 80038f0:	d4f7      	bmi.n	80038e2 <HAL_RCC_OscConfig+0x2be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	e6fb      	b.n	80036ee <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	f43f af78 	beq.w	80037ec <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 80038fc:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fe:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003900:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003904:	4291      	cmp	r1, r2
 8003906:	f47f af71 	bne.w	80037ec <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390a:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800390c:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003910:	4291      	cmp	r1, r2
 8003912:	f47f af6b 	bne.w	80037ec <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003916:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003918:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800391c:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800391e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003922:	f47f af63 	bne.w	80037ec <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003926:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003928:	0852      	lsrs	r2, r2, #1
 800392a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800392e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003930:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003934:	f47f af5a 	bne.w	80037ec <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003938:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800393a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800393e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003942:	bf14      	ite	ne
 8003944:	2001      	movne	r0, #1
 8003946:	2000      	moveq	r0, #0
 8003948:	e72d      	b.n	80037a6 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394a:	4b26      	ldr	r3, [pc, #152]	@ (80039e4 <HAL_RCC_OscConfig+0x3c0>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800395a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800395c:	e76e      	b.n	800383c <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 800395e:	4a21      	ldr	r2, [pc, #132]	@ (80039e4 <HAL_RCC_OscConfig+0x3c0>)
 8003960:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003966:	6413      	str	r3, [r2, #64]	@ 0x40
 8003968:	e700      	b.n	800376c <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800396a:	4b1e      	ldr	r3, [pc, #120]	@ (80039e4 <HAL_RCC_OscConfig+0x3c0>)
 800396c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800396e:	f042 0204 	orr.w	r2, r2, #4
 8003972:	671a      	str	r2, [r3, #112]	@ 0x70
 8003974:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800397c:	e791      	b.n	80038a2 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 800397e:	f7fd fca3 	bl	80012c8 <HAL_GetTick>
 8003982:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003984:	e005      	b.n	8003992 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003986:	f7fd fc9f 	bl	80012c8 <HAL_GetTick>
 800398a:	1b80      	subs	r0, r0, r6
 800398c:	2802      	cmp	r0, #2
 800398e:	f63f af7f 	bhi.w	8003890 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	0199      	lsls	r1, r3, #6
 8003996:	d4f6      	bmi.n	8003986 <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003998:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800399c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800399e:	430b      	orrs	r3, r1
 80039a0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80039a4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 80039a8:	0852      	lsrs	r2, r2, #1
 80039aa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80039ae:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80039b0:	490b      	ldr	r1, [pc, #44]	@ (80039e0 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80039b6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039b8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80039ba:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80039bc:	f7fd fc84 	bl	80012c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c0:	4d08      	ldr	r5, [pc, #32]	@ (80039e4 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 80039c2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c4:	e005      	b.n	80039d2 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c6:	f7fd fc7f 	bl	80012c8 <HAL_GetTick>
 80039ca:	1b00      	subs	r0, r0, r4
 80039cc:	2802      	cmp	r0, #2
 80039ce:	f63f af5f 	bhi.w	8003890 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d2:	682b      	ldr	r3, [r5, #0]
 80039d4:	019a      	lsls	r2, r3, #6
 80039d6:	d5f6      	bpl.n	80039c6 <HAL_RCC_OscConfig+0x3a2>
 80039d8:	e6e4      	b.n	80037a4 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 80039da:	2001      	movs	r0, #1
}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	42470000 	.word	0x42470000
 80039e4:	40023800 	.word	0x40023800

080039e8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039e8:	4910      	ldr	r1, [pc, #64]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x44>)
{
 80039ea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ec:	688b      	ldr	r3, [r1, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d001      	beq.n	80039fa <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f6:	480e      	ldr	r0, [pc, #56]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80039f8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039fa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039fc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039fe:	6849      	ldr	r1, [r1, #4]
 8003a00:	480b      	ldr	r0, [pc, #44]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x48>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a02:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a06:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003a0a:	bf18      	it	ne
 8003a0c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a0e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a12:	fba1 0100 	umull	r0, r1, r1, r0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a16:	f7fc fc3b 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a1a:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x44>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003a22:	3301      	adds	r3, #1
 8003a24:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003a26:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003a2a:	bd08      	pop	{r3, pc}
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	00f42400 	.word	0x00f42400

08003a34 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003a34:	2800      	cmp	r0, #0
 8003a36:	f000 8087 	beq.w	8003b48 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a3a:	4a48      	ldr	r2, [pc, #288]	@ (8003b5c <HAL_RCC_ClockConfig+0x128>)
 8003a3c:	6813      	ldr	r3, [r2, #0]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	428b      	cmp	r3, r1
{
 8003a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a48:	460d      	mov	r5, r1
 8003a4a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a4c:	d209      	bcs.n	8003a62 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4e:	b2cb      	uxtb	r3, r1
 8003a50:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	6813      	ldr	r3, [r2, #0]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	428b      	cmp	r3, r1
 8003a5a:	d002      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003a5c:	2001      	movs	r0, #1
}
 8003a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	0798      	lsls	r0, r3, #30
 8003a66:	d514      	bpl.n	8003a92 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	0759      	lsls	r1, r3, #29
 8003a6a:	d504      	bpl.n	8003a76 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a6c:	493c      	ldr	r1, [pc, #240]	@ (8003b60 <HAL_RCC_ClockConfig+0x12c>)
 8003a6e:	688a      	ldr	r2, [r1, #8]
 8003a70:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8003a74:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a76:	071a      	lsls	r2, r3, #28
 8003a78:	d504      	bpl.n	8003a84 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a7a:	4939      	ldr	r1, [pc, #228]	@ (8003b60 <HAL_RCC_ClockConfig+0x12c>)
 8003a7c:	688a      	ldr	r2, [r1, #8]
 8003a7e:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8003a82:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a84:	4936      	ldr	r1, [pc, #216]	@ (8003b60 <HAL_RCC_ClockConfig+0x12c>)
 8003a86:	68a0      	ldr	r0, [r4, #8]
 8003a88:	688a      	ldr	r2, [r1, #8]
 8003a8a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003a8e:	4302      	orrs	r2, r0
 8003a90:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	07df      	lsls	r7, r3, #31
 8003a94:	d521      	bpl.n	8003ada <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a96:	6862      	ldr	r2, [r4, #4]
 8003a98:	2a01      	cmp	r2, #1
 8003a9a:	d057      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9c:	1e93      	subs	r3, r2, #2
 8003a9e:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8003b60 <HAL_RCC_ClockConfig+0x12c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa4:	d94d      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa6:	0799      	lsls	r1, r3, #30
 8003aa8:	d5d8      	bpl.n	8003a5c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aaa:	4e2d      	ldr	r6, [pc, #180]	@ (8003b60 <HAL_RCC_ClockConfig+0x12c>)
 8003aac:	68b3      	ldr	r3, [r6, #8]
 8003aae:	f023 0303 	bic.w	r3, r3, #3
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003ab6:	f7fd fc07 	bl	80012c8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aba:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8003abe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac0:	e004      	b.n	8003acc <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac2:	f7fd fc01 	bl	80012c8 <HAL_GetTick>
 8003ac6:	1bc0      	subs	r0, r0, r7
 8003ac8:	4540      	cmp	r0, r8
 8003aca:	d844      	bhi.n	8003b56 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003acc:	68b3      	ldr	r3, [r6, #8]
 8003ace:	6862      	ldr	r2, [r4, #4]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ad8:	d1f3      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ada:	4a20      	ldr	r2, [pc, #128]	@ (8003b5c <HAL_RCC_ClockConfig+0x128>)
 8003adc:	6813      	ldr	r3, [r2, #0]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	42ab      	cmp	r3, r5
 8003ae4:	d906      	bls.n	8003af4 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	b2eb      	uxtb	r3, r5
 8003ae8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	6813      	ldr	r3, [r2, #0]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	42ab      	cmp	r3, r5
 8003af2:	d1b3      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	075a      	lsls	r2, r3, #29
 8003af8:	d506      	bpl.n	8003b08 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003afa:	4919      	ldr	r1, [pc, #100]	@ (8003b60 <HAL_RCC_ClockConfig+0x12c>)
 8003afc:	68e0      	ldr	r0, [r4, #12]
 8003afe:	688a      	ldr	r2, [r1, #8]
 8003b00:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8003b04:	4302      	orrs	r2, r0
 8003b06:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b08:	071b      	lsls	r3, r3, #28
 8003b0a:	d507      	bpl.n	8003b1c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b0c:	4a14      	ldr	r2, [pc, #80]	@ (8003b60 <HAL_RCC_ClockConfig+0x12c>)
 8003b0e:	6921      	ldr	r1, [r4, #16]
 8003b10:	6893      	ldr	r3, [r2, #8]
 8003b12:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003b16:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b1a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b1c:	f7ff ff64 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8003b20:	4a0f      	ldr	r2, [pc, #60]	@ (8003b60 <HAL_RCC_ClockConfig+0x12c>)
 8003b22:	4c10      	ldr	r4, [pc, #64]	@ (8003b64 <HAL_RCC_ClockConfig+0x130>)
 8003b24:	6892      	ldr	r2, [r2, #8]
 8003b26:	4910      	ldr	r1, [pc, #64]	@ (8003b68 <HAL_RCC_ClockConfig+0x134>)
 8003b28:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8003b30:	480e      	ldr	r0, [pc, #56]	@ (8003b6c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b32:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8003b34:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b36:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8003b38:	f7fd fb7c 	bl	8001234 <HAL_InitTick>
  return HAL_OK;
 8003b3c:	2000      	movs	r0, #0
}
 8003b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b42:	0198      	lsls	r0, r3, #6
 8003b44:	d4b1      	bmi.n	8003aaa <HAL_RCC_ClockConfig+0x76>
 8003b46:	e789      	b.n	8003a5c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003b48:	2001      	movs	r0, #1
}
 8003b4a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4c:	4b04      	ldr	r3, [pc, #16]	@ (8003b60 <HAL_RCC_ClockConfig+0x12c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	039e      	lsls	r6, r3, #14
 8003b52:	d4aa      	bmi.n	8003aaa <HAL_RCC_ClockConfig+0x76>
 8003b54:	e782      	b.n	8003a5c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8003b56:	2003      	movs	r0, #3
 8003b58:	e781      	b.n	8003a5e <HAL_RCC_ClockConfig+0x2a>
 8003b5a:	bf00      	nop
 8003b5c:	40023c00 	.word	0x40023c00
 8003b60:	40023800 	.word	0x40023800
 8003b64:	0800725c 	.word	0x0800725c
 8003b68:	20000000 	.word	0x20000000
 8003b6c:	20000008 	.word	0x20000008

08003b70 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003b70:	4b01      	ldr	r3, [pc, #4]	@ (8003b78 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000000 	.word	0x20000000

08003b7c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b7c:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003b7e:	4905      	ldr	r1, [pc, #20]	@ (8003b94 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4a05      	ldr	r2, [pc, #20]	@ (8003b98 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003b84:	6808      	ldr	r0, [r1, #0]
 8003b86:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003b8a:	5cd3      	ldrb	r3, [r2, r3]
}
 8003b8c:	40d8      	lsrs	r0, r3
 8003b8e:	4770      	bx	lr
 8003b90:	40023800 	.word	0x40023800
 8003b94:	20000000 	.word	0x20000000
 8003b98:	08007254 	.word	0x08007254

08003b9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	4698      	mov	r8, r3
 8003ba4:	4615      	mov	r5, r2
 8003ba6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8003ba8:	4607      	mov	r7, r0
 8003baa:	460c      	mov	r4, r1
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bac:	f7fd fb8c 	bl	80012c8 <HAL_GetTick>
 8003bb0:	4446      	add	r6, r8
 8003bb2:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8003bb4:	f7fd fb88 	bl	80012c8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8003c6c <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	f3c2 32cb 	ubfx	r2, r2, #15, #12
 8003bc0:	fb06 f202 	mul.w	r2, r6, r2
 8003bc4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8003bc8:	9201      	str	r2, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bca:	bf18      	it	ne
 8003bcc:	4681      	movne	r9, r0
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	d11a      	bne.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8003bd2:	6893      	ldr	r3, [r2, #8]
 8003bd4:	ea34 0303 	bics.w	r3, r4, r3
 8003bd8:	bf0c      	ite	eq
 8003bda:	2301      	moveq	r3, #1
 8003bdc:	2300      	movne	r3, #0
 8003bde:	429d      	cmp	r5, r3
 8003be0:	d1f7      	bne.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0x36>
      }
      count--;
    }
  }

  return HAL_OK;
 8003be2:	2000      	movs	r0, #0
}
 8003be4:	b003      	add	sp, #12
 8003be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bea:	f7fd fb6d 	bl	80012c8 <HAL_GetTick>
 8003bee:	eba0 0009 	sub.w	r0, r0, r9
 8003bf2:	42b0      	cmp	r0, r6
 8003bf4:	d211      	bcs.n	8003c1a <SPI_WaitFlagStateUntilTimeout+0x7e>
      if (count == 0U)
 8003bf6:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bf8:	683a      	ldr	r2, [r7, #0]
        tmp_timeout = 0U;
 8003bfa:	2b00      	cmp	r3, #0
      count--;
 8003bfc:	9b01      	ldr	r3, [sp, #4]
 8003bfe:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
        tmp_timeout = 0U;
 8003c02:	bf08      	it	eq
 8003c04:	2600      	moveq	r6, #0
      count--;
 8003c06:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c08:	6893      	ldr	r3, [r2, #8]
 8003c0a:	ea34 0303 	bics.w	r3, r4, r3
 8003c0e:	bf0c      	ite	eq
 8003c10:	2301      	moveq	r3, #1
 8003c12:	2300      	movne	r3, #0
 8003c14:	42ab      	cmp	r3, r5
 8003c16:	d1e8      	bne.n	8003bea <SPI_WaitFlagStateUntilTimeout+0x4e>
 8003c18:	e7e3      	b.n	8003be2 <SPI_WaitFlagStateUntilTimeout+0x46>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c1a:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c1e:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c20:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c28:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c2a:	d013      	beq.n	8003c54 <SPI_WaitFlagStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c2e:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003c32:	d107      	bne.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0xa8>
          SPI_RESET_CRC(hspi);
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c42:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003c44:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8003c46:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8003c48:	f887 2051 	strb.w	r2, [r7, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003c4c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8003c50:	2003      	movs	r0, #3
 8003c52:	e7c7      	b.n	8003be4 <SPI_WaitFlagStateUntilTimeout+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8003c5a:	d002      	beq.n	8003c62 <SPI_WaitFlagStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c5c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003c60:	d1e4      	bne.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0x90>
          __HAL_SPI_DISABLE(hspi);
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	e7df      	b.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0x90>
 8003c6c:	20000000 	.word	0x20000000

08003c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	460f      	mov	r7, r1
 8003c78:	4690      	mov	r8, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c7a:	9200      	str	r2, [sp, #0]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	2201      	movs	r2, #1
 8003c80:	2102      	movs	r1, #2
{
 8003c82:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c84:	f7ff ff8a 	bl	8003b9c <SPI_WaitFlagStateUntilTimeout>
 8003c88:	bb40      	cbnz	r0, 8003cdc <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c8a:	4b19      	ldr	r3, [pc, #100]	@ (8003cf0 <SPI_EndRxTxTransaction+0x80>)
 8003c8c:	681d      	ldr	r5, [r3, #0]
 8003c8e:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <SPI_EndRxTxTransaction+0x84>)
 8003c90:	fba3 3505 	umull	r3, r5, r3, r5
 8003c94:	0d6d      	lsrs	r5, r5, #21
 8003c96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c9a:	fb03 f505 	mul.w	r5, r3, r5
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c9e:	6863      	ldr	r3, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ca0:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ca2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ca6:	4606      	mov	r6, r0
 8003ca8:	d107      	bne.n	8003cba <SPI_EndRxTxTransaction+0x4a>
 8003caa:	e00d      	b.n	8003cc8 <SPI_EndRxTxTransaction+0x58>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8003cac:	9b03      	ldr	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cae:	6821      	ldr	r1, [r4, #0]
      count--;
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cb4:	688b      	ldr	r3, [r1, #8]
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	d502      	bpl.n	8003cc0 <SPI_EndRxTxTransaction+0x50>
      if (count == 0U)
 8003cba:	9b03      	ldr	r3, [sp, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f5      	bne.n	8003cac <SPI_EndRxTxTransaction+0x3c>
  }

  return HAL_OK;
}
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	b004      	add	sp, #16
 8003cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cc8:	4602      	mov	r2, r0
 8003cca:	f8cd 8000 	str.w	r8, [sp]
 8003cce:	463b      	mov	r3, r7
 8003cd0:	2180      	movs	r1, #128	@ 0x80
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f7ff ff62 	bl	8003b9c <SPI_WaitFlagStateUntilTimeout>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d0f1      	beq.n	8003cc0 <SPI_EndRxTxTransaction+0x50>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cdc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003cde:	2603      	movs	r6, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce0:	f043 0320 	orr.w	r3, r3, #32
}
 8003ce4:	4630      	mov	r0, r6
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce6:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8003ce8:	b004      	add	sp, #16
 8003cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000000 	.word	0x20000000
 8003cf4:	165e9f81 	.word	0x165e9f81

08003cf8 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d05c      	beq.n	8003db6 <HAL_SPI_Init+0xbe>
{
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d00:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d047      	beq.n	8003d96 <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d0c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d10:	2200      	movs	r2, #0
 8003d12:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d14:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d042      	beq.n	8003da2 <HAL_SPI_Init+0xaa>
 8003d1c:	4694      	mov	ip, r2
  __HAL_SPI_DISABLE(hspi);
 8003d1e:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d20:	68a5      	ldr	r5, [r4, #8]
 8003d22:	69a2      	ldr	r2, [r4, #24]
 8003d24:	6a26      	ldr	r6, [r4, #32]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8003d2c:	680b      	ldr	r3, [r1, #0]
 8003d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d32:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d34:	6863      	ldr	r3, [r4, #4]
 8003d36:	f405 4504 	and.w	r5, r5, #33792	@ 0x8400
 8003d3a:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8003d3e:	432b      	orrs	r3, r5
 8003d40:	68e5      	ldr	r5, [r4, #12]
 8003d42:	f405 6500 	and.w	r5, r5, #2048	@ 0x800
 8003d46:	432b      	orrs	r3, r5
 8003d48:	6925      	ldr	r5, [r4, #16]
 8003d4a:	f005 0502 	and.w	r5, r5, #2
 8003d4e:	432b      	orrs	r3, r5
 8003d50:	6965      	ldr	r5, [r4, #20]
 8003d52:	f005 0501 	and.w	r5, r5, #1
 8003d56:	432b      	orrs	r3, r5
 8003d58:	69e5      	ldr	r5, [r4, #28]
 8003d5a:	f006 0e80 	and.w	lr, r6, #128	@ 0x80
 8003d5e:	f402 7600 	and.w	r6, r2, #512	@ 0x200
 8003d62:	f005 0538 	and.w	r5, r5, #56	@ 0x38
 8003d66:	4333      	orrs	r3, r6
 8003d68:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d6a:	0c12      	lsrs	r2, r2, #16
 8003d6c:	f000 0010 	and.w	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d70:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d74:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d78:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d7c:	4302      	orrs	r2, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d7e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d80:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d82:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d84:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8003d8a:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d8c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d8e:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d90:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
}
 8003d94:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d96:	6863      	ldr	r3, [r4, #4]
 8003d98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d9c:	d0b6      	beq.n	8003d0c <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d9e:	61e0      	str	r0, [r4, #28]
 8003da0:	e7b4      	b.n	8003d0c <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8003da2:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003da4:	f884 1050 	strb.w	r1, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8003da8:	f7fd f94a 	bl	8001040 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dac:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	@ 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003db0:	f403 5c00 	and.w	ip, r3, #8192	@ 0x2000
 8003db4:	e7b3      	b.n	8003d1e <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8003db6:	2001      	movs	r0, #1
}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop

08003dbc <HAL_SPI_Transmit>:
{
 8003dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003dc0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003dc2:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 8003dc6:	2801      	cmp	r0, #1
{
 8003dc8:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8003dca:	d079      	beq.n	8003ec0 <HAL_SPI_Transmit+0x104>
 8003dcc:	461d      	mov	r5, r3
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8003dd4:	4689      	mov	r9, r1
 8003dd6:	4690      	mov	r8, r2
 8003dd8:	f7fd fa76 	bl	80012c8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003ddc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003de0:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003de2:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003de4:	b2df      	uxtb	r7, r3
 8003de6:	d007      	beq.n	8003df8 <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 8003de8:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4638      	mov	r0, r7
  __HAL_UNLOCK(hspi);
 8003dee:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8003df2:	b003      	add	sp, #12
 8003df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 8003df8:	f1b9 0f00 	cmp.w	r9, #0
 8003dfc:	d0f5      	beq.n	8003dea <HAL_SPI_Transmit+0x2e>
 8003dfe:	f1b8 0f00 	cmp.w	r8, #0
 8003e02:	d0f2      	beq.n	8003dea <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e04:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8003e06:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e08:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e0c:	2200      	movs	r2, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e0e:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e14:	f884 1051 	strb.w	r1, [r4, #81]	@ 0x51
  hspi->RxISR       = NULL;
 8003e18:	e9c4 2210 	strd	r2, r2, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e1c:	6562      	str	r2, [r4, #84]	@ 0x54
  hspi->TxXferSize  = Size;
 8003e1e:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e22:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e26:	63a2      	str	r2, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e28:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e2a:	87e2      	strh	r2, [r4, #62]	@ 0x3e
    __HAL_SPI_DISABLE(hspi);
 8003e2c:	4684      	mov	ip, r0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e2e:	d078      	beq.n	8003f22 <HAL_SPI_Transmit+0x166>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e30:	6803      	ldr	r3, [r0, #0]
 8003e32:	065b      	lsls	r3, r3, #25
 8003e34:	d403      	bmi.n	8003e3e <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 8003e36:	6803      	ldr	r3, [r0, #0]
 8003e38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e3c:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e3e:	68e3      	ldr	r3, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e40:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e46:	d040      	beq.n	8003eca <HAL_SPI_Transmit+0x10e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e48:	2a00      	cmp	r2, #0
 8003e4a:	f000 808f 	beq.w	8003f6c <HAL_SPI_Transmit+0x1b0>
 8003e4e:	f1b8 0f01 	cmp.w	r8, #1
 8003e52:	f000 808b 	beq.w	8003f6c <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 8003e56:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	b1c3      	cbz	r3, 8003e8e <HAL_SPI_Transmit+0xd2>
 8003e5c:	1c68      	adds	r0, r5, #1
 8003e5e:	d177      	bne.n	8003f50 <HAL_SPI_Transmit+0x194>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	0791      	lsls	r1, r2, #30
 8003e66:	f140 808c 	bpl.w	8003f82 <HAL_SPI_Transmit+0x1c6>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e6a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8003e70:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e76:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8003e7a:	fa1f fc8c 	uxth.w	ip, ip
 8003e7e:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8003e82:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e84:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 8003e86:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e88:	6323      	str	r3, [r4, #48]	@ 0x30
    while (hspi->TxXferCount > 0U)
 8003e8a:	2900      	cmp	r1, #0
 8003e8c:	d1e8      	bne.n	8003e60 <HAL_SPI_Transmit+0xa4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e8e:	4632      	mov	r2, r6
 8003e90:	4629      	mov	r1, r5
 8003e92:	4620      	mov	r0, r4
 8003e94:	f7ff feec 	bl	8003c70 <SPI_EndRxTxTransaction>
 8003e98:	b108      	cbz	r0, 8003e9e <HAL_SPI_Transmit+0xe2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e9a:	2320      	movs	r3, #32
 8003e9c:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e9e:	68a3      	ldr	r3, [r4, #8]
 8003ea0:	b933      	cbnz	r3, 8003eb0 <HAL_SPI_Transmit+0xf4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ea2:	6822      	ldr	r2, [r4, #0]
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	68d3      	ldr	r3, [r2, #12]
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	6893      	ldr	r3, [r2, #8]
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eb0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d199      	bne.n	8003dea <HAL_SPI_Transmit+0x2e>
    hspi->State = HAL_SPI_STATE_READY;
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ebc:	461f      	mov	r7, r3
 8003ebe:	e794      	b.n	8003dea <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8003ec0:	2702      	movs	r7, #2
}
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	b003      	add	sp, #12
 8003ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eca:	2a00      	cmp	r2, #0
 8003ecc:	d17c      	bne.n	8003fc8 <HAL_SPI_Transmit+0x20c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ece:	4649      	mov	r1, r9
 8003ed0:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003ed4:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8003ed6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed8:	6321      	str	r1, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8003ee0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0d2      	beq.n	8003e8e <HAL_SPI_Transmit+0xd2>
 8003ee8:	1c69      	adds	r1, r5, #1
 8003eea:	d163      	bne.n	8003fb4 <HAL_SPI_Transmit+0x1f8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eec:	6883      	ldr	r3, [r0, #8]
 8003eee:	079a      	lsls	r2, r3, #30
 8003ef0:	d50f      	bpl.n	8003f12 <HAL_SPI_Transmit+0x156>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003ef4:	f832 3b02 	ldrh.w	r3, [r2], #2
 8003ef8:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8003efa:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003efc:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8003f04:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0c0      	beq.n	8003e8e <HAL_SPI_Transmit+0xd2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f0c:	6883      	ldr	r3, [r0, #8]
 8003f0e:	079a      	lsls	r2, r3, #30
 8003f10:	d4ef      	bmi.n	8003ef2 <HAL_SPI_Transmit+0x136>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f12:	f7fd f9d9 	bl	80012c8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8003f16:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0b7      	beq.n	8003e8e <HAL_SPI_Transmit+0xd2>
 8003f1e:	6820      	ldr	r0, [r4, #0]
 8003f20:	e7e4      	b.n	8003eec <HAL_SPI_Transmit+0x130>
    __HAL_SPI_DISABLE(hspi);
 8003f22:	6803      	ldr	r3, [r0, #0]
 8003f24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f28:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8003f2a:	6803      	ldr	r3, [r0, #0]
 8003f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f30:	6003      	str	r3, [r0, #0]
 8003f32:	e77d      	b.n	8003e30 <HAL_SPI_Transmit+0x74>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f34:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003f36:	7812      	ldrb	r2, [r2, #0]
 8003f38:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8003f3a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f3c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f3e:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f40:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8003f42:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f44:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f46:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8003f48:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d09e      	beq.n	8003e8e <HAL_SPI_Transmit+0xd2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	0792      	lsls	r2, r2, #30
 8003f56:	d4ed      	bmi.n	8003f34 <HAL_SPI_Transmit+0x178>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f58:	f7fd f9b6 	bl	80012c8 <HAL_GetTick>
 8003f5c:	1b83      	subs	r3, r0, r6
 8003f5e:	42ab      	cmp	r3, r5
 8003f60:	d3f2      	bcc.n	8003f48 <HAL_SPI_Transmit+0x18c>
          hspi->State = HAL_SPI_STATE_READY;
 8003f62:	2301      	movs	r3, #1
 8003f64:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          errorcode = HAL_TIMEOUT;
 8003f68:	2703      	movs	r7, #3
 8003f6a:	e73e      	b.n	8003dea <HAL_SPI_Transmit+0x2e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f6c:	f899 3000 	ldrb.w	r3, [r9]
 8003f70:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003f74:	3301      	adds	r3, #1
 8003f76:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f78:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8003f80:	e769      	b.n	8003e56 <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f82:	f7fd f9a1 	bl	80012c8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8003f86:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f47f af68 	bne.w	8003e60 <HAL_SPI_Transmit+0xa4>
 8003f90:	e77d      	b.n	8003e8e <HAL_SPI_Transmit+0xd2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f92:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003f94:	f832 3b02 	ldrh.w	r3, [r2], #2
 8003f98:	f8cc 300c 	str.w	r3, [ip, #12]
        hspi->TxXferCount--;
 8003f9c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f9e:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8003fa6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f43f af6f 	beq.w	8003e8e <HAL_SPI_Transmit+0xd2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fb0:	f8d4 c000 	ldr.w	ip, [r4]
 8003fb4:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8003fb8:	079b      	lsls	r3, r3, #30
 8003fba:	d4ea      	bmi.n	8003f92 <HAL_SPI_Transmit+0x1d6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fbc:	f7fd f984 	bl	80012c8 <HAL_GetTick>
 8003fc0:	1b83      	subs	r3, r0, r6
 8003fc2:	42ab      	cmp	r3, r5
 8003fc4:	d3ef      	bcc.n	8003fa6 <HAL_SPI_Transmit+0x1ea>
 8003fc6:	e7cc      	b.n	8003f62 <HAL_SPI_Transmit+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fc8:	f1b8 0f01 	cmp.w	r8, #1
 8003fcc:	d188      	bne.n	8003ee0 <HAL_SPI_Transmit+0x124>
 8003fce:	e77e      	b.n	8003ece <HAL_SPI_Transmit+0x112>

08003fd0 <HAL_SPI_TransmitReceive>:
{
 8003fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fd4:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003fd6:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
{
 8003fda:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8003fdc:	2801      	cmp	r0, #1
{
 8003fde:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 8003fe0:	f000 8086 	beq.w	80040f0 <HAL_SPI_TransmitReceive+0x120>
 8003fe4:	461f      	mov	r7, r3
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8003fec:	4689      	mov	r9, r1
 8003fee:	4690      	mov	r8, r2
 8003ff0:	f7fd f96a 	bl	80012c8 <HAL_GetTick>
 8003ff4:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8003ff6:	f894 0051 	ldrb.w	r0, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 8003ffa:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ffc:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8003ffe:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004000:	d00e      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x50>
 8004002:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004006:	d006      	beq.n	8004016 <HAL_SPI_TransmitReceive+0x46>
    errorcode = HAL_BUSY;
 8004008:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 800400a:	2300      	movs	r3, #0
 800400c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8004010:	b003      	add	sp, #12
 8004012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004016:	68a2      	ldr	r2, [r4, #8]
 8004018:	2a00      	cmp	r2, #0
 800401a:	d1f5      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x38>
 800401c:	2904      	cmp	r1, #4
 800401e:	d1f3      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004020:	f1b9 0f00 	cmp.w	r9, #0
 8004024:	f000 80c7 	beq.w	80041b6 <HAL_SPI_TransmitReceive+0x1e6>
 8004028:	f1b8 0f00 	cmp.w	r8, #0
 800402c:	f000 80c3 	beq.w	80041b6 <HAL_SPI_TransmitReceive+0x1e6>
 8004030:	2f00      	cmp	r7, #0
 8004032:	f000 80c0 	beq.w	80041b6 <HAL_SPI_TransmitReceive+0x1e6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004036:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800403a:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800403e:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004040:	bf1c      	itt	ne
 8004042:	2205      	movne	r2, #5
 8004044:	f884 2051 	strbne.w	r2, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004048:	2200      	movs	r2, #0
 800404a:	6562      	str	r2, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 800404c:	e9c4 2210 	strd	r2, r2, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004050:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8004052:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8004054:	86e7      	strh	r7, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004056:	6811      	ldr	r1, [r2, #0]
  hspi->RxXferSize  = Size;
 8004058:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800405a:	0649      	lsls	r1, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800405c:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004060:	86a7      	strh	r7, [r4, #52]	@ 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004062:	d403      	bmi.n	800406c <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 8004064:	6811      	ldr	r1, [r2, #0]
 8004066:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800406a:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800406c:	68e1      	ldr	r1, [r4, #12]
 800406e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8004072:	d04c      	beq.n	800410e <HAL_SPI_TransmitReceive+0x13e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004074:	2b00      	cmp	r3, #0
 8004076:	d03f      	beq.n	80040f8 <HAL_SPI_TransmitReceive+0x128>
 8004078:	2f01      	cmp	r7, #1
 800407a:	d03d      	beq.n	80040f8 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 800407c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800407e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004080:	b29b      	uxth	r3, r3
 8004082:	b91b      	cbnz	r3, 800408c <HAL_SPI_TransmitReceive+0xbc>
 8004084:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d07d      	beq.n	8004188 <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800408c:	6822      	ldr	r2, [r4, #0]
 800408e:	6893      	ldr	r3, [r2, #8]
 8004090:	0799      	lsls	r1, r3, #30
 8004092:	d50f      	bpl.n	80040b4 <HAL_SPI_TransmitReceive+0xe4>
 8004094:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004096:	b29b      	uxth	r3, r3
 8004098:	b163      	cbz	r3, 80040b4 <HAL_SPI_TransmitReceive+0xe4>
 800409a:	b15f      	cbz	r7, 80040b4 <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800409c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80040a2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr++;
 80040a4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80040a6:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 80040a8:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80040aa:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80040ac:	6322      	str	r2, [r4, #48]	@ 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040ae:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 80040b0:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80040b2:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040b4:	6893      	ldr	r3, [r2, #8]
 80040b6:	f013 0301 	ands.w	r3, r3, #1
 80040ba:	d00d      	beq.n	80040d8 <HAL_SPI_TransmitReceive+0x108>
 80040bc:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80040be:	b289      	uxth	r1, r1
 80040c0:	b151      	cbz	r1, 80040d8 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 1U;
 80040c2:	461f      	mov	r7, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80040c6:	68d2      	ldr	r2, [r2, #12]
 80040c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80040cc:	3301      	adds	r3, #1
 80040ce:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80040d0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040d8:	f7fd f8f6 	bl	80012c8 <HAL_GetTick>
 80040dc:	1b40      	subs	r0, r0, r5
 80040de:	42b0      	cmp	r0, r6
 80040e0:	d3cd      	bcc.n	800407e <HAL_SPI_TransmitReceive+0xae>
 80040e2:	1c73      	adds	r3, r6, #1
 80040e4:	d0cb      	beq.n	800407e <HAL_SPI_TransmitReceive+0xae>
        hspi->State = HAL_SPI_STATE_READY;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        errorcode = HAL_TIMEOUT;
 80040ec:	2003      	movs	r0, #3
 80040ee:	e78c      	b.n	800400a <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 80040f0:	2002      	movs	r0, #2
}
 80040f2:	b003      	add	sp, #12
 80040f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040f8:	f899 3000 	ldrb.w	r3, [r9]
 80040fc:	7313      	strb	r3, [r2, #12]
      hspi->TxXferCount--;
 80040fe:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004100:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8004102:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004104:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8004106:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004108:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800410a:	86e3      	strh	r3, [r4, #54]	@ 0x36
 800410c:	e7b6      	b.n	800407c <HAL_SPI_TransmitReceive+0xac>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800410e:	2b00      	cmp	r3, #0
 8004110:	d153      	bne.n	80041ba <HAL_SPI_TransmitReceive+0x1ea>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004112:	4649      	mov	r1, r9
 8004114:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004118:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800411a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800411c:	6321      	str	r1, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800411e:	3b01      	subs	r3, #1
 8004120:	b29b      	uxth	r3, r3
 8004122:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8004124:	1c72      	adds	r2, r6, #1
{
 8004126:	f04f 0701 	mov.w	r7, #1
 800412a:	d025      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x1a8>
 800412c:	e048      	b.n	80041c0 <HAL_SPI_TransmitReceive+0x1f0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	6893      	ldr	r3, [r2, #8]
 8004132:	079b      	lsls	r3, r3, #30
 8004134:	d50d      	bpl.n	8004152 <HAL_SPI_TransmitReceive+0x182>
 8004136:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004138:	b29b      	uxth	r3, r3
 800413a:	b153      	cbz	r3, 8004152 <HAL_SPI_TransmitReceive+0x182>
 800413c:	b147      	cbz	r7, 8004150 <HAL_SPI_TransmitReceive+0x180>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800413e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004140:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004144:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004146:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8004148:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800414a:	3b01      	subs	r3, #1
 800414c:	b29b      	uxth	r3, r3
 800414e:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 8004150:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004152:	6893      	ldr	r3, [r2, #8]
 8004154:	f013 0301 	ands.w	r3, r3, #1
 8004158:	d00c      	beq.n	8004174 <HAL_SPI_TransmitReceive+0x1a4>
 800415a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800415c:	b289      	uxth	r1, r1
 800415e:	b149      	cbz	r1, 8004174 <HAL_SPI_TransmitReceive+0x1a4>
        txallowed = 1U;
 8004160:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004162:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004164:	68d2      	ldr	r2, [r2, #12]
 8004166:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800416a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800416c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800416e:	3b01      	subs	r3, #1
 8004170:	b29b      	uxth	r3, r3
 8004172:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004174:	f7fd f8a8 	bl	80012c8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004178:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1d6      	bne.n	800412e <HAL_SPI_TransmitReceive+0x15e>
 8004180:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1d2      	bne.n	800412e <HAL_SPI_TransmitReceive+0x15e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004188:	462a      	mov	r2, r5
 800418a:	4631      	mov	r1, r6
 800418c:	4620      	mov	r0, r4
 800418e:	f7ff fd6f 	bl	8003c70 <SPI_EndRxTxTransaction>
 8004192:	b970      	cbnz	r0, 80041b2 <HAL_SPI_TransmitReceive+0x1e2>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004194:	68a3      	ldr	r3, [r4, #8]
 8004196:	b933      	cbnz	r3, 80041a6 <HAL_SPI_TransmitReceive+0x1d6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	9001      	str	r0, [sp, #4]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	9201      	str	r2, [sp, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80041a8:	b92b      	cbnz	r3, 80041b6 <HAL_SPI_TransmitReceive+0x1e6>
    hspi->State = HAL_SPI_STATE_READY;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
 80041b0:	e72b      	b.n	800400a <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041b2:	2320      	movs	r3, #32
 80041b4:	6563      	str	r3, [r4, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80041b6:	2001      	movs	r0, #1
 80041b8:	e727      	b.n	800400a <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ba:	2f01      	cmp	r7, #1
 80041bc:	d1b2      	bne.n	8004124 <HAL_SPI_TransmitReceive+0x154>
 80041be:	e7a8      	b.n	8004112 <HAL_SPI_TransmitReceive+0x142>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041c0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	b91b      	cbnz	r3, 80041ce <HAL_SPI_TransmitReceive+0x1fe>
 80041c6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0dc      	beq.n	8004188 <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ce:	6822      	ldr	r2, [r4, #0]
 80041d0:	6893      	ldr	r3, [r2, #8]
 80041d2:	0798      	lsls	r0, r3, #30
 80041d4:	d50d      	bpl.n	80041f2 <HAL_SPI_TransmitReceive+0x222>
 80041d6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80041d8:	b29b      	uxth	r3, r3
 80041da:	b153      	cbz	r3, 80041f2 <HAL_SPI_TransmitReceive+0x222>
 80041dc:	b147      	cbz	r7, 80041f0 <HAL_SPI_TransmitReceive+0x220>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80041e0:	f833 1b02 	ldrh.w	r1, [r3], #2
 80041e4:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e6:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80041e8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80041f0:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041f2:	6893      	ldr	r3, [r2, #8]
 80041f4:	f013 0301 	ands.w	r3, r3, #1
 80041f8:	d00c      	beq.n	8004214 <HAL_SPI_TransmitReceive+0x244>
 80041fa:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80041fc:	b289      	uxth	r1, r1
 80041fe:	b149      	cbz	r1, 8004214 <HAL_SPI_TransmitReceive+0x244>
        txallowed = 1U;
 8004200:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004202:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004204:	68d2      	ldr	r2, [r2, #12]
 8004206:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800420a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800420c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800420e:	3b01      	subs	r3, #1
 8004210:	b29b      	uxth	r3, r3
 8004212:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004214:	f7fd f858 	bl	80012c8 <HAL_GetTick>
 8004218:	1b40      	subs	r0, r0, r5
 800421a:	42b0      	cmp	r0, r6
 800421c:	d3d0      	bcc.n	80041c0 <HAL_SPI_TransmitReceive+0x1f0>
 800421e:	e762      	b.n	80040e6 <HAL_SPI_TransmitReceive+0x116>

08004220 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004220:	2800      	cmp	r0, #0
 8004222:	d071      	beq.n	8004308 <HAL_TIM_Base_Init+0xe8>
{
 8004224:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004226:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800422a:	4604      	mov	r4, r0
 800422c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004230:	2b00      	cmp	r3, #0
 8004232:	d053      	beq.n	80042dc <HAL_TIM_Base_Init+0xbc>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004234:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004236:	4e35      	ldr	r6, [pc, #212]	@ (800430c <HAL_TIM_Base_Init+0xec>)

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004238:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800423a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800423c:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 800423e:	2302      	movs	r3, #2
 8004240:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004244:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8004246:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004248:	d04d      	beq.n	80042e6 <HAL_TIM_Base_Init+0xc6>
 800424a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800424e:	d017      	beq.n	8004280 <HAL_TIM_Base_Init+0x60>
 8004250:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8004254:	42b2      	cmp	r2, r6
 8004256:	d013      	beq.n	8004280 <HAL_TIM_Base_Init+0x60>
 8004258:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800425c:	42b2      	cmp	r2, r6
 800425e:	d00f      	beq.n	8004280 <HAL_TIM_Base_Init+0x60>
 8004260:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004264:	42b2      	cmp	r2, r6
 8004266:	d00b      	beq.n	8004280 <HAL_TIM_Base_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004268:	4e29      	ldr	r6, [pc, #164]	@ (8004310 <HAL_TIM_Base_Init+0xf0>)
 800426a:	42b2      	cmp	r2, r6
 800426c:	d00c      	beq.n	8004288 <HAL_TIM_Base_Init+0x68>
 800426e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004272:	42b2      	cmp	r2, r6
 8004274:	d008      	beq.n	8004288 <HAL_TIM_Base_Init+0x68>
 8004276:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800427a:	42b2      	cmp	r2, r6
 800427c:	d108      	bne.n	8004290 <HAL_TIM_Base_Init+0x70>
 800427e:	e003      	b.n	8004288 <HAL_TIM_Base_Init+0x68>
    tmpcr1 |= Structure->CounterMode;
 8004280:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004286:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004288:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800428a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800428e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004290:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004294:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004296:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004298:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800429a:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800429c:	2301      	movs	r3, #1
 800429e:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042a0:	6913      	ldr	r3, [r2, #16]
 80042a2:	07db      	lsls	r3, r3, #31
 80042a4:	d503      	bpl.n	80042ae <HAL_TIM_Base_Init+0x8e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042a6:	6913      	ldr	r3, [r2, #16]
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80042b8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80042bc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80042c0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042cc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80042d0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80042d8:	2000      	movs	r0, #0
}
 80042da:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80042dc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80042e0:	f7fc feea 	bl	80010b8 <HAL_TIM_Base_MspInit>
 80042e4:	e7a6      	b.n	8004234 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80042e6:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80042ec:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ee:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80042f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042f4:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042fa:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80042fc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042fe:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004300:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004302:	6963      	ldr	r3, [r4, #20]
 8004304:	6313      	str	r3, [r2, #48]	@ 0x30
 8004306:	e7c9      	b.n	800429c <HAL_TIM_Base_Init+0x7c>
    return HAL_ERROR;
 8004308:	2001      	movs	r0, #1
}
 800430a:	4770      	bx	lr
 800430c:	40010000 	.word	0x40010000
 8004310:	40014000 	.word	0x40014000

08004314 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004314:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004318:	2b01      	cmp	r3, #1
 800431a:	d127      	bne.n	800436c <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800431c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431e:	4914      	ldr	r1, [pc, #80]	@ (8004370 <HAL_TIM_Base_Start_IT+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	2202      	movs	r2, #2
 8004322:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004326:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004328:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004330:	d011      	beq.n	8004356 <HAL_TIM_Base_Start_IT+0x42>
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004336:	d00e      	beq.n	8004356 <HAL_TIM_Base_Start_IT+0x42>
 8004338:	4a0e      	ldr	r2, [pc, #56]	@ (8004374 <HAL_TIM_Base_Start_IT+0x60>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00b      	beq.n	8004356 <HAL_TIM_Base_Start_IT+0x42>
 800433e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004342:	4293      	cmp	r3, r2
 8004344:	d007      	beq.n	8004356 <HAL_TIM_Base_Start_IT+0x42>
 8004346:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800434a:	4293      	cmp	r3, r2
 800434c:	d003      	beq.n	8004356 <HAL_TIM_Base_Start_IT+0x42>
 800434e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8004352:	4293      	cmp	r3, r2
 8004354:	d104      	bne.n	8004360 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435c:	2a06      	cmp	r2, #6
 800435e:	d003      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004368:	2000      	movs	r0, #0
 800436a:	4770      	bx	lr
    return HAL_ERROR;
 800436c:	2001      	movs	r0, #1
}
 800436e:	4770      	bx	lr
 8004370:	40010000 	.word	0x40010000
 8004374:	40000400 	.word	0x40000400

08004378 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop

0800437c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop

08004380 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop

08004384 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop

08004388 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8004388:	6803      	ldr	r3, [r0, #0]
{
 800438a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800438c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800438e:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004390:	07a9      	lsls	r1, r5, #30
{
 8004392:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004394:	d501      	bpl.n	800439a <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004396:	07b2      	lsls	r2, r6, #30
 8004398:	d451      	bmi.n	800443e <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800439a:	0769      	lsls	r1, r5, #29
 800439c:	d501      	bpl.n	80043a2 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800439e:	0772      	lsls	r2, r6, #29
 80043a0:	d43a      	bmi.n	8004418 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043a2:	072b      	lsls	r3, r5, #28
 80043a4:	d501      	bpl.n	80043aa <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043a6:	0730      	lsls	r0, r6, #28
 80043a8:	d424      	bmi.n	80043f4 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043aa:	06ea      	lsls	r2, r5, #27
 80043ac:	d501      	bpl.n	80043b2 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043ae:	06f3      	lsls	r3, r6, #27
 80043b0:	d410      	bmi.n	80043d4 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043b2:	07e8      	lsls	r0, r5, #31
 80043b4:	d501      	bpl.n	80043ba <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043b6:	07f1      	lsls	r1, r6, #31
 80043b8:	d457      	bmi.n	800446a <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043ba:	062a      	lsls	r2, r5, #24
 80043bc:	d501      	bpl.n	80043c2 <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043be:	0633      	lsls	r3, r6, #24
 80043c0:	d45b      	bmi.n	800447a <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043c2:	0668      	lsls	r0, r5, #25
 80043c4:	d501      	bpl.n	80043ca <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043c6:	0671      	lsls	r1, r6, #25
 80043c8:	d45f      	bmi.n	800448a <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043ca:	06aa      	lsls	r2, r5, #26
 80043cc:	d501      	bpl.n	80043d2 <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043ce:	06b3      	lsls	r3, r6, #26
 80043d0:	d442      	bmi.n	8004458 <HAL_TIM_IRQHandler+0xd0>
}
 80043d2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	f06f 0210 	mvn.w	r2, #16
 80043da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043dc:	2208      	movs	r2, #8
 80043de:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80043e6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e8:	d063      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80043ea:	f7ff ffc7 	bl	800437c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	2300      	movs	r3, #0
 80043f0:	7723      	strb	r3, [r4, #28]
 80043f2:	e7de      	b.n	80043b2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	f06f 0208 	mvn.w	r2, #8
 80043fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043fc:	2204      	movs	r2, #4
 80043fe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004404:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004406:	d151      	bne.n	80044ac <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004408:	f7ff ffb6 	bl	8004378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800440c:	4620      	mov	r0, r4
 800440e:	f7ff ffb7 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004412:	2300      	movs	r3, #0
 8004414:	7723      	strb	r3, [r4, #28]
 8004416:	e7c8      	b.n	80043aa <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	f06f 0204 	mvn.w	r2, #4
 800441e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004420:	2202      	movs	r2, #2
 8004422:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800442a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800442c:	d13b      	bne.n	80044a6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	f7ff ffa3 	bl	8004378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004432:	4620      	mov	r0, r4
 8004434:	f7ff ffa4 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004438:	2300      	movs	r3, #0
 800443a:	7723      	strb	r3, [r4, #28]
 800443c:	e7b1      	b.n	80043a2 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800443e:	f06f 0202 	mvn.w	r2, #2
 8004442:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004444:	2201      	movs	r2, #1
 8004446:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	079b      	lsls	r3, r3, #30
 800444c:	d025      	beq.n	800449a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800444e:	f7ff ff95 	bl	800437c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	2300      	movs	r3, #0
 8004454:	7723      	strb	r3, [r4, #28]
 8004456:	e7a0      	b.n	800439a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800445e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004460:	611a      	str	r2, [r3, #16]
}
 8004462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004466:	f000 b82b 	b.w	80044c0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	f06f 0201 	mvn.w	r2, #1
 8004470:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004472:	4620      	mov	r0, r4
 8004474:	f7fc fb5c 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
 8004478:	e79f      	b.n	80043ba <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004480:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004482:	4620      	mov	r0, r4
 8004484:	f000 f81e 	bl	80044c4 <HAL_TIMEx_BreakCallback>
 8004488:	e79b      	b.n	80043c2 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004490:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004492:	4620      	mov	r0, r4
 8004494:	f7ff ff76 	bl	8004384 <HAL_TIM_TriggerCallback>
 8004498:	e797      	b.n	80043ca <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	f7ff ff6d 	bl	8004378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449e:	4620      	mov	r0, r4
 80044a0:	f7ff ff6e 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
 80044a4:	e7d5      	b.n	8004452 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80044a6:	f7ff ff69 	bl	800437c <HAL_TIM_IC_CaptureCallback>
 80044aa:	e7c5      	b.n	8004438 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 80044ac:	f7ff ff66 	bl	800437c <HAL_TIM_IC_CaptureCallback>
 80044b0:	e7af      	b.n	8004412 <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	f7ff ff61 	bl	8004378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b6:	4620      	mov	r0, r4
 80044b8:	f7ff ff62 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
 80044bc:	e797      	b.n	80043ee <HAL_TIM_IRQHandler+0x66>
 80044be:	bf00      	nop

080044c0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop

080044c4 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop

080044c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044c8:	b084      	sub	sp, #16
 80044ca:	b082      	sub	sp, #8
 80044cc:	f10d 0c0c 	add.w	ip, sp, #12
 80044d0:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044d4:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80044d8:	2a01      	cmp	r2, #1
{
 80044da:	4603      	mov	r3, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044dc:	d12e      	bne.n	800453c <USB_CoreInit+0x74>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044de:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 80044e0:	f89d 1018 	ldrb.w	r1, [sp, #24]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044e4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80044e8:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044ea:	68c2      	ldr	r2, [r0, #12]
 80044ec:	f422 0284 	bic.w	r2, r2, #4325376	@ 0x420000
 80044f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044f4:	60c2      	str	r2, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044f6:	68c2      	ldr	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80044f8:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044fa:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80044fe:	60c2      	str	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004500:	d061      	beq.n	80045c6 <USB_CoreInit+0xfe>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 8004502:	2200      	movs	r2, #0
 8004504:	9200      	str	r2, [sp, #0]
 8004506:	e002      	b.n	800450e <USB_CoreInit+0x46>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	2a00      	cmp	r2, #0
 800450c:	db30      	blt.n	8004570 <USB_CoreInit+0xa8>
    count++;
 800450e:	9a00      	ldr	r2, [sp, #0]
 8004510:	3201      	adds	r2, #1
 8004512:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8004514:	9a00      	ldr	r2, [sp, #0]
 8004516:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 800451a:	d9f5      	bls.n	8004508 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 800451c:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800451e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8004522:	2a01      	cmp	r2, #1
 8004524:	d107      	bne.n	8004536 <USB_CoreInit+0x6e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	f042 0206 	orr.w	r2, r2, #6
 800452c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	f042 0220 	orr.w	r2, r2, #32
 8004534:	609a      	str	r2, [r3, #8]
}
 8004536:	b002      	add	sp, #8
 8004538:	b004      	add	sp, #16
 800453a:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800453c:	68c2      	ldr	r2, [r0, #12]
  __IO uint32_t count = 0U;
 800453e:	2100      	movs	r1, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004544:	60c2      	str	r2, [r0, #12]
  __IO uint32_t count = 0U;
 8004546:	9101      	str	r1, [sp, #4]
 8004548:	e002      	b.n	8004550 <USB_CoreInit+0x88>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	2a00      	cmp	r2, #0
 800454e:	db27      	blt.n	80045a0 <USB_CoreInit+0xd8>
    count++;
 8004550:	9a01      	ldr	r2, [sp, #4]
 8004552:	3201      	adds	r2, #1
 8004554:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004556:	9a01      	ldr	r2, [sp, #4]
 8004558:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 800455c:	d9f5      	bls.n	800454a <USB_CoreInit+0x82>
      return HAL_TIMEOUT;
 800455e:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 8004560:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8004564:	b9ba      	cbnz	r2, 8004596 <USB_CoreInit+0xce>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004566:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004568:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800456c:	639a      	str	r2, [r3, #56]	@ 0x38
 800456e:	e7d6      	b.n	800451e <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 8004570:	2200      	movs	r2, #0
 8004572:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	611a      	str	r2, [r3, #16]
 800457c:	e003      	b.n	8004586 <USB_CoreInit+0xbe>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800457e:	6918      	ldr	r0, [r3, #16]
 8004580:	f010 0001 	ands.w	r0, r0, #1
 8004584:	d0cb      	beq.n	800451e <USB_CoreInit+0x56>
    count++;
 8004586:	9a00      	ldr	r2, [sp, #0]
 8004588:	3201      	adds	r2, #1
 800458a:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 800458c:	9a00      	ldr	r2, [sp, #0]
 800458e:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8004592:	d9f4      	bls.n	800457e <USB_CoreInit+0xb6>
 8004594:	e7c2      	b.n	800451c <USB_CoreInit+0x54>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004596:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004598:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800459c:	639a      	str	r2, [r3, #56]	@ 0x38
 800459e:	e7be      	b.n	800451e <USB_CoreInit+0x56>
  count = 0U;
 80045a0:	2200      	movs	r2, #0
 80045a2:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	611a      	str	r2, [r3, #16]
 80045ac:	e003      	b.n	80045b6 <USB_CoreInit+0xee>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045ae:	6918      	ldr	r0, [r3, #16]
 80045b0:	f010 0001 	ands.w	r0, r0, #1
 80045b4:	d0d4      	beq.n	8004560 <USB_CoreInit+0x98>
    count++;
 80045b6:	9a01      	ldr	r2, [sp, #4]
 80045b8:	3201      	adds	r2, #1
 80045ba:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80045bc:	9a01      	ldr	r2, [sp, #4]
 80045be:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 80045c2:	d9f4      	bls.n	80045ae <USB_CoreInit+0xe6>
 80045c4:	e7cb      	b.n	800455e <USB_CoreInit+0x96>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045c6:	68c2      	ldr	r2, [r0, #12]
 80045c8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80045cc:	60c2      	str	r2, [r0, #12]
 80045ce:	e798      	b.n	8004502 <USB_CoreInit+0x3a>

080045d0 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80045d0:	2a02      	cmp	r2, #2
{
 80045d2:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 80045d4:	d00a      	beq.n	80045ec <USB_SetTurnaroundTime+0x1c>
 80045d6:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 80045e0:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	430a      	orrs	r2, r1
}
 80045e6:	2000      	movs	r0, #0
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80045e8:	60da      	str	r2, [r3, #12]
}
 80045ea:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045ec:	4a26      	ldr	r2, [pc, #152]	@ (8004688 <USB_SetTurnaroundTime+0xb8>)
 80045ee:	4827      	ldr	r0, [pc, #156]	@ (800468c <USB_SetTurnaroundTime+0xbc>)
 80045f0:	440a      	add	r2, r1
 80045f2:	4282      	cmp	r2, r0
 80045f4:	d932      	bls.n	800465c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045f6:	4a26      	ldr	r2, [pc, #152]	@ (8004690 <USB_SetTurnaroundTime+0xc0>)
 80045f8:	4826      	ldr	r0, [pc, #152]	@ (8004694 <USB_SetTurnaroundTime+0xc4>)
 80045fa:	440a      	add	r2, r1
 80045fc:	4282      	cmp	r2, r0
 80045fe:	d930      	bls.n	8004662 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004600:	4825      	ldr	r0, [pc, #148]	@ (8004698 <USB_SetTurnaroundTime+0xc8>)
 8004602:	f5a1 0274 	sub.w	r2, r1, #15990784	@ 0xf40000
 8004606:	f5a2 5210 	sub.w	r2, r2, #9216	@ 0x2400
 800460a:	4282      	cmp	r2, r0
 800460c:	d92c      	bls.n	8004668 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800460e:	4823      	ldr	r0, [pc, #140]	@ (800469c <USB_SetTurnaroundTime+0xcc>)
 8004610:	f1a1 7283 	sub.w	r2, r1, #17170432	@ 0x1060000
 8004614:	f5a2 42e7 	sub.w	r2, r2, #29568	@ 0x7380
 8004618:	4282      	cmp	r2, r0
 800461a:	d328      	bcc.n	800466e <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800461c:	4a20      	ldr	r2, [pc, #128]	@ (80046a0 <USB_SetTurnaroundTime+0xd0>)
 800461e:	4821      	ldr	r0, [pc, #132]	@ (80046a4 <USB_SetTurnaroundTime+0xd4>)
 8004620:	440a      	add	r2, r1
 8004622:	4282      	cmp	r2, r0
 8004624:	d926      	bls.n	8004674 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004626:	4a20      	ldr	r2, [pc, #128]	@ (80046a8 <USB_SetTurnaroundTime+0xd8>)
 8004628:	4820      	ldr	r0, [pc, #128]	@ (80046ac <USB_SetTurnaroundTime+0xdc>)
 800462a:	440a      	add	r2, r1
 800462c:	4282      	cmp	r2, r0
 800462e:	d324      	bcc.n	800467a <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004630:	4a1f      	ldr	r2, [pc, #124]	@ (80046b0 <USB_SetTurnaroundTime+0xe0>)
 8004632:	4820      	ldr	r0, [pc, #128]	@ (80046b4 <USB_SetTurnaroundTime+0xe4>)
 8004634:	440a      	add	r2, r1
 8004636:	4282      	cmp	r2, r0
 8004638:	d3cd      	bcc.n	80045d6 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800463a:	481f      	ldr	r0, [pc, #124]	@ (80046b8 <USB_SetTurnaroundTime+0xe8>)
 800463c:	f1a1 72b7 	sub.w	r2, r1, #23986176	@ 0x16e0000
 8004640:	f5a2 5258 	sub.w	r2, r2, #13824	@ 0x3600
 8004644:	4282      	cmp	r2, r0
 8004646:	d31b      	bcc.n	8004680 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004648:	4a1c      	ldr	r2, [pc, #112]	@ (80046bc <USB_SetTurnaroundTime+0xec>)
 800464a:	481d      	ldr	r0, [pc, #116]	@ (80046c0 <USB_SetTurnaroundTime+0xf0>)
 800464c:	440a      	add	r2, r1
 800464e:	4282      	cmp	r2, r0
 8004650:	bf2c      	ite	cs
 8004652:	f44f 51c0 	movcs.w	r1, #6144	@ 0x1800
 8004656:	f44f 51e0 	movcc.w	r1, #7168	@ 0x1c00
 800465a:	e7be      	b.n	80045da <USB_SetTurnaroundTime+0xa>
 800465c:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8004660:	e7bb      	b.n	80045da <USB_SetTurnaroundTime+0xa>
 8004662:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8004666:	e7b8      	b.n	80045da <USB_SetTurnaroundTime+0xa>
 8004668:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 800466c:	e7b5      	b.n	80045da <USB_SetTurnaroundTime+0xa>
 800466e:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8004672:	e7b2      	b.n	80045da <USB_SetTurnaroundTime+0xa>
 8004674:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 8004678:	e7af      	b.n	80045da <USB_SetTurnaroundTime+0xa>
 800467a:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 800467e:	e7ac      	b.n	80045da <USB_SetTurnaroundTime+0xa>
 8004680:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004684:	e7a9      	b.n	80045da <USB_SetTurnaroundTime+0xa>
 8004686:	bf00      	nop
 8004688:	ff275340 	.word	0xff275340
 800468c:	000c34ff 	.word	0x000c34ff
 8004690:	ff1b1e40 	.word	0xff1b1e40
 8004694:	000f423f 	.word	0x000f423f
 8004698:	00124f7f 	.word	0x00124f7f
 800469c:	0013d620 	.word	0x0013d620
 80046a0:	fee5b660 	.word	0xfee5b660
 80046a4:	0016e35f 	.word	0x0016e35f
 80046a8:	feced300 	.word	0xfeced300
 80046ac:	001b7740 	.word	0x001b7740
 80046b0:	feb35bc0 	.word	0xfeb35bc0
 80046b4:	002191c0 	.word	0x002191c0
 80046b8:	00387520 	.word	0x00387520
 80046bc:	fe5954e0 	.word	0xfe5954e0
 80046c0:	00419ce0 	.word	0x00419ce0

080046c4 <USB_EnableGlobalInt>:
{
 80046c4:	4603      	mov	r3, r0
}
 80046c6:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	609a      	str	r2, [r3, #8]
}
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop

080046d4 <USB_DisableGlobalInt>:
{
 80046d4:	4603      	mov	r3, r0
}
 80046d6:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	609a      	str	r2, [r3, #8]
}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop

080046e4 <USB_SetCurrentMode>:
{
 80046e4:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046e6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80046e8:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046ea:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
{
 80046ee:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046f0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80046f2:	d018      	beq.n	8004726 <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 80046f4:	b9a9      	cbnz	r1, 8004722 <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046f6:	68c3      	ldr	r3, [r0, #12]
 80046f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  uint32_t ms = 0U;
 80046fc:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046fe:	60c3      	str	r3, [r0, #12]
 8004700:	e001      	b.n	8004706 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004702:	2cc8      	cmp	r4, #200	@ 0xc8
 8004704:	d00d      	beq.n	8004722 <USB_SetCurrentMode+0x3e>
      HAL_Delay(10U);
 8004706:	200a      	movs	r0, #10
 8004708:	f7fc fde4 	bl	80012d4 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800470c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800470e:	07db      	lsls	r3, r3, #31
      ms += 10U;
 8004710:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004714:	d4f5      	bmi.n	8004702 <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004716:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 800471a:	fab0 f080 	clz	r0, r0
 800471e:	0940      	lsrs	r0, r0, #5
}
 8004720:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004722:	2001      	movs	r0, #1
}
 8004724:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004726:	68c3      	ldr	r3, [r0, #12]
 8004728:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  uint32_t ms = 0U;
 800472c:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800472e:	60c3      	str	r3, [r0, #12]
 8004730:	e001      	b.n	8004736 <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004732:	2cc8      	cmp	r4, #200	@ 0xc8
 8004734:	d0f5      	beq.n	8004722 <USB_SetCurrentMode+0x3e>
      HAL_Delay(10U);
 8004736:	200a      	movs	r0, #10
 8004738:	f7fc fdcc 	bl	80012d4 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800473c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800473e:	07da      	lsls	r2, r3, #31
      ms += 10U;
 8004740:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004744:	d5f5      	bpl.n	8004732 <USB_SetCurrentMode+0x4e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004746:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 800474a:	fab0 f080 	clz	r0, r0
 800474e:	0940      	lsrs	r0, r0, #5
 8004750:	e7e6      	b.n	8004720 <USB_SetCurrentMode+0x3c>
 8004752:	bf00      	nop

08004754 <USB_DevInit>:
{
 8004754:	b084      	sub	sp, #16
 8004756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004758:	b083      	sub	sp, #12
 800475a:	ac09      	add	r4, sp, #36	@ 0x24
 800475c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8004760:	f89d 402e 	ldrb.w	r4, [sp, #46]	@ 0x2e
 8004764:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
    USBx->DIEPTXF[i] = 0U;
 8004768:	2200      	movs	r2, #0
 800476a:	f8c0 2104 	str.w	r2, [r0, #260]	@ 0x104
{
 800476e:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 8004770:	f8c0 2108 	str.w	r2, [r0, #264]	@ 0x108
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004774:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
    USBx->DIEPTXF[i] = 0U;
 8004778:	f8c0 210c 	str.w	r2, [r0, #268]	@ 0x10c
 800477c:	f8c0 2110 	str.w	r2, [r0, #272]	@ 0x110
 8004780:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
 8004784:	f8c0 2118 	str.w	r2, [r0, #280]	@ 0x118
 8004788:	f8c0 211c 	str.w	r2, [r0, #284]	@ 0x11c
 800478c:	f8c0 2120 	str.w	r2, [r0, #288]	@ 0x120
 8004790:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
 8004794:	f8c0 2128 	str.w	r2, [r0, #296]	@ 0x128
 8004798:	f8c0 212c 	str.w	r2, [r0, #300]	@ 0x12c
 800479c:	f8c0 2130 	str.w	r2, [r0, #304]	@ 0x130
 80047a0:	f8c0 2134 	str.w	r2, [r0, #308]	@ 0x134
 80047a4:	f8c0 2138 	str.w	r2, [r0, #312]	@ 0x138
 80047a8:	f8c0 213c 	str.w	r2, [r0, #316]	@ 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 80047ac:	2c00      	cmp	r4, #0
 80047ae:	f040 80b8 	bne.w	8004922 <USB_DevInit+0x1ce>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047b2:	f8de 2004 	ldr.w	r2, [lr, #4]
 80047b6:	f042 0202 	orr.w	r2, r2, #2
 80047ba:	f8ce 2004 	str.w	r2, [lr, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80047be:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80047c0:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80047c4:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80047c6:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80047c8:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 80047cc:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80047ce:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80047d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047d4:	6382      	str	r2, [r0, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047dc:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 80047e0:	2a01      	cmp	r2, #1
 80047e2:	f000 80ae 	beq.w	8004942 <USB_DevInit+0x1ee>
  USBx_DEVICE->DCFG |= speed;
 80047e6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 80047ea:	f042 0203 	orr.w	r2, r2, #3
 80047ee:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  __IO uint32_t count = 0U;
 80047f2:	2200      	movs	r2, #0
 80047f4:	9200      	str	r2, [sp, #0]
 80047f6:	e003      	b.n	8004800 <USB_DevInit+0xac>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	2a00      	cmp	r2, #0
 80047fc:	f2c0 80ba 	blt.w	8004974 <USB_DevInit+0x220>
    count++;
 8004800:	9a00      	ldr	r2, [sp, #0]
 8004802:	3201      	adds	r2, #1
 8004804:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8004806:	9a00      	ldr	r2, [sp, #0]
 8004808:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 800480c:	d9f4      	bls.n	80047f8 <USB_DevInit+0xa4>
 800480e:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 8004810:	2200      	movs	r2, #0
 8004812:	9201      	str	r2, [sp, #4]
 8004814:	e003      	b.n	800481e <USB_DevInit+0xca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	2a00      	cmp	r2, #0
 800481a:	f2c0 809a 	blt.w	8004952 <USB_DevInit+0x1fe>
    count++;
 800481e:	9a01      	ldr	r2, [sp, #4]
 8004820:	3201      	adds	r2, #1
 8004822:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004824:	9a01      	ldr	r2, [sp, #4]
 8004826:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 800482a:	d9f4      	bls.n	8004816 <USB_DevInit+0xc2>
    ret = HAL_ERROR;
 800482c:	2001      	movs	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800482e:	2100      	movs	r1, #0
 8004830:	f8ce 1010 	str.w	r1, [lr, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004834:	f8ce 1014 	str.w	r1, [lr, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004838:	f8ce 101c 	str.w	r1, [lr, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800483c:	b325      	cbz	r5, 8004888 <USB_DevInit+0x134>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800483e:	f8d3 6900 	ldr.w	r6, [r3, #2304]	@ 0x900
 8004842:	2e00      	cmp	r6, #0
 8004844:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 8004848:	db18      	blt.n	800487c <USB_DevInit+0x128>
      USBx_INEP(i)->DIEPCTL = 0U;
 800484a:	2600      	movs	r6, #0
 800484c:	6016      	str	r6, [r2, #0]
 800484e:	468c      	mov	ip, r1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004850:	2700      	movs	r7, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004852:	f64f 367f 	movw	r6, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004856:	f10c 0101 	add.w	r1, ip, #1
 800485a:	428d      	cmp	r5, r1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800485c:	6117      	str	r7, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800485e:	6096      	str	r6, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004860:	f102 0220 	add.w	r2, r2, #32
 8004864:	d03a      	beq.n	80048dc <USB_DevInit+0x188>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004866:	f8d2 c000 	ldr.w	ip, [r2]
 800486a:	f1bc 0f00 	cmp.w	ip, #0
 800486e:	daec      	bge.n	800484a <USB_DevInit+0xf6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004870:	f04f 4c90 	mov.w	ip, #1207959552	@ 0x48000000
 8004874:	f8c2 c000 	str.w	ip, [r2]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004878:	468c      	mov	ip, r1
 800487a:	e7ec      	b.n	8004856 <USB_DevInit+0x102>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800487c:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
 8004880:	f8c3 6900 	str.w	r6, [r3, #2304]	@ 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004884:	468c      	mov	ip, r1
 8004886:	e7e3      	b.n	8004850 <USB_DevInit+0xfc>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004888:	f8de 2010 	ldr.w	r2, [lr, #16]
 800488c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004890:	f8ce 2010 	str.w	r2, [lr, #16]
  USBx->GINTMSK = 0U;
 8004894:	2100      	movs	r1, #0
  if (cfg.dma_enable == 0U)
 8004896:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
  USBx->GINTMSK = 0U;
 800489a:	6199      	str	r1, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800489c:	f06f 4180 	mvn.w	r1, #1073741824	@ 0x40000000
 80048a0:	6159      	str	r1, [r3, #20]
  if (cfg.dma_enable == 0U)
 80048a2:	b91a      	cbnz	r2, 80048ac <USB_DevInit+0x158>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	f042 0210 	orr.w	r2, r2, #16
 80048aa:	619a      	str	r2, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048ac:	6999      	ldr	r1, [r3, #24]
 80048ae:	4a3e      	ldr	r2, [pc, #248]	@ (80049a8 <USB_DevInit+0x254>)
 80048b0:	430a      	orrs	r2, r1
  if (cfg.Sof_enable != 0U)
 80048b2:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048b6:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 80048b8:	b119      	cbz	r1, 80048c2 <USB_DevInit+0x16e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048ba:	699a      	ldr	r2, [r3, #24]
 80048bc:	f042 0208 	orr.w	r2, r2, #8
 80048c0:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80048c2:	2c01      	cmp	r4, #1
 80048c4:	d105      	bne.n	80048d2 <USB_DevInit+0x17e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048c6:	699a      	ldr	r2, [r3, #24]
 80048c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80048cc:	f042 0204 	orr.w	r2, r2, #4
 80048d0:	619a      	str	r2, [r3, #24]
}
 80048d2:	b003      	add	sp, #12
 80048d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80048d8:	b004      	add	sp, #16
 80048da:	4770      	bx	lr
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048dc:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80048e0:	2900      	cmp	r1, #0
 80048e2:	f503 6230 	add.w	r2, r3, #2816	@ 0xb00
 80048e6:	db16      	blt.n	8004916 <USB_DevInit+0x1c2>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e8:	2500      	movs	r5, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048ea:	2100      	movs	r1, #0
 80048ec:	6011      	str	r1, [r2, #0]
 80048ee:	4629      	mov	r1, r5
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048f0:	2700      	movs	r7, #0
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048f2:	f64f 367f 	movw	r6, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048f6:	458c      	cmp	ip, r1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048f8:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048fa:	f101 0501 	add.w	r5, r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048fe:	6096      	str	r6, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004900:	f102 0220 	add.w	r2, r2, #32
 8004904:	d0c0      	beq.n	8004888 <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004906:	6811      	ldr	r1, [r2, #0]
 8004908:	2900      	cmp	r1, #0
 800490a:	daee      	bge.n	80048ea <USB_DevInit+0x196>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800490c:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8004910:	6011      	str	r1, [r2, #0]
 8004912:	4629      	mov	r1, r5
 8004914:	e7ef      	b.n	80048f6 <USB_DevInit+0x1a2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004916:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800491a:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800491e:	2100      	movs	r1, #0
 8004920:	e7e6      	b.n	80048f0 <USB_DevInit+0x19c>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004922:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8004924:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8004928:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800492a:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800492c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8004930:	6382      	str	r2, [r0, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8004932:	2200      	movs	r2, #0
 8004934:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004938:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 800493c:	2a01      	cmp	r2, #1
 800493e:	f47f af52 	bne.w	80047e6 <USB_DevInit+0x92>
    if (cfg.speed == USBD_HS_SPEED)
 8004942:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 8004946:	bb42      	cbnz	r2, 800499a <USB_DevInit+0x246>
  USBx_DEVICE->DCFG |= speed;
 8004948:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800494c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  return HAL_OK;
 8004950:	e74f      	b.n	80047f2 <USB_DevInit+0x9e>
  count = 0U;
 8004952:	2200      	movs	r2, #0
 8004954:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004956:	2210      	movs	r2, #16
 8004958:	611a      	str	r2, [r3, #16]
 800495a:	e003      	b.n	8004964 <USB_DevInit+0x210>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	06d2      	lsls	r2, r2, #27
 8004960:	f57f af65 	bpl.w	800482e <USB_DevInit+0xda>
    count++;
 8004964:	9a01      	ldr	r2, [sp, #4]
 8004966:	3201      	adds	r2, #1
 8004968:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800496a:	9a01      	ldr	r2, [sp, #4]
 800496c:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8004970:	d9f4      	bls.n	800495c <USB_DevInit+0x208>
 8004972:	e75b      	b.n	800482c <USB_DevInit+0xd8>
  count = 0U;
 8004974:	2200      	movs	r2, #0
 8004976:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004978:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 800497c:	611a      	str	r2, [r3, #16]
 800497e:	e004      	b.n	800498a <USB_DevInit+0x236>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004980:	6918      	ldr	r0, [r3, #16]
 8004982:	f010 0020 	ands.w	r0, r0, #32
 8004986:	f43f af43 	beq.w	8004810 <USB_DevInit+0xbc>
    count++;
 800498a:	9a00      	ldr	r2, [sp, #0]
 800498c:	3201      	adds	r2, #1
 800498e:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8004990:	9a00      	ldr	r2, [sp, #0]
 8004992:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8004996:	d9f3      	bls.n	8004980 <USB_DevInit+0x22c>
 8004998:	e739      	b.n	800480e <USB_DevInit+0xba>
  USBx_DEVICE->DCFG |= speed;
 800499a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  return HAL_OK;
 80049a6:	e724      	b.n	80047f2 <USB_DevInit+0x9e>
 80049a8:	803c3800 	.word	0x803c3800

080049ac <USB_FlushTxFifo>:
{
 80049ac:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	e002      	b.n	80049ba <USB_FlushTxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049b4:	6903      	ldr	r3, [r0, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	db09      	blt.n	80049ce <USB_FlushTxFifo+0x22>
    count++;
 80049ba:	9b01      	ldr	r3, [sp, #4]
 80049bc:	3301      	adds	r3, #1
 80049be:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80049c0:	9b01      	ldr	r3, [sp, #4]
 80049c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049c6:	d9f5      	bls.n	80049b4 <USB_FlushTxFifo+0x8>
      return HAL_TIMEOUT;
 80049c8:	2003      	movs	r0, #3
}
 80049ca:	b002      	add	sp, #8
 80049cc:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049ce:	0189      	lsls	r1, r1, #6
  count = 0U;
 80049d0:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049d2:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 80049d6:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049d8:	6101      	str	r1, [r0, #16]
 80049da:	e003      	b.n	80049e4 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049dc:	6903      	ldr	r3, [r0, #16]
 80049de:	f013 0320 	ands.w	r3, r3, #32
 80049e2:	d007      	beq.n	80049f4 <USB_FlushTxFifo+0x48>
    count++;
 80049e4:	9b01      	ldr	r3, [sp, #4]
 80049e6:	3301      	adds	r3, #1
 80049e8:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80049ea:	9b01      	ldr	r3, [sp, #4]
 80049ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049f0:	d9f4      	bls.n	80049dc <USB_FlushTxFifo+0x30>
 80049f2:	e7e9      	b.n	80049c8 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 80049f4:	4618      	mov	r0, r3
}
 80049f6:	b002      	add	sp, #8
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop

080049fc <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049fc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a00:	f013 0006 	ands.w	r0, r3, #6
 8004a04:	d004      	beq.n	8004a10 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8004a06:	f013 0f02 	tst.w	r3, #2
 8004a0a:	bf14      	ite	ne
 8004a0c:	2002      	movne	r0, #2
 8004a0e:	200f      	moveq	r0, #15
}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop

08004a14 <USB_ActivateEndpoint>:
{
 8004a14:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8004a16:	780a      	ldrb	r2, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f002 0e0f 	and.w	lr, r2, #15
 8004a1e:	fa03 f30e 	lsl.w	r3, r3, lr
  if (ep->is_in == 1U)
 8004a22:	f891 e001 	ldrb.w	lr, [r1, #1]
 8004a26:	f1be 0f01 	cmp.w	lr, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a2a:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a2e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
  if (ep->is_in == 1U)
 8004a32:	d01a      	beq.n	8004a6a <USB_ActivateEndpoint+0x56>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a34:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8004a38:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8004a3c:	f8cc 301c 	str.w	r3, [ip, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a40:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	d40e      	bmi.n	8004a66 <USB_ActivateEndpoint+0x52>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a48:	688b      	ldr	r3, [r1, #8]
 8004a4a:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
                                    ((uint32_t)ep->type << 18) |
 8004a4e:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a54:	4323      	orrs	r3, r4
 8004a56:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8004a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a62:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004a66:	2000      	movs	r0, #0
 8004a68:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a6a:	f8dc 401c 	ldr.w	r4, [ip, #28]
 8004a6e:	4323      	orrs	r3, r4
 8004a70:	f8cc 301c 	str.w	r3, [ip, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a74:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004a78:	041c      	lsls	r4, r3, #16
 8004a7a:	d4f4      	bmi.n	8004a66 <USB_ActivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a7c:	688b      	ldr	r3, [r1, #8]
 8004a7e:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a82:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a88:	4323      	orrs	r3, r4
 8004a8a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8004a8e:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8004a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a9a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	bd10      	pop	{r4, pc}
 8004aa2:	bf00      	nop

08004aa4 <USB_DeactivateEndpoint>:
{
 8004aa4:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 8004aa6:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8004aa8:	7849      	ldrb	r1, [r1, #1]
 8004aaa:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aac:	eb00 1342 	add.w	r3, r0, r2, lsl #5
  if (ep->is_in == 1U)
 8004ab0:	d02c      	beq.n	8004b0c <USB_DeactivateEndpoint+0x68>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ab2:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8004ab6:	2900      	cmp	r1, #0
 8004ab8:	db1b      	blt.n	8004af2 <USB_DeactivateEndpoint+0x4e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004aba:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8004abe:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8004ac2:	f002 020f 	and.w	r2, r2, #15
 8004ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aca:	ea24 0402 	bic.w	r4, r4, r2
 8004ace:	f8c0 483c 	str.w	r4, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ad2:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ad6:	4922      	ldr	r1, [pc, #136]	@ (8004b60 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ad8:	ea24 0202 	bic.w	r2, r4, r2
 8004adc:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ae0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
}
 8004ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ae8:	4011      	ands	r1, r2
}
 8004aea:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004aec:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
}
 8004af0:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004af2:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8004af6:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 8004afa:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004afe:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8004b02:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004b06:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
 8004b0a:	e7d6      	b.n	8004aba <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b0c:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8004b10:	2900      	cmp	r1, #0
 8004b12:	da0b      	bge.n	8004b2c <USB_DeactivateEndpoint+0x88>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b14:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8004b18:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 8004b1c:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b20:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8004b24:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004b28:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b2c:	f8d0 183c 	ldr.w	r1, [r0, #2108]	@ 0x83c
 8004b30:	f002 040f 	and.w	r4, r2, #15
 8004b34:	2201      	movs	r2, #1
 8004b36:	40a2      	lsls	r2, r4
 8004b38:	ea21 0102 	bic.w	r1, r1, r2
 8004b3c:	f8c0 183c 	str.w	r1, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b40:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b44:	4907      	ldr	r1, [pc, #28]	@ (8004b64 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b46:	ea24 0202 	bic.w	r2, r4, r2
 8004b4a:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b4e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
}
 8004b52:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b56:	4011      	ands	r1, r2
}
 8004b58:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b5a:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
}
 8004b5e:	4770      	bx	lr
 8004b60:	eff37800 	.word	0xeff37800
 8004b64:	ec337800 	.word	0xec337800

08004b68 <USB_EPStartXfer>:
{
 8004b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1U)
 8004b6c:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8004b6e:	780e      	ldrb	r6, [r1, #0]
    if (ep->xfer_len == 0U)
 8004b70:	690d      	ldr	r5, [r1, #16]
      if (ep->type == EP_TYPE_ISOC)
 8004b72:	f891 e004 	ldrb.w	lr, [r1, #4]
  if (ep->is_in == 1U)
 8004b76:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b78:	eb00 1346 	add.w	r3, r0, r6, lsl #5
  if (ep->is_in == 1U)
 8004b7c:	d05d      	beq.n	8004c3a <USB_EPStartXfer+0xd2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b7e:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	@ 0xb10
 8004b82:	0ce4      	lsrs	r4, r4, #19
 8004b84:	04e4      	lsls	r4, r4, #19
 8004b86:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b8a:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	@ 0xb10
 8004b8e:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 8004b92:	f424 14c0 	bic.w	r4, r4, #1572864	@ 0x180000
 8004b96:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b9a:	f503 6c30 	add.w	ip, r3, #2816	@ 0xb00
        ep->xfer_len = ep->maxpacket;
 8004b9e:	688c      	ldr	r4, [r1, #8]
    if (epnum == 0U)
 8004ba0:	bb56      	cbnz	r6, 8004bf8 <USB_EPStartXfer+0x90>
      if (ep->xfer_len > 0U)
 8004ba2:	b105      	cbz	r5, 8004ba6 <USB_EPStartXfer+0x3e>
        ep->xfer_len = ep->maxpacket;
 8004ba4:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8004ba6:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ba8:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8004bac:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004bb0:	432c      	orrs	r4, r5
 8004bb2:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bb6:	f8dc 4010 	ldr.w	r4, [ip, #16]
    if (dma == 1U)
 8004bba:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bbc:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004bc0:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8004bc4:	d033      	beq.n	8004c2e <USB_EPStartXfer+0xc6>
    if (ep->type == EP_TYPE_ISOC)
 8004bc6:	f1be 0f01 	cmp.w	lr, #1
 8004bca:	d10c      	bne.n	8004be6 <USB_EPStartXfer+0x7e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bcc:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 8004bd0:	f412 7f80 	tst.w	r2, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004bd4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8004bd8:	bf0c      	ite	eq
 8004bda:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bde:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 8004be2:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004be6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8004bea:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8004bee:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (ep->xfer_len == 0U)
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	d0d5      	beq.n	8004ba8 <USB_EPStartXfer+0x40>
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004bfc:	4e6b      	ldr	r6, [pc, #428]	@ (8004dac <USB_EPStartXfer+0x244>)
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004bfe:	4425      	add	r5, r4
 8004c00:	3d01      	subs	r5, #1
 8004c02:	fbb5 f5f4 	udiv	r5, r5, r4
 8004c06:	b2ad      	uxth	r5, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004c08:	fb05 f404 	mul.w	r4, r5, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c0c:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 8004c10:	f8dc 6010 	ldr.w	r6, [ip, #16]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004c14:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c16:	4335      	orrs	r5, r6
 8004c18:	f8cc 5010 	str.w	r5, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c1c:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8004c20:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004c24:	432c      	orrs	r4, r5
    if (dma == 1U)
 8004c26:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c28:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8004c2c:	d1cb      	bne.n	8004bc6 <USB_EPStartXfer+0x5e>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c2e:	68ca      	ldr	r2, [r1, #12]
 8004c30:	2a00      	cmp	r2, #0
 8004c32:	d0c8      	beq.n	8004bc6 <USB_EPStartXfer+0x5e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c34:	f8cc 2014 	str.w	r2, [ip, #20]
 8004c38:	e7c5      	b.n	8004bc6 <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c3a:	f503 6410 	add.w	r4, r3, #2304	@ 0x900
 8004c3e:	6927      	ldr	r7, [r4, #16]
    if (ep->xfer_len == 0U)
 8004c40:	b3a5      	cbz	r5, 8004cac <USB_EPStartXfer+0x144>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c42:	0cff      	lsrs	r7, r7, #19
 8004c44:	04ff      	lsls	r7, r7, #19
 8004c46:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c48:	6927      	ldr	r7, [r4, #16]
        if (ep->xfer_len > ep->maxpacket)
 8004c4a:	f8d1 9008 	ldr.w	r9, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c4e:	f027 57ff 	bic.w	r7, r7, #534773760	@ 0x1fe00000
 8004c52:	f427 17c0 	bic.w	r7, r7, #1572864	@ 0x180000
 8004c56:	6127      	str	r7, [r4, #16]
      if (epnum == 0U)
 8004c58:	2e00      	cmp	r6, #0
 8004c5a:	d161      	bne.n	8004d20 <USB_EPStartXfer+0x1b8>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c5c:	6927      	ldr	r7, [r4, #16]
        if (ep->xfer_len > ep->maxpacket)
 8004c5e:	454d      	cmp	r5, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c60:	f447 2700 	orr.w	r7, r7, #524288	@ 0x80000
          ep->xfer_len = ep->maxpacket;
 8004c64:	bf84      	itt	hi
 8004c66:	f8c1 9010 	strhi.w	r9, [r1, #16]
 8004c6a:	464d      	movhi	r5, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c6c:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c6e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8004c72:	f3c5 0712 	ubfx	r7, r5, #0, #19
 8004c76:	ea47 070c 	orr.w	r7, r7, ip
      if (ep->type == EP_TYPE_ISOC)
 8004c7a:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c7e:	6127      	str	r7, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8004c80:	d06c      	beq.n	8004d5c <USB_EPStartXfer+0x1f4>
    if (dma == 1U)
 8004c82:	2a01      	cmp	r2, #1
 8004c84:	f000 808c 	beq.w	8004da0 <USB_EPStartXfer+0x238>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c88:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004c8c:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8004c90:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        if (ep->xfer_len > 0U)
 8004c94:	2d00      	cmp	r5, #0
 8004c96:	d0ac      	beq.n	8004bf2 <USB_EPStartXfer+0x8a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c98:	f8d0 2834 	ldr.w	r2, [r0, #2100]	@ 0x834
 8004c9c:	f006 060f 	and.w	r6, r6, #15
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	40b3      	lsls	r3, r6
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8004caa:	e7a2      	b.n	8004bf2 <USB_EPStartXfer+0x8a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cac:	f027 57ff 	bic.w	r7, r7, #534773760	@ 0x1fe00000
 8004cb0:	f427 17c0 	bic.w	r7, r7, #1572864	@ 0x180000
 8004cb4:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cb6:	6927      	ldr	r7, [r4, #16]
 8004cb8:	f447 2700 	orr.w	r7, r7, #524288	@ 0x80000
 8004cbc:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cbe:	6927      	ldr	r7, [r4, #16]
 8004cc0:	0cff      	lsrs	r7, r7, #19
 8004cc2:	04ff      	lsls	r7, r7, #19
    if (dma == 1U)
 8004cc4:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cc6:	6127      	str	r7, [r4, #16]
    if (dma == 1U)
 8004cc8:	d039      	beq.n	8004d3e <USB_EPStartXfer+0x1d6>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cca:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004cce:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cd2:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 8004cd6:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004cda:	d18a      	bne.n	8004bf2 <USB_EPStartXfer+0x8a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cdc:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
 8004ce0:	f414 7f80 	tst.w	r4, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ce4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8004ce8:	bf0c      	ite	eq
 8004cea:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cee:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
 8004cf2:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
  if (dma == 0U)
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	f47f af7b 	bne.w	8004bf2 <USB_EPStartXfer+0x8a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004cfc:	b2ad      	uxth	r5, r5
 8004cfe:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 8004d00:	08ad      	lsrs	r5, r5, #2
 8004d02:	f43f af76 	beq.w	8004bf2 <USB_EPStartXfer+0x8a>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d06:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d08:	eb00 3606 	add.w	r6, r0, r6, lsl #12
 8004d0c:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8004d10:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8004d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d18:	6032      	str	r2, [r6, #0]
    for (i = 0U; i < count32b; i++)
 8004d1a:	4299      	cmp	r1, r3
 8004d1c:	d1fa      	bne.n	8004d14 <USB_EPStartXfer+0x1ac>
 8004d1e:	e768      	b.n	8004bf2 <USB_EPStartXfer+0x8a>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d20:	4f22      	ldr	r7, [pc, #136]	@ (8004dac <USB_EPStartXfer+0x244>)
 8004d22:	f8d4 8010 	ldr.w	r8, [r4, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d26:	eb05 0c09 	add.w	ip, r5, r9
 8004d2a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004d2e:	fbbc fcf9 	udiv	ip, ip, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d32:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 8004d36:	ea47 0708 	orr.w	r7, r7, r8
 8004d3a:	6127      	str	r7, [r4, #16]
 8004d3c:	e797      	b.n	8004c6e <USB_EPStartXfer+0x106>
      if ((uint32_t)ep->dma_addr != 0U)
 8004d3e:	69ca      	ldr	r2, [r1, #28]
 8004d40:	b102      	cbz	r2, 8004d44 <USB_EPStartXfer+0x1dc>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d42:	6162      	str	r2, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 8004d44:	f1be 0f01 	cmp.w	lr, #1
 8004d48:	d01c      	beq.n	8004d84 <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d4a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004d4e:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8004d52:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
 8004d56:	2000      	movs	r0, #0
 8004d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d5c:	6927      	ldr	r7, [r4, #16]
 8004d5e:	f027 47c0 	bic.w	r7, r7, #1610612736	@ 0x60000000
 8004d62:	6127      	str	r7, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d64:	6927      	ldr	r7, [r4, #16]
    if (dma == 1U)
 8004d66:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d68:	f047 5700 	orr.w	r7, r7, #536870912	@ 0x20000000
 8004d6c:	6127      	str	r7, [r4, #16]
    if (dma == 1U)
 8004d6e:	d006      	beq.n	8004d7e <USB_EPStartXfer+0x216>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d70:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8004d74:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 8004d78:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004d7c:	e7ae      	b.n	8004cdc <USB_EPStartXfer+0x174>
      if ((uint32_t)ep->dma_addr != 0U)
 8004d7e:	69ca      	ldr	r2, [r1, #28]
 8004d80:	b102      	cbz	r2, 8004d84 <USB_EPStartXfer+0x21c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d82:	6162      	str	r2, [r4, #20]
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d84:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 8004d88:	f412 7f80 	tst.w	r2, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d8c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004d90:	bf0c      	ite	eq
 8004d92:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d96:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 8004d9a:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8004d9e:	e7d4      	b.n	8004d4a <USB_EPStartXfer+0x1e2>
      if ((uint32_t)ep->dma_addr != 0U)
 8004da0:	69ca      	ldr	r2, [r1, #28]
 8004da2:	2a00      	cmp	r2, #0
 8004da4:	d0d1      	beq.n	8004d4a <USB_EPStartXfer+0x1e2>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004da6:	6162      	str	r2, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 8004da8:	e7cf      	b.n	8004d4a <USB_EPStartXfer+0x1e2>
 8004daa:	bf00      	nop
 8004dac:	1ff80000 	.word	0x1ff80000

08004db0 <USB_EPStopXfer>:
{
 8004db0:	b410      	push	{r4}
  if (ep->is_in == 1U)
 8004db2:	784a      	ldrb	r2, [r1, #1]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004db4:	780b      	ldrb	r3, [r1, #0]
{
 8004db6:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8004db8:	2100      	movs	r1, #0
  if (ep->is_in == 1U)
 8004dba:	2a01      	cmp	r2, #1
  __IO uint32_t count = 0U;
 8004dbc:	9101      	str	r1, [sp, #4]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dbe:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 8004dc2:	d023      	beq.n	8004e0c <USB_EPStopXfer+0x5c>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dc4:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
 8004dc8:	18c2      	adds	r2, r0, r3
 8004dca:	58c1      	ldr	r1, [r0, r3]
 8004dcc:	2900      	cmp	r1, #0
 8004dce:	db04      	blt.n	8004dda <USB_EPStopXfer+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;
 8004dd0:	2000      	movs	r0, #0
}
 8004dd2:	b003      	add	sp, #12
 8004dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dd8:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004dda:	58c4      	ldr	r4, [r0, r3]
 8004ddc:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8004de0:	50c4      	str	r4, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004de2:	58c4      	ldr	r4, [r0, r3]
 8004de4:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8004de8:	50c4      	str	r4, [r0, r3]
        if (count > 10000U)
 8004dea:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004dee:	e002      	b.n	8004df6 <USB_EPStopXfer+0x46>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004df0:	6813      	ldr	r3, [r2, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	daec      	bge.n	8004dd0 <USB_EPStopXfer+0x20>
        count++;
 8004df6:	9b01      	ldr	r3, [sp, #4]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8004dfc:	9b01      	ldr	r3, [sp, #4]
 8004dfe:	428b      	cmp	r3, r1
 8004e00:	d9f6      	bls.n	8004df0 <USB_EPStopXfer+0x40>
          ret = HAL_ERROR;
 8004e02:	2001      	movs	r0, #1
}
 8004e04:	b003      	add	sp, #12
 8004e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e0a:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e0c:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8004e10:	18c2      	adds	r2, r0, r3
 8004e12:	58c1      	ldr	r1, [r0, r3]
 8004e14:	2900      	cmp	r1, #0
 8004e16:	dadb      	bge.n	8004dd0 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e18:	58c4      	ldr	r4, [r0, r3]
 8004e1a:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8004e1e:	50c4      	str	r4, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004e20:	58c4      	ldr	r4, [r0, r3]
 8004e22:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8004e26:	50c4      	str	r4, [r0, r3]
        if (count > 10000U)
 8004e28:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004e2c:	e002      	b.n	8004e34 <USB_EPStopXfer+0x84>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e2e:	6813      	ldr	r3, [r2, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	dacd      	bge.n	8004dd0 <USB_EPStopXfer+0x20>
        count++;
 8004e34:	9b01      	ldr	r3, [sp, #4]
 8004e36:	3301      	adds	r3, #1
 8004e38:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8004e3a:	9b01      	ldr	r3, [sp, #4]
 8004e3c:	428b      	cmp	r3, r1
 8004e3e:	d9f6      	bls.n	8004e2e <USB_EPStopXfer+0x7e>
 8004e40:	e7df      	b.n	8004e02 <USB_EPStopXfer+0x52>
 8004e42:	bf00      	nop

08004e44 <USB_WritePacket>:
{
 8004e44:	b410      	push	{r4}
 8004e46:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8004e4a:	b964      	cbnz	r4, 8004e66 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e4c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	d009      	beq.n	8004e66 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e52:	3201      	adds	r2, #1
 8004e54:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8004e58:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004e5c:	f851 2b04 	ldr.w	r2, [r1], #4
 8004e60:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8004e62:	428b      	cmp	r3, r1
 8004e64:	d1fa      	bne.n	8004e5c <USB_WritePacket+0x18>
}
 8004e66:	2000      	movs	r0, #0
 8004e68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop

08004e70 <USB_ReadPacket>:
{
 8004e70:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 8004e72:	ea5f 0e92 	movs.w	lr, r2, lsr #2
{
 8004e76:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8004e78:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8004e7c:	d01c      	beq.n	8004eb8 <USB_ReadPacket+0x48>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e7e:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
  uint8_t *pDest = dest;
 8004e82:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 8004e84:	2300      	movs	r3, #0
 8004e86:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e88:	6822      	ldr	r2, [r4, #0]
 8004e8a:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 8004e8e:	459e      	cmp	lr, r3
 8004e90:	d1f9      	bne.n	8004e86 <USB_ReadPacket+0x16>
    pDest++;
 8004e92:	eb01 008e 	add.w	r0, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 8004e96:	b176      	cbz	r6, 8004eb6 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e98:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
    } while (remaining_bytes != 0U);
 8004e9c:	2e01      	cmp	r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e9e:	682b      	ldr	r3, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ea0:	7003      	strb	r3, [r0, #0]
    } while (remaining_bytes != 0U);
 8004ea2:	d007      	beq.n	8004eb4 <USB_ReadPacket+0x44>
 8004ea4:	2e02      	cmp	r6, #2
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ea6:	ea4f 2213 	mov.w	r2, r3, lsr #8
 8004eaa:	bf18      	it	ne
 8004eac:	0c1b      	lsrne	r3, r3, #16
 8004eae:	7042      	strb	r2, [r0, #1]
 8004eb0:	bf18      	it	ne
 8004eb2:	7083      	strbne	r3, [r0, #2]
      pDest++;
 8004eb4:	4430      	add	r0, r6
}
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8004eb8:	4608      	mov	r0, r1
 8004eba:	e7ec      	b.n	8004e96 <USB_ReadPacket+0x26>

08004ebc <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8004ebc:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8004ebe:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004ec0:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ec2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8004ec6:	d00c      	beq.n	8004ee2 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ec8:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8004ecc:	2a00      	cmp	r2, #0
 8004ece:	db00      	blt.n	8004ed2 <USB_EPSetStall+0x16>
 8004ed0:	b9d3      	cbnz	r3, 8004f08 <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ed2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004ed6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004eda:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004ede:	2000      	movs	r0, #0
 8004ee0:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ee2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8004ee6:	2a00      	cmp	r2, #0
 8004ee8:	db06      	blt.n	8004ef8 <USB_EPSetStall+0x3c>
 8004eea:	b12b      	cbz	r3, 8004ef8 <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004eec:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004ef0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ef4:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ef8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004efc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f00:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8004f04:	2000      	movs	r0, #0
 8004f06:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004f08:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004f0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f10:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8004f14:	e7dd      	b.n	8004ed2 <USB_EPSetStall+0x16>
 8004f16:	bf00      	nop

08004f18 <USB_EPClearStall>:
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f18:	790b      	ldrb	r3, [r1, #4]
  if (ep->is_in == 1U)
 8004f1a:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f1c:	f891 c000 	ldrb.w	ip, [r1]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f20:	3b02      	subs	r3, #2
  if (ep->is_in == 1U)
 8004f22:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f24:	eb00 104c 	add.w	r0, r0, ip, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f28:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 8004f2a:	d011      	beq.n	8004f50 <USB_EPClearStall+0x38>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f2c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f30:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f32:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8004f36:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f3a:	d901      	bls.n	8004f40 <USB_EPClearStall+0x28>
}
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f40:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f48:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f50:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f54:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f56:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8004f5a:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f5e:	d8ed      	bhi.n	8004f3c <USB_EPClearStall+0x24>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f60:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f68:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	4770      	bx	lr

08004f70 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f70:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004f74:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004f78:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f7c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004f80:	0109      	lsls	r1, r1, #4
 8004f82:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8004f86:	4319      	orrs	r1, r3
 8004f88:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	4770      	bx	lr

08004f90 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f90:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 8004f94:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f96:	f022 0203 	bic.w	r2, r2, #3
 8004f9a:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f9e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8004fa2:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8004fa6:	f023 0302 	bic.w	r3, r3, #2
}
 8004faa:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004fac:	604b      	str	r3, [r1, #4]
}
 8004fae:	4770      	bx	lr

08004fb0 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fb0:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 8004fb4:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fb6:	f022 0203 	bic.w	r2, r2, #3
 8004fba:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fbe:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8004fc2:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8004fc6:	f043 0302 	orr.w	r3, r3, #2
}
 8004fca:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fcc:	604b      	str	r3, [r1, #4]
}
 8004fce:	4770      	bx	lr

08004fd0 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004fd0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004fd2:	6980      	ldr	r0, [r0, #24]
}
 8004fd4:	4010      	ands	r0, r2
 8004fd6:	4770      	bx	lr

08004fd8 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004fd8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004fdc:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fe0:	69c0      	ldr	r0, [r0, #28]
 8004fe2:	4018      	ands	r0, r3
}
 8004fe4:	0c00      	lsrs	r0, r0, #16
 8004fe6:	4770      	bx	lr

08004fe8 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004fe8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004fec:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ff0:	69c0      	ldr	r0, [r0, #28]
 8004ff2:	4018      	ands	r0, r3
}
 8004ff4:	b280      	uxth	r0, r0
 8004ff6:	4770      	bx	lr

08004ff8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004ff8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ffc:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005000:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005004:	6940      	ldr	r0, [r0, #20]
}
 8005006:	4010      	ands	r0, r2
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop

0800500c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800500c:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005010:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005014:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005018:	f001 010f 	and.w	r1, r1, #15
 800501c:	40cb      	lsrs	r3, r1
 800501e:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005020:	f8d0 0908 	ldr.w	r0, [r0, #2312]	@ 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005024:	b2db      	uxtb	r3, r3
 8005026:	4313      	orrs	r3, r2
}
 8005028:	4018      	ands	r0, r3
 800502a:	4770      	bx	lr

0800502c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800502c:	6940      	ldr	r0, [r0, #20]
}
 800502e:	f000 0001 	and.w	r0, r0, #1
 8005032:	4770      	bx	lr

08005034 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005034:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
{
 8005038:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800503a:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 800503e:	f022 0207 	bic.w	r2, r2, #7
 8005042:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005046:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800504a:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 800504e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
}
 8005052:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005054:	604b      	str	r3, [r1, #4]
}
 8005056:	4770      	bx	lr

08005058 <USB_EP0_OutStart>:
{
 8005058:	b430      	push	{r4, r5}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800505a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800505c:	4c11      	ldr	r4, [pc, #68]	@ (80050a4 <USB_EP0_OutStart+0x4c>)
 800505e:	42a5      	cmp	r5, r4
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005060:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005064:	d903      	bls.n	800506e <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005066:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
 800506a:	2c00      	cmp	r4, #0
 800506c:	db16      	blt.n	800509c <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800506e:	2400      	movs	r4, #0
 8005070:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005072:	691c      	ldr	r4, [r3, #16]
 8005074:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8005078:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800507a:	691c      	ldr	r4, [r3, #16]
 800507c:	f044 0418 	orr.w	r4, r4, #24
 8005080:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005082:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 8005084:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005086:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 800508a:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 800508c:	d106      	bne.n	800509c <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800508e:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005090:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005094:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005098:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800509c:	2000      	movs	r0, #0
 800509e:	bc30      	pop	{r4, r5}
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	4f54300a 	.word	0x4f54300a

080050a8 <ssd1306_UpdateScreen>:
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
    }
}

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80050a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ac:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800513c <ssd1306_UpdateScreen+0x94>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80050b0:	4f21      	ldr	r7, [pc, #132]	@ (8005138 <ssd1306_UpdateScreen+0x90>)
void ssd1306_UpdateScreen(void) {
 80050b2:	b086      	sub	sp, #24
 80050b4:	25b0      	movs	r5, #176	@ 0xb0
 80050b6:	f10d 0817 	add.w	r8, sp, #23
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80050ba:	f04f 0a00 	mov.w	sl, #0
 80050be:	2401      	movs	r4, #1
 80050c0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80050c4:	4623      	mov	r3, r4
 80050c6:	2200      	movs	r2, #0
 80050c8:	2178      	movs	r1, #120	@ 0x78
 80050ca:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80050ce:	f8cd 8000 	str.w	r8, [sp]
 80050d2:	4638      	mov	r0, r7
 80050d4:	f88d 5017 	strb.w	r5, [sp, #23]
 80050d8:	f7fd f830 	bl	800213c <HAL_I2C_Mem_Write>
 80050dc:	4623      	mov	r3, r4
 80050de:	2200      	movs	r2, #0
 80050e0:	2178      	movs	r1, #120	@ 0x78
 80050e2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80050e6:	f8cd 8000 	str.w	r8, [sp]
 80050ea:	4638      	mov	r0, r7
 80050ec:	f88d a017 	strb.w	sl, [sp, #23]
 80050f0:	f7fd f824 	bl	800213c <HAL_I2C_Mem_Write>
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80050f4:	2010      	movs	r0, #16
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80050f6:	4623      	mov	r3, r4
 80050f8:	2200      	movs	r2, #0
 80050fa:	2178      	movs	r1, #120	@ 0x78
 80050fc:	f88d 0017 	strb.w	r0, [sp, #23]
 8005100:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005104:	f8cd 8000 	str.w	r8, [sp]
 8005108:	4638      	mov	r0, r7
 800510a:	f7fd f817 	bl	800213c <HAL_I2C_Mem_Write>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800510e:	4425      	add	r5, r4
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005110:	2380      	movs	r3, #128	@ 0x80
 8005112:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8005116:	f8cd 9000 	str.w	r9, [sp]
 800511a:	4623      	mov	r3, r4
 800511c:	2240      	movs	r2, #64	@ 0x40
 800511e:	2178      	movs	r1, #120	@ 0x78
 8005120:	4638      	mov	r0, r7
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005122:	b2ed      	uxtb	r5, r5
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005124:	f7fd f80a 	bl	800213c <HAL_I2C_Mem_Write>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005128:	2db4      	cmp	r5, #180	@ 0xb4
 800512a:	f109 0980 	add.w	r9, r9, #128	@ 0x80
 800512e:	d1c6      	bne.n	80050be <ssd1306_UpdateScreen+0x16>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
    }
}
 8005130:	b006      	add	sp, #24
 8005132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005136:	bf00      	nop
 8005138:	20000298 	.word	0x20000298
 800513c:	200003a8 	.word	0x200003a8

08005140 <ssd1306_Init>:
void ssd1306_Init(void) {
 8005140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    HAL_Delay(100);
 8005144:	2064      	movs	r0, #100	@ 0x64
void ssd1306_Init(void) {
 8005146:	b086      	sub	sp, #24
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005148:	4fc2      	ldr	r7, [pc, #776]	@ (8005454 <ssd1306_Init+0x314>)
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
        SSD1306.DisplayOn = 0;
 800514a:	f8df 9310 	ldr.w	r9, [pc, #784]	@ 800545c <ssd1306_Init+0x31c>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800514e:	2401      	movs	r4, #1
        SSD1306.DisplayOn = 0;
 8005150:	2500      	movs	r5, #0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005152:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8005156:	f10d 0817 	add.w	r8, sp, #23
    HAL_Delay(100);
 800515a:	f7fc f8bb 	bl	80012d4 <HAL_Delay>
        SSD1306.DisplayOn = 0;
 800515e:	20ae      	movs	r0, #174	@ 0xae
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005160:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005164:	f8cd 8000 	str.w	r8, [sp]
 8005168:	4623      	mov	r3, r4
 800516a:	462a      	mov	r2, r5
 800516c:	f88d 0017 	strb.w	r0, [sp, #23]
        SSD1306.DisplayOn = 0;
 8005170:	f889 5005 	strb.w	r5, [r9, #5]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005174:	2178      	movs	r1, #120	@ 0x78
 8005176:	4638      	mov	r0, r7
 8005178:	f7fc ffe0 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800517c:	f04f 0a20 	mov.w	sl, #32
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005180:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005184:	4623      	mov	r3, r4
 8005186:	462a      	mov	r2, r5
 8005188:	f8cd 8000 	str.w	r8, [sp]
 800518c:	2178      	movs	r1, #120	@ 0x78
 800518e:	4638      	mov	r0, r7
 8005190:	f88d a017 	strb.w	sl, [sp, #23]
 8005194:	f7fc ffd2 	bl	800213c <HAL_I2C_Mem_Write>
 8005198:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800519c:	4623      	mov	r3, r4
 800519e:	462a      	mov	r2, r5
 80051a0:	f8cd 8000 	str.w	r8, [sp]
 80051a4:	2178      	movs	r1, #120	@ 0x78
 80051a6:	4638      	mov	r0, r7
 80051a8:	f88d 5017 	strb.w	r5, [sp, #23]
 80051ac:	f7fc ffc6 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80051b0:	20b0      	movs	r0, #176	@ 0xb0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80051b2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80051b6:	4623      	mov	r3, r4
 80051b8:	462a      	mov	r2, r5
 80051ba:	f88d 0017 	strb.w	r0, [sp, #23]
 80051be:	f8cd 8000 	str.w	r8, [sp]
 80051c2:	2178      	movs	r1, #120	@ 0x78
 80051c4:	4638      	mov	r0, r7
 80051c6:	f7fc ffb9 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 80051ca:	20c0      	movs	r0, #192	@ 0xc0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80051cc:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80051d0:	4623      	mov	r3, r4
 80051d2:	462a      	mov	r2, r5
 80051d4:	f88d 0017 	strb.w	r0, [sp, #23]
 80051d8:	f8cd 8000 	str.w	r8, [sp]
 80051dc:	2178      	movs	r1, #120	@ 0x78
 80051de:	4638      	mov	r0, r7
 80051e0:	f7fc ffac 	bl	800213c <HAL_I2C_Mem_Write>
 80051e4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80051e8:	4623      	mov	r3, r4
 80051ea:	462a      	mov	r2, r5
 80051ec:	f8cd 8000 	str.w	r8, [sp]
 80051f0:	2178      	movs	r1, #120	@ 0x78
 80051f2:	4638      	mov	r0, r7
 80051f4:	f88d 5017 	strb.w	r5, [sp, #23]
 80051f8:	f7fc ffa0 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x10); //---set high column address
 80051fc:	2010      	movs	r0, #16
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80051fe:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005202:	4623      	mov	r3, r4
 8005204:	462a      	mov	r2, r5
 8005206:	f88d 0017 	strb.w	r0, [sp, #23]
 800520a:	f8cd 8000 	str.w	r8, [sp]
 800520e:	2178      	movs	r1, #120	@ 0x78
 8005210:	4638      	mov	r0, r7
 8005212:	f7fc ff93 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005216:	2040      	movs	r0, #64	@ 0x40
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005218:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800521c:	4623      	mov	r3, r4
 800521e:	462a      	mov	r2, r5
 8005220:	f88d 0017 	strb.w	r0, [sp, #23]
 8005224:	f8cd 8000 	str.w	r8, [sp]
 8005228:	2178      	movs	r1, #120	@ 0x78
 800522a:	4638      	mov	r0, r7
 800522c:	f7fc ff86 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005230:	2081      	movs	r0, #129	@ 0x81
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005232:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005236:	4623      	mov	r3, r4
 8005238:	462a      	mov	r2, r5
 800523a:	f88d 0017 	strb.w	r0, [sp, #23]
 800523e:	f8cd 8000 	str.w	r8, [sp]
 8005242:	2178      	movs	r1, #120	@ 0x78
 8005244:	4638      	mov	r0, r7
 8005246:	f7fc ff79 	bl	800213c <HAL_I2C_Mem_Write>
 800524a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800524e:	4623      	mov	r3, r4
 8005250:	462a      	mov	r2, r5
 8005252:	f8cd 8000 	str.w	r8, [sp]
 8005256:	2178      	movs	r1, #120	@ 0x78
 8005258:	4638      	mov	r0, r7
 800525a:	f88d 6017 	strb.w	r6, [sp, #23]
 800525e:	f7fc ff6d 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8005262:	20a0      	movs	r0, #160	@ 0xa0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005264:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005268:	4623      	mov	r3, r4
 800526a:	462a      	mov	r2, r5
 800526c:	f88d 0017 	strb.w	r0, [sp, #23]
 8005270:	f8cd 8000 	str.w	r8, [sp]
 8005274:	2178      	movs	r1, #120	@ 0x78
 8005276:	4638      	mov	r0, r7
 8005278:	f7fc ff60 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA6); //--set normal color
 800527c:	20a6      	movs	r0, #166	@ 0xa6
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800527e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005282:	4623      	mov	r3, r4
 8005284:	462a      	mov	r2, r5
 8005286:	f88d 0017 	strb.w	r0, [sp, #23]
 800528a:	f8cd 8000 	str.w	r8, [sp]
 800528e:	2178      	movs	r1, #120	@ 0x78
 8005290:	4638      	mov	r0, r7
 8005292:	f7fc ff53 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005296:	20a8      	movs	r0, #168	@ 0xa8
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005298:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800529c:	4623      	mov	r3, r4
 800529e:	462a      	mov	r2, r5
 80052a0:	f88d 0017 	strb.w	r0, [sp, #23]
 80052a4:	f8cd 8000 	str.w	r8, [sp]
 80052a8:	2178      	movs	r1, #120	@ 0x78
 80052aa:	4638      	mov	r0, r7
 80052ac:	f7fc ff46 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x1F); //
 80052b0:	201f      	movs	r0, #31
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80052b2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80052b6:	4623      	mov	r3, r4
 80052b8:	462a      	mov	r2, r5
 80052ba:	f88d 0017 	strb.w	r0, [sp, #23]
 80052be:	f8cd 8000 	str.w	r8, [sp]
 80052c2:	2178      	movs	r1, #120	@ 0x78
 80052c4:	4638      	mov	r0, r7
 80052c6:	f7fc ff39 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80052ca:	20a4      	movs	r0, #164	@ 0xa4
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80052cc:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80052d0:	4623      	mov	r3, r4
 80052d2:	462a      	mov	r2, r5
 80052d4:	f88d 0017 	strb.w	r0, [sp, #23]
 80052d8:	f8cd 8000 	str.w	r8, [sp]
 80052dc:	2178      	movs	r1, #120	@ 0x78
 80052de:	4638      	mov	r0, r7
 80052e0:	f7fc ff2c 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80052e4:	20d3      	movs	r0, #211	@ 0xd3
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80052e6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80052ea:	4623      	mov	r3, r4
 80052ec:	462a      	mov	r2, r5
 80052ee:	f88d 0017 	strb.w	r0, [sp, #23]
 80052f2:	f8cd 8000 	str.w	r8, [sp]
 80052f6:	2178      	movs	r1, #120	@ 0x78
 80052f8:	4638      	mov	r0, r7
 80052fa:	f7fc ff1f 	bl	800213c <HAL_I2C_Mem_Write>
 80052fe:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005302:	4623      	mov	r3, r4
 8005304:	462a      	mov	r2, r5
 8005306:	f8cd 8000 	str.w	r8, [sp]
 800530a:	2178      	movs	r1, #120	@ 0x78
 800530c:	4638      	mov	r0, r7
 800530e:	f88d 5017 	strb.w	r5, [sp, #23]
 8005312:	f7fc ff13 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005316:	20d5      	movs	r0, #213	@ 0xd5
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005318:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800531c:	4623      	mov	r3, r4
 800531e:	462a      	mov	r2, r5
 8005320:	f88d 0017 	strb.w	r0, [sp, #23]
 8005324:	f8cd 8000 	str.w	r8, [sp]
 8005328:	2178      	movs	r1, #120	@ 0x78
 800532a:	4638      	mov	r0, r7
 800532c:	f7fc ff06 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005330:	20f0      	movs	r0, #240	@ 0xf0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005332:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005336:	4623      	mov	r3, r4
 8005338:	462a      	mov	r2, r5
 800533a:	f88d 0017 	strb.w	r0, [sp, #23]
 800533e:	f8cd 8000 	str.w	r8, [sp]
 8005342:	2178      	movs	r1, #120	@ 0x78
 8005344:	4638      	mov	r0, r7
 8005346:	f7fc fef9 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800534a:	20d9      	movs	r0, #217	@ 0xd9
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800534c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005350:	4623      	mov	r3, r4
 8005352:	462a      	mov	r2, r5
 8005354:	f88d 0017 	strb.w	r0, [sp, #23]
 8005358:	f8cd 8000 	str.w	r8, [sp]
 800535c:	2178      	movs	r1, #120	@ 0x78
 800535e:	4638      	mov	r0, r7
 8005360:	f7fc feec 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x22); //
 8005364:	2022      	movs	r0, #34	@ 0x22
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005366:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800536a:	4623      	mov	r3, r4
 800536c:	462a      	mov	r2, r5
 800536e:	f88d 0017 	strb.w	r0, [sp, #23]
 8005372:	f8cd 8000 	str.w	r8, [sp]
 8005376:	2178      	movs	r1, #120	@ 0x78
 8005378:	4638      	mov	r0, r7
 800537a:	f7fc fedf 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800537e:	20da      	movs	r0, #218	@ 0xda
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005380:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005384:	4623      	mov	r3, r4
 8005386:	462a      	mov	r2, r5
 8005388:	f88d 0017 	strb.w	r0, [sp, #23]
 800538c:	f8cd 8000 	str.w	r8, [sp]
 8005390:	2178      	movs	r1, #120	@ 0x78
 8005392:	4638      	mov	r0, r7
 8005394:	f7fc fed2 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x02);
 8005398:	2002      	movs	r0, #2
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800539a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800539e:	4623      	mov	r3, r4
 80053a0:	462a      	mov	r2, r5
 80053a2:	f88d 0017 	strb.w	r0, [sp, #23]
 80053a6:	f8cd 8000 	str.w	r8, [sp]
 80053aa:	2178      	movs	r1, #120	@ 0x78
 80053ac:	4638      	mov	r0, r7
 80053ae:	f7fc fec5 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 80053b2:	20db      	movs	r0, #219	@ 0xdb
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80053b4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80053b8:	4623      	mov	r3, r4
 80053ba:	462a      	mov	r2, r5
 80053bc:	f88d 0017 	strb.w	r0, [sp, #23]
 80053c0:	f8cd 8000 	str.w	r8, [sp]
 80053c4:	2178      	movs	r1, #120	@ 0x78
 80053c6:	4638      	mov	r0, r7
 80053c8:	f7fc feb8 	bl	800213c <HAL_I2C_Mem_Write>
 80053cc:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80053d0:	4623      	mov	r3, r4
 80053d2:	462a      	mov	r2, r5
 80053d4:	f8cd 8000 	str.w	r8, [sp]
 80053d8:	2178      	movs	r1, #120	@ 0x78
 80053da:	4638      	mov	r0, r7
 80053dc:	f88d a017 	strb.w	sl, [sp, #23]
 80053e0:	f7fc feac 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80053e4:	208d      	movs	r0, #141	@ 0x8d
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80053e6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80053ea:	4623      	mov	r3, r4
 80053ec:	462a      	mov	r2, r5
 80053ee:	f88d 0017 	strb.w	r0, [sp, #23]
 80053f2:	f8cd 8000 	str.w	r8, [sp]
 80053f6:	2178      	movs	r1, #120	@ 0x78
 80053f8:	4638      	mov	r0, r7
 80053fa:	f7fc fe9f 	bl	800213c <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x14); //
 80053fe:	2014      	movs	r0, #20
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005400:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005404:	4623      	mov	r3, r4
 8005406:	462a      	mov	r2, r5
 8005408:	f88d 0017 	strb.w	r0, [sp, #23]
 800540c:	f8cd 8000 	str.w	r8, [sp]
 8005410:	2178      	movs	r1, #120	@ 0x78
 8005412:	4638      	mov	r0, r7
 8005414:	f7fc fe92 	bl	800213c <HAL_I2C_Mem_Write>
 8005418:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800541c:	4623      	mov	r3, r4
 800541e:	f8cd 8000 	str.w	r8, [sp]
 8005422:	462a      	mov	r2, r5
 8005424:	4638      	mov	r0, r7
        SSD1306.DisplayOn = 1;
 8005426:	f889 4005 	strb.w	r4, [r9, #5]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800542a:	2178      	movs	r1, #120	@ 0x78
 800542c:	26af      	movs	r6, #175	@ 0xaf
 800542e:	f88d 6017 	strb.w	r6, [sp, #23]
 8005432:	f7fc fe83 	bl	800213c <HAL_I2C_Mem_Write>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800543a:	4629      	mov	r1, r5
 800543c:	4806      	ldr	r0, [pc, #24]	@ (8005458 <ssd1306_Init+0x318>)
 800543e:	f001 fa25 	bl	800688c <memset>
    ssd1306_UpdateScreen();
 8005442:	f7ff fe31 	bl	80050a8 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8005446:	f8c9 5000 	str.w	r5, [r9]
    SSD1306.Initialized = 1;
 800544a:	f889 4004 	strb.w	r4, [r9, #4]
}
 800544e:	b006      	add	sp, #24
 8005450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005454:	20000298 	.word	0x20000298
 8005458:	200003a8 	.word	0x200003a8
 800545c:	200003a0 	.word	0x200003a0

08005460 <ssd1306_WriteChar>:
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005464:	b087      	sub	sp, #28
    if (ch < 32 || ch > 126)
 8005466:	f1a0 0520 	sub.w	r5, r0, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800546a:	4686      	mov	lr, r0
 800546c:	a806      	add	r0, sp, #24
 800546e:	e900 0006 	stmdb	r0, {r1, r2}
    if (ch < 32 || ch > 126)
 8005472:	b2ea      	uxtb	r2, r5
 8005474:	2a5e      	cmp	r2, #94	@ 0x5e
 8005476:	d862      	bhi.n	800553e <ssd1306_WriteChar+0xde>
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005478:	4858      	ldr	r0, [pc, #352]	@ (80055dc <ssd1306_WriteChar+0x17c>)
 800547a:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800547e:	8807      	ldrh	r7, [r0, #0]
 8005480:	193a      	adds	r2, r7, r4
 8005482:	2a80      	cmp	r2, #128	@ 0x80
 8005484:	dc5b      	bgt.n	800553e <ssd1306_WriteChar+0xde>
 8005486:	f89d 1011 	ldrb.w	r1, [sp, #17]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800548a:	8840      	ldrh	r0, [r0, #2]
 800548c:	1846      	adds	r6, r0, r1
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800548e:	2e20      	cmp	r6, #32
 8005490:	dc55      	bgt.n	800553e <ssd1306_WriteChar+0xde>
    for(i = 0; i < Font.FontHeight; i++) {
 8005492:	2900      	cmp	r1, #0
 8005494:	d04d      	beq.n	8005532 <ssd1306_WriteChar+0xd2>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005496:	fb01 f605 	mul.w	r6, r1, r5
 800549a:	4431      	add	r1, r6
 800549c:	9d05      	ldr	r5, [sp, #20]
 800549e:	f106 4600 	add.w	r6, r6, #2147483648	@ 0x80000000
 80054a2:	3e01      	subs	r6, #1
 80054a4:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 80054a8:	3d02      	subs	r5, #2
 80054aa:	eb05 0941 	add.w	r9, r5, r1, lsl #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80054ae:	4d4c      	ldr	r5, [pc, #304]	@ (80055e0 <ssd1306_WriteChar+0x180>)
 80054b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80054b4:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80054b6:	fa5f fb87 	uxtb.w	fp, r7
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80054ba:	4692      	mov	sl, r2
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80054bc:	f836 7f02 	ldrh.w	r7, [r6, #2]!
        for(j = 0; j < Font.FontWidth; j++) {
 80054c0:	b38c      	cbz	r4, 8005526 <ssd1306_WriteChar+0xc6>
 80054c2:	281f      	cmp	r0, #31
 80054c4:	46f0      	mov	r8, lr
 80054c6:	d82d      	bhi.n	8005524 <ssd1306_WriteChar+0xc4>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80054c8:	2201      	movs	r2, #1
 80054ca:	f000 0e07 	and.w	lr, r0, #7
 80054ce:	fa02 fe0e 	lsl.w	lr, r2, lr
 80054d2:	ea6f 020e 	mvn.w	r2, lr
 80054d6:	08c1      	lsrs	r1, r0, #3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	fa5f f982 	uxtb.w	r9, r2
 80054de:	ea4f 11c1 	mov.w	r1, r1, lsl #7
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80054e2:	465a      	mov	r2, fp
 80054e4:	d02f      	beq.n	8005546 <ssd1306_WriteChar+0xe6>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d05a      	beq.n	80055a0 <ssd1306_WriteChar+0x140>
        for(j = 0; j < Font.FontWidth; j++) {
 80054ea:	f04f 0c00 	mov.w	ip, #0
 80054ee:	9602      	str	r6, [sp, #8]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80054f0:	0617      	lsls	r7, r2, #24
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80054f2:	eb02 0601 	add.w	r6, r2, r1
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80054f6:	d405      	bmi.n	8005504 <ssd1306_WriteChar+0xa4>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80054f8:	f815 e006 	ldrb.w	lr, [r5, r6]
 80054fc:	ea09 0e0e 	and.w	lr, r9, lr
 8005500:	f805 e006 	strb.w	lr, [r5, r6]
        for(j = 0; j < Font.FontWidth; j++) {
 8005504:	f10c 0c01 	add.w	ip, ip, #1
 8005508:	3201      	adds	r2, #1
 800550a:	4564      	cmp	r4, ip
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	d1ef      	bne.n	80054f0 <ssd1306_WriteChar+0x90>
 8005510:	9e02      	ldr	r6, [sp, #8]
    for(i = 0; i < Font.FontHeight; i++) {
 8005512:	9a01      	ldr	r2, [sp, #4]
 8005514:	3001      	adds	r0, #1
 8005516:	42b2      	cmp	r2, r6
 8005518:	b2c0      	uxtb	r0, r0
 800551a:	d03f      	beq.n	800559c <ssd1306_WriteChar+0x13c>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800551c:	281f      	cmp	r0, #31
 800551e:	f836 7f02 	ldrh.w	r7, [r6, #2]!
        for(j = 0; j < Font.FontWidth; j++) {
 8005522:	d9d1      	bls.n	80054c8 <ssd1306_WriteChar+0x68>
 8005524:	46c6      	mov	lr, r8
    for(i = 0; i < Font.FontHeight; i++) {
 8005526:	9a01      	ldr	r2, [sp, #4]
 8005528:	3001      	adds	r0, #1
 800552a:	4296      	cmp	r6, r2
 800552c:	b2c0      	uxtb	r0, r0
 800552e:	d1c5      	bne.n	80054bc <ssd1306_WriteChar+0x5c>
 8005530:	4652      	mov	r2, sl
    SSD1306.CurrentX += Font.FontWidth;
 8005532:	4b2a      	ldr	r3, [pc, #168]	@ (80055dc <ssd1306_WriteChar+0x17c>)
    return ch;
 8005534:	4670      	mov	r0, lr
    SSD1306.CurrentX += Font.FontWidth;
 8005536:	801a      	strh	r2, [r3, #0]
}
 8005538:	b007      	add	sp, #28
 800553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 800553e:	2000      	movs	r0, #0
}
 8005540:	b007      	add	sp, #28
 8005542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 8005546:	e9cd 6002 	strd	r6, r0, [sp, #8]
 800554a:	f04f 0c00 	mov.w	ip, #0
 800554e:	e00b      	b.n	8005568 <ssd1306_WriteChar+0x108>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005550:	0616      	lsls	r6, r2, #24
 8005552:	d403      	bmi.n	800555c <ssd1306_WriteChar+0xfc>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005554:	5c2e      	ldrb	r6, [r5, r0]
 8005556:	ea46 060e 	orr.w	r6, r6, lr
 800555a:	542e      	strb	r6, [r5, r0]
        for(j = 0; j < Font.FontWidth; j++) {
 800555c:	f10c 0c01 	add.w	ip, ip, #1
 8005560:	3201      	adds	r2, #1
 8005562:	4564      	cmp	r4, ip
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	d012      	beq.n	800558e <ssd1306_WriteChar+0x12e>
            if((b << j) & 0x8000)  {
 8005568:	fa07 f00c 	lsl.w	r0, r7, ip
 800556c:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005570:	eb02 0001 	add.w	r0, r2, r1
            if((b << j) & 0x8000)  {
 8005574:	d1ec      	bne.n	8005550 <ssd1306_WriteChar+0xf0>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005576:	0616      	lsls	r6, r2, #24
 8005578:	d4f0      	bmi.n	800555c <ssd1306_WriteChar+0xfc>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800557a:	5c2e      	ldrb	r6, [r5, r0]
        for(j = 0; j < Font.FontWidth; j++) {
 800557c:	f10c 0c01 	add.w	ip, ip, #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005580:	ea09 0606 	and.w	r6, r9, r6
        for(j = 0; j < Font.FontWidth; j++) {
 8005584:	3201      	adds	r2, #1
 8005586:	4564      	cmp	r4, ip
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005588:	542e      	strb	r6, [r5, r0]
        for(j = 0; j < Font.FontWidth; j++) {
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	d1ec      	bne.n	8005568 <ssd1306_WriteChar+0x108>
 800558e:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
    for(i = 0; i < Font.FontHeight; i++) {
 8005592:	9a01      	ldr	r2, [sp, #4]
 8005594:	3001      	adds	r0, #1
 8005596:	42b2      	cmp	r2, r6
 8005598:	b2c0      	uxtb	r0, r0
 800559a:	d1bf      	bne.n	800551c <ssd1306_WriteChar+0xbc>
 800559c:	46c6      	mov	lr, r8
 800559e:	e7c7      	b.n	8005530 <ssd1306_WriteChar+0xd0>
        for(j = 0; j < Font.FontWidth; j++) {
 80055a0:	e9cd 6002 	strd	r6, r0, [sp, #8]
 80055a4:	469c      	mov	ip, r3
 80055a6:	e00b      	b.n	80055c0 <ssd1306_WriteChar+0x160>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80055a8:	0616      	lsls	r6, r2, #24
 80055aa:	d403      	bmi.n	80055b4 <ssd1306_WriteChar+0x154>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80055ac:	5c2e      	ldrb	r6, [r5, r0]
 80055ae:	ea09 0606 	and.w	r6, r9, r6
 80055b2:	542e      	strb	r6, [r5, r0]
        for(j = 0; j < Font.FontWidth; j++) {
 80055b4:	f10c 0c01 	add.w	ip, ip, #1
 80055b8:	3201      	adds	r2, #1
 80055ba:	45a4      	cmp	ip, r4
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	d0e6      	beq.n	800558e <ssd1306_WriteChar+0x12e>
            if((b << j) & 0x8000)  {
 80055c0:	fa07 f00c 	lsl.w	r0, r7, ip
 80055c4:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80055c8:	eb02 0001 	add.w	r0, r2, r1
            if((b << j) & 0x8000)  {
 80055cc:	d1ec      	bne.n	80055a8 <ssd1306_WriteChar+0x148>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80055ce:	0616      	lsls	r6, r2, #24
 80055d0:	d4f0      	bmi.n	80055b4 <ssd1306_WriteChar+0x154>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80055d2:	5c2e      	ldrb	r6, [r5, r0]
 80055d4:	ea46 060e 	orr.w	r6, r6, lr
 80055d8:	542e      	strb	r6, [r5, r0]
 80055da:	e7eb      	b.n	80055b4 <ssd1306_WriteChar+0x154>
 80055dc:	200003a0 	.word	0x200003a0
 80055e0:	200003a8 	.word	0x200003a8

080055e4 <ssd1306_WriteString>:
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color) {
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	4604      	mov	r4, r0
 80055e8:	b082      	sub	sp, #8
    while (*str) {
 80055ea:	7800      	ldrb	r0, [r0, #0]
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color) {
 80055ec:	466d      	mov	r5, sp
 80055ee:	e885 0006 	stmia.w	r5, {r1, r2}
    while (*str) {
 80055f2:	b178      	cbz	r0, 8005614 <ssd1306_WriteString+0x30>
 80055f4:	461e      	mov	r6, r3
 80055f6:	e002      	b.n	80055fe <ssd1306_WriteString+0x1a>
 80055f8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80055fc:	b150      	cbz	r0, 8005614 <ssd1306_WriteString+0x30>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80055fe:	e895 0006 	ldmia.w	r5, {r1, r2}
 8005602:	4633      	mov	r3, r6
 8005604:	f7ff ff2c 	bl	8005460 <ssd1306_WriteChar>
 8005608:	7822      	ldrb	r2, [r4, #0]
 800560a:	4290      	cmp	r0, r2
 800560c:	d0f4      	beq.n	80055f8 <ssd1306_WriteString+0x14>
}
 800560e:	4610      	mov	r0, r2
 8005610:	b002      	add	sp, #8
 8005612:	bd70      	pop	{r4, r5, r6, pc}
    return *str;
 8005614:	2200      	movs	r2, #0
}
 8005616:	4610      	mov	r0, r2
 8005618:	b002      	add	sp, #8
 800561a:	bd70      	pop	{r4, r5, r6, pc}

0800561c <ssd1306_SetCursor>:
    SSD1306.CurrentX = x;
 800561c:	4b01      	ldr	r3, [pc, #4]	@ (8005624 <ssd1306_SetCursor+0x8>)
 800561e:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8005620:	8059      	strh	r1, [r3, #2]
}
 8005622:	4770      	bx	lr
 8005624:	200003a0 	.word	0x200003a0

08005628 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005628:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800562c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 8005630:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005632:	f8d0 42c0 	ldr.w	r4, [r0, #704]	@ 0x2c0

  if (hcdc == NULL)
 8005636:	b184      	cbz	r4, 800565a <USBD_CDC_EP0_RxReady+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005638:	f8d0 32c4 	ldr.w	r3, [r0, #708]	@ 0x2c4
 800563c:	b15b      	cbz	r3, 8005656 <USBD_CDC_EP0_RxReady+0x2e>
 800563e:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8005642:	28ff      	cmp	r0, #255	@ 0xff
 8005644:	d007      	beq.n	8005656 <USBD_CDC_EP0_RxReady+0x2e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800564c:	4621      	mov	r1, r4
 800564e:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005650:	23ff      	movs	r3, #255	@ 0xff
 8005652:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005656:	2000      	movs	r0, #0
}
 8005658:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800565a:	2003      	movs	r0, #3
}
 800565c:	bd10      	pop	{r4, pc}
 800565e:	bf00      	nop

08005660 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005660:	230a      	movs	r3, #10
 8005662:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8005664:	4800      	ldr	r0, [pc, #0]	@ (8005668 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005666:	4770      	bx	lr
 8005668:	20000090 	.word	0x20000090

0800566c <USBD_CDC_GetFSCfgDesc>:
{
 800566c:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800566e:	2182      	movs	r1, #130	@ 0x82
{
 8005670:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005672:	480f      	ldr	r0, [pc, #60]	@ (80056b0 <USBD_CDC_GetFSCfgDesc+0x44>)
 8005674:	f000 fbb8 	bl	8005de8 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005678:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800567a:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800567c:	480c      	ldr	r0, [pc, #48]	@ (80056b0 <USBD_CDC_GetFSCfgDesc+0x44>)
 800567e:	f000 fbb3 	bl	8005de8 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005682:	2181      	movs	r1, #129	@ 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005684:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005686:	480a      	ldr	r0, [pc, #40]	@ (80056b0 <USBD_CDC_GetFSCfgDesc+0x44>)
 8005688:	f000 fbae 	bl	8005de8 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800568c:	b10d      	cbz	r5, 8005692 <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800568e:	2210      	movs	r2, #16
 8005690:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8005692:	b11c      	cbz	r4, 800569c <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005694:	2200      	movs	r2, #0
 8005696:	2140      	movs	r1, #64	@ 0x40
 8005698:	7121      	strb	r1, [r4, #4]
 800569a:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800569c:	b118      	cbz	r0, 80056a6 <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800569e:	2200      	movs	r2, #0
 80056a0:	2140      	movs	r1, #64	@ 0x40
 80056a2:	7101      	strb	r1, [r0, #4]
 80056a4:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056a6:	2343      	movs	r3, #67	@ 0x43
}
 80056a8:	4801      	ldr	r0, [pc, #4]	@ (80056b0 <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056aa:	8033      	strh	r3, [r6, #0]
}
 80056ac:	bd70      	pop	{r4, r5, r6, pc}
 80056ae:	bf00      	nop
 80056b0:	20000014 	.word	0x20000014

080056b4 <USBD_CDC_GetHSCfgDesc>:
{
 80056b4:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056b6:	2182      	movs	r1, #130	@ 0x82
{
 80056b8:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056ba:	480f      	ldr	r0, [pc, #60]	@ (80056f8 <USBD_CDC_GetHSCfgDesc+0x44>)
 80056bc:	f000 fb94 	bl	8005de8 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056c0:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056c2:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056c4:	480c      	ldr	r0, [pc, #48]	@ (80056f8 <USBD_CDC_GetHSCfgDesc+0x44>)
 80056c6:	f000 fb8f 	bl	8005de8 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056ca:	2181      	movs	r1, #129	@ 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056cc:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056ce:	480a      	ldr	r0, [pc, #40]	@ (80056f8 <USBD_CDC_GetHSCfgDesc+0x44>)
 80056d0:	f000 fb8a 	bl	8005de8 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80056d4:	b10d      	cbz	r5, 80056da <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80056d6:	2210      	movs	r2, #16
 80056d8:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80056da:	b11c      	cbz	r4, 80056e4 <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80056dc:	2100      	movs	r1, #0
 80056de:	2202      	movs	r2, #2
 80056e0:	7121      	strb	r1, [r4, #4]
 80056e2:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80056e4:	b118      	cbz	r0, 80056ee <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80056e6:	2100      	movs	r1, #0
 80056e8:	2202      	movs	r2, #2
 80056ea:	7101      	strb	r1, [r0, #4]
 80056ec:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056ee:	2343      	movs	r3, #67	@ 0x43
}
 80056f0:	4801      	ldr	r0, [pc, #4]	@ (80056f8 <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056f2:	8033      	strh	r3, [r6, #0]
}
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
 80056f6:	bf00      	nop
 80056f8:	20000014 	.word	0x20000014

080056fc <USBD_CDC_DataOut>:
{
 80056fc:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056fe:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005702:	33b0      	adds	r3, #176	@ 0xb0
 8005704:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005708:	b195      	cbz	r5, 8005730 <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800570a:	4604      	mov	r4, r0
 800570c:	f001 f894 	bl	8006838 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005710:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005714:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005718:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800571c:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8005720:	f8d4 32c4 	ldr.w	r3, [r4, #708]	@ 0x2c4
 8005724:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800572c:	2000      	movs	r0, #0
}
 800572e:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8005730:	2003      	movs	r0, #3
}
 8005732:	bd38      	pop	{r3, r4, r5, pc}

08005734 <USBD_CDC_DataIn>:
{
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	f8d0 42d4 	ldr.w	r4, [r0, #724]	@ 0x2d4
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800573a:	f8d0 62c8 	ldr.w	r6, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800573e:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 8005742:	f8de 52c0 	ldr.w	r5, [lr, #704]	@ 0x2c0
 8005746:	b345      	cbz	r5, 800579a <USBD_CDC_DataIn+0x66>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005748:	f001 040f 	and.w	r4, r1, #15
 800574c:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8005750:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8005754:	460a      	mov	r2, r1
 8005756:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800575a:	b96b      	cbnz	r3, 8005778 <USBD_CDC_DataIn+0x44>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800575c:	f8de 32c4 	ldr.w	r3, [lr, #708]	@ 0x2c4
 8005760:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8005762:	2100      	movs	r1, #0
 8005764:	f8c5 1214 	str.w	r1, [r5, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005768:	b123      	cbz	r3, 8005774 <USBD_CDC_DataIn+0x40>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800576a:	f8d5 0208 	ldr.w	r0, [r5, #520]	@ 0x208
 800576e:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8005772:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8005774:	2000      	movs	r0, #0
}
 8005776:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005778:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800577c:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8005780:	69f4      	ldr	r4, [r6, #28]
 8005782:	fbb3 f6f4 	udiv	r6, r3, r4
 8005786:	fb04 3316 	mls	r3, r4, r6, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e6      	bne.n	800575c <USBD_CDC_DataIn+0x28>
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800578e:	f8cc 3018 	str.w	r3, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005792:	461a      	mov	r2, r3
 8005794:	f001 f838 	bl	8006808 <USBD_LL_Transmit>
 8005798:	e7ec      	b.n	8005774 <USBD_CDC_DataIn+0x40>
    return (uint8_t)USBD_FAIL;
 800579a:	2003      	movs	r0, #3
}
 800579c:	bd70      	pop	{r4, r5, r6, pc}
 800579e:	bf00      	nop

080057a0 <USBD_CDC_Setup>:
{
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80057a6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80057aa:	b082      	sub	sp, #8
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057ac:	f8d3 62c0 	ldr.w	r6, [r3, #704]	@ 0x2c0
  uint8_t ifalt = 0U;
 80057b0:	2200      	movs	r2, #0
 80057b2:	f88d 2005 	strb.w	r2, [sp, #5]
  uint16_t status_info = 0U;
 80057b6:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hcdc == NULL)
 80057ba:	b166      	cbz	r6, 80057d6 <USBD_CDC_Setup+0x36>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057bc:	f891 c000 	ldrb.w	ip, [r1]
 80057c0:	f01c 0260 	ands.w	r2, ip, #96	@ 0x60
 80057c4:	4604      	mov	r4, r0
 80057c6:	460d      	mov	r5, r1
 80057c8:	d01e      	beq.n	8005808 <USBD_CDC_Setup+0x68>
 80057ca:	2a20      	cmp	r2, #32
 80057cc:	d006      	beq.n	80057dc <USBD_CDC_Setup+0x3c>
          USBD_CtlError(pdev, req);
 80057ce:	4629      	mov	r1, r5
 80057d0:	4620      	mov	r0, r4
 80057d2:	f000 fdbd 	bl	8006350 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 80057d6:	2003      	movs	r0, #3
}
 80057d8:	b002      	add	sp, #8
 80057da:	bd70      	pop	{r4, r5, r6, pc}
      if (req->wLength != 0U)
 80057dc:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057de:	f891 e001 	ldrb.w	lr, [r1, #1]
      if (req->wLength != 0U)
 80057e2:	b37a      	cbz	r2, 8005844 <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 80057e4:	f01c 0f80 	tst.w	ip, #128	@ 0x80
 80057e8:	d04c      	beq.n	8005884 <USBD_CDC_Setup+0xe4>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80057ee:	4631      	mov	r1, r6
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	4670      	mov	r0, lr
 80057f4:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80057f6:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80057f8:	2a07      	cmp	r2, #7
 80057fa:	4631      	mov	r1, r6
 80057fc:	bf28      	it	cs
 80057fe:	2207      	movcs	r2, #7
 8005800:	4620      	mov	r0, r4
 8005802:	f000 fdd9 	bl	80063b8 <USBD_CtlSendData>
 8005806:	e022      	b.n	800584e <USBD_CDC_Setup+0xae>
      switch (req->bRequest)
 8005808:	784b      	ldrb	r3, [r1, #1]
 800580a:	2b0b      	cmp	r3, #11
 800580c:	d8df      	bhi.n	80057ce <USBD_CDC_Setup+0x2e>
 800580e:	a201      	add	r2, pc, #4	@ (adr r2, 8005814 <USBD_CDC_Setup+0x74>)
 8005810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005814:	0800585d 	.word	0x0800585d
 8005818:	0800584f 	.word	0x0800584f
 800581c:	080057cf 	.word	0x080057cf
 8005820:	080057cf 	.word	0x080057cf
 8005824:	080057cf 	.word	0x080057cf
 8005828:	080057cf 	.word	0x080057cf
 800582c:	080057cf 	.word	0x080057cf
 8005830:	080057cf 	.word	0x080057cf
 8005834:	080057cf 	.word	0x080057cf
 8005838:	080057cf 	.word	0x080057cf
 800583c:	08005871 	.word	0x08005871
 8005840:	08005853 	.word	0x08005853
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005844:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8005848:	4670      	mov	r0, lr
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	4798      	blx	r3
    return (uint8_t)USBD_FAIL;
 800584e:	2000      	movs	r0, #0
 8005850:	e7c2      	b.n	80057d8 <USBD_CDC_Setup+0x38>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005852:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005856:	2b03      	cmp	r3, #3
 8005858:	d0f9      	beq.n	800584e <USBD_CDC_Setup+0xae>
 800585a:	e7b8      	b.n	80057ce <USBD_CDC_Setup+0x2e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005860:	2b03      	cmp	r3, #3
 8005862:	d1b4      	bne.n	80057ce <USBD_CDC_Setup+0x2e>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005864:	2202      	movs	r2, #2
 8005866:	f10d 0106 	add.w	r1, sp, #6
 800586a:	f000 fda5 	bl	80063b8 <USBD_CtlSendData>
 800586e:	e7ee      	b.n	800584e <USBD_CDC_Setup+0xae>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005870:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005874:	2b03      	cmp	r3, #3
 8005876:	d1aa      	bne.n	80057ce <USBD_CDC_Setup+0x2e>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005878:	2201      	movs	r2, #1
 800587a:	f10d 0105 	add.w	r1, sp, #5
 800587e:	f000 fd9b 	bl	80063b8 <USBD_CtlSendData>
 8005882:	e7e4      	b.n	800584e <USBD_CDC_Setup+0xae>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005884:	2a40      	cmp	r2, #64	@ 0x40
 8005886:	bf28      	it	cs
 8005888:	2240      	movcs	r2, #64	@ 0x40
          hcdc->CmdOpCode = req->bRequest;
 800588a:	f886 e200 	strb.w	lr, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800588e:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005892:	4631      	mov	r1, r6
 8005894:	f000 fda6 	bl	80063e4 <USBD_CtlPrepareRx>
 8005898:	e7d9      	b.n	800584e <USBD_CDC_Setup+0xae>
 800589a:	bf00      	nop

0800589c <USBD_CDC_DeInit>:
{
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80058a0:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80058a2:	2181      	movs	r1, #129	@ 0x81
 80058a4:	f000 ff6c 	bl	8006780 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80058a8:	2101      	movs	r1, #1
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80058aa:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 ff67 	bl	8006780 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80058b2:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80058b6:	2182      	movs	r1, #130	@ 0x82
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 ff61 	bl	8006780 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80058be:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80058c2:	64e5      	str	r5, [r4, #76]	@ 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80058c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80058c8:	f8d3 22c0 	ldr.w	r2, [r3, #704]	@ 0x2c0
 80058cc:	b18a      	cbz	r2, 80058f2 <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80058ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80058d6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80058da:	33b0      	adds	r3, #176	@ 0xb0
 80058dc:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80058e0:	f000 ffb2 	bl	8006848 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058e4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80058e8:	33b0      	adds	r3, #176	@ 0xb0
 80058ea:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 80058ee:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 80058f2:	2000      	movs	r0, #0
 80058f4:	bd38      	pop	{r3, r4, r5, pc}
 80058f6:	bf00      	nop

080058f8 <USBD_CDC_Init>:
{
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80058fc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005900:	f000 ff9e 	bl	8006840 <USBD_static_malloc>
  if (hcdc == NULL)
 8005904:	4605      	mov	r5, r0
 8005906:	2800      	cmp	r0, #0
 8005908:	d05a      	beq.n	80059c0 <USBD_CDC_Init+0xc8>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800590a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800590e:	2100      	movs	r1, #0
 8005910:	f000 ffbc 	bl	800688c <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005914:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005918:	33b0      	adds	r3, #176	@ 0xb0
 800591a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800591e:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005920:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005924:	b3b3      	cbz	r3, 8005994 <USBD_CDC_Init+0x9c>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005926:	2340      	movs	r3, #64	@ 0x40
 8005928:	2202      	movs	r2, #2
 800592a:	2181      	movs	r1, #129	@ 0x81
 800592c:	4620      	mov	r0, r4
 800592e:	f000 ff19 	bl	8006764 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005932:	2101      	movs	r1, #1
 8005934:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005936:	2340      	movs	r3, #64	@ 0x40
 8005938:	2202      	movs	r2, #2
 800593a:	4620      	mov	r0, r4
 800593c:	f000 ff12 	bl	8006764 <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005940:	2701      	movs	r7, #1
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005942:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005944:	2308      	movs	r3, #8
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005946:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800594a:	2182      	movs	r1, #130	@ 0x82
 800594c:	2203      	movs	r2, #3
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800594e:	f8a4 7178 	strh.w	r7, [r4, #376]	@ 0x178
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005952:	4620      	mov	r0, r4
 8005954:	f000 ff06 	bl	8006764 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005958:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800595c:	f8a4 704c 	strh.w	r7, [r4, #76]	@ 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005960:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hcdc->RxBuffer = NULL;
 8005964:	2600      	movs	r6, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005966:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
  hcdc->RxBuffer = NULL;
 800596a:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 8005972:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
  hcdc->TxState = 0U;
 8005976:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 800597a:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 800597e:	b322      	cbz	r2, 80059ca <USBD_CDC_Init+0xd2>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005980:	7c23      	ldrb	r3, [r4, #16]
 8005982:	b9bb      	cbnz	r3, 80059b4 <USBD_CDC_Init+0xbc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005984:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005988:	4639      	mov	r1, r7
 800598a:	4620      	mov	r0, r4
 800598c:	f000 ff48 	bl	8006820 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8005990:	2000      	movs	r0, #0
}
 8005992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005994:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005998:	2202      	movs	r2, #2
 800599a:	2181      	movs	r1, #129	@ 0x81
 800599c:	4620      	mov	r0, r4
 800599e:	f000 fee1 	bl	8006764 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80059a2:	2101      	movs	r1, #1
 80059a4:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80059a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059aa:	2202      	movs	r2, #2
 80059ac:	4620      	mov	r0, r4
 80059ae:	f000 fed9 	bl	8006764 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059b2:	e7c5      	b.n	8005940 <USBD_CDC_Init+0x48>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80059b4:	2340      	movs	r3, #64	@ 0x40
 80059b6:	4639      	mov	r1, r7
 80059b8:	4620      	mov	r0, r4
 80059ba:	f000 ff31 	bl	8006820 <USBD_LL_PrepareReceive>
 80059be:	e7e7      	b.n	8005990 <USBD_CDC_Init+0x98>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80059c0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80059c4:	33b0      	adds	r3, #176	@ 0xb0
 80059c6:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 80059ca:	2002      	movs	r0, #2
}
 80059cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ce:	bf00      	nop

080059d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	2182      	movs	r1, #130	@ 0x82
 80059d4:	4606      	mov	r6, r0
 80059d6:	480f      	ldr	r0, [pc, #60]	@ (8005a14 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80059d8:	f000 fa06 	bl	8005de8 <USBD_GetEpDesc>
 80059dc:	2101      	movs	r1, #1
 80059de:	4605      	mov	r5, r0
 80059e0:	480c      	ldr	r0, [pc, #48]	@ (8005a14 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80059e2:	f000 fa01 	bl	8005de8 <USBD_GetEpDesc>
 80059e6:	2181      	movs	r1, #129	@ 0x81
 80059e8:	4604      	mov	r4, r0
 80059ea:	480a      	ldr	r0, [pc, #40]	@ (8005a14 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80059ec:	f000 f9fc 	bl	8005de8 <USBD_GetEpDesc>
 80059f0:	b10d      	cbz	r5, 80059f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x26>
 80059f2:	2210      	movs	r2, #16
 80059f4:	71aa      	strb	r2, [r5, #6]
 80059f6:	b11c      	cbz	r4, 8005a00 <USBD_CDC_GetOtherSpeedCfgDesc+0x30>
 80059f8:	2200      	movs	r2, #0
 80059fa:	2140      	movs	r1, #64	@ 0x40
 80059fc:	7121      	strb	r1, [r4, #4]
 80059fe:	7162      	strb	r2, [r4, #5]
 8005a00:	b118      	cbz	r0, 8005a0a <USBD_CDC_GetOtherSpeedCfgDesc+0x3a>
 8005a02:	2200      	movs	r2, #0
 8005a04:	2140      	movs	r1, #64	@ 0x40
 8005a06:	7101      	strb	r1, [r0, #4]
 8005a08:	7142      	strb	r2, [r0, #5]
 8005a0a:	2343      	movs	r3, #67	@ 0x43
 8005a0c:	4801      	ldr	r0, [pc, #4]	@ (8005a14 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8005a0e:	8033      	strh	r3, [r6, #0]
 8005a10:	bd70      	pop	{r4, r5, r6, pc}
 8005a12:	bf00      	nop
 8005a14:	20000014 	.word	0x20000014

08005a18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a18:	4603      	mov	r3, r0
  if (fops == NULL)
 8005a1a:	b139      	cbz	r1, 8005a2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a1c:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8005a20:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  return (uint8_t)USBD_OK;
 8005a24:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 8005a26:	f8c3 12c4 	str.w	r1, [r3, #708]	@ 0x2c4
  return (uint8_t)USBD_OK;
 8005a2a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005a2c:	2003      	movs	r0, #3
}
 8005a2e:	4770      	bx	lr

08005a30 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a30:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005a34:	33b0      	adds	r3, #176	@ 0xb0
 8005a36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005a3a:	b12b      	cbz	r3, 8005a48 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8005a3c:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005a40:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005a44:	2000      	movs	r0, #0
 8005a46:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005a48:	2003      	movs	r0, #3
}
 8005a4a:	4770      	bx	lr

08005a4c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a4c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005a50:	33b0      	adds	r3, #176	@ 0xb0
 8005a52:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8005a56:	b11b      	cbz	r3, 8005a60 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8005a58:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005a60:	2003      	movs	r0, #3
}
 8005a62:	4770      	bx	lr

08005a64 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a64:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8005a68:	32b0      	adds	r2, #176	@ 0xb0
 8005a6a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a6e:	b18a      	cbz	r2, 8005a94 <USBD_CDC_ReceivePacket+0x30>
{
 8005a70:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a72:	7c03      	ldrb	r3, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a74:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a78:	b12b      	cbz	r3, 8005a86 <USBD_CDC_ReceivePacket+0x22>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a7a:	2340      	movs	r3, #64	@ 0x40
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	f000 fecf 	bl	8006820 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a82:	2000      	movs	r0, #0
}
 8005a84:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	f000 fec8 	bl	8006820 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8005a90:	2000      	movs	r0, #0
}
 8005a92:	bd08      	pop	{r3, pc}
    return (uint8_t)USBD_FAIL;
 8005a94:	2003      	movs	r0, #3
}
 8005a96:	4770      	bx	lr

08005a98 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a98:	b178      	cbz	r0, 8005aba <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005aa0:	f8c0 32c4 	str.w	r3, [r0, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005aa4:	f8c0 32d0 	str.w	r3, [r0, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005aa8:	b109      	cbz	r1, 8005aae <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005aaa:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 8005ab4:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ab6:	f000 be17 	b.w	80066e8 <USBD_LL_Init>

  return ret;
}
 8005aba:	2003      	movs	r0, #3
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop

08005ac0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8005aca:	b189      	cbz	r1, 8005af0 <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005acc:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pdev->pClass[0] = pclass;
 8005ace:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	b123      	cbz	r3, 8005ae0 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ad6:	f10d 0006 	add.w	r0, sp, #6
 8005ada:	4798      	blx	r3
 8005adc:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005ae0:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8005ae4:	2000      	movs	r0, #0
  pdev->NumClasses ++;
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8
}
 8005aec:	b002      	add	sp, #8
 8005aee:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005af0:	2003      	movs	r0, #3
}
 8005af2:	b002      	add	sp, #8
 8005af4:	bd10      	pop	{r4, pc}
 8005af6:	bf00      	nop

08005af8 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005af8:	f000 be28 	b.w	800674c <USBD_LL_Start>

08005afc <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005afc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005b00:	b10b      	cbz	r3, 8005b06 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop

08005b0c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b0c:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005b0e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 8005b16:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8005b18:	bf18      	it	ne
 8005b1a:	2003      	movne	r0, #3
 8005b1c:	bd08      	pop	{r3, pc}
 8005b1e:	bf00      	nop

08005b20 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b20:	b538      	push	{r3, r4, r5, lr}
 8005b22:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b24:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8005b28:	4628      	mov	r0, r5
 8005b2a:	f000 fc05 	bl	8006338 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005b2e:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8005b32:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	@ 0x2b0
 8005b36:	f8c4 2298 	str.w	r2, [r4, #664]	@ 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8005b40:	f001 031f 	and.w	r3, r1, #31
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d009      	beq.n	8005b5c <USBD_LL_SetupStage+0x3c>
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d013      	beq.n	8005b74 <USBD_LL_SetupStage+0x54>
 8005b4c:	b163      	cbz	r3, 8005b68 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f001 0180 	and.w	r1, r1, #128	@ 0x80
      break;
  }

  return ret;
}
 8005b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b58:	f000 be1e 	b.w	8006798 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	4620      	mov	r0, r4
}
 8005b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b64:	f000 bb00 	b.w	8006168 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b68:	4629      	mov	r1, r5
 8005b6a:	4620      	mov	r0, r4
}
 8005b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b70:	f000 b950 	b.w	8005e14 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b74:	4629      	mov	r1, r5
 8005b76:	4620      	mov	r0, r4
}
 8005b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b7c:	f000 bb30 	b.w	80061e0 <USBD_StdEPReq>

08005b80 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b80:	b510      	push	{r4, lr}
 8005b82:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8005b84:	b931      	cbnz	r1, 8005b94 <USBD_LL_DataOutStage+0x14>
 8005b86:	4694      	mov	ip, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b88:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8005b8c:	2a03      	cmp	r2, #3
 8005b8e:	d010      	beq.n	8005bb2 <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 8005b90:	2000      	movs	r0, #0
 8005b92:	bd10      	pop	{r4, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b94:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d1f9      	bne.n	8005b90 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b9c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0f4      	beq.n	8005b90 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 8005ba6:	2200      	movs	r2, #0
}
 8005ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          pdev->classId = idx;
 8005bac:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005bb0:	4718      	bx	r3
 8005bb2:	460b      	mov	r3, r1
      if (pep->rem_length > pep->maxpacket)
 8005bb4:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	@ 0x15c
 8005bb8:	4291      	cmp	r1, r2
 8005bba:	d808      	bhi.n	8005bce <USBD_LL_DataOutStage+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bbc:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005bc0:	2a03      	cmp	r2, #3
 8005bc2:	d00e      	beq.n	8005be2 <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 fc23 	bl	8006410 <USBD_CtlSendStatus>
}
 8005bca:	2000      	movs	r0, #0
 8005bcc:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 8005bce:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005bd0:	428a      	cmp	r2, r1
 8005bd2:	bf28      	it	cs
 8005bd4:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 8005bd6:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005bda:	4661      	mov	r1, ip
 8005bdc:	f000 fc10 	bl	8006400 <USBD_CtlContinueRx>
 8005be0:	e7d6      	b.n	8005b90 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005be2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 8005be6:	6912      	ldr	r2, [r2, #16]
 8005be8:	2a00      	cmp	r2, #0
 8005bea:	d0eb      	beq.n	8005bc4 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 8005bec:	f8c0 32d4 	str.w	r3, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005bf0:	4790      	blx	r2
 8005bf2:	e7e7      	b.n	8005bc4 <USBD_LL_DataOutStage+0x44>

08005bf4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005bf8:	b961      	cbnz	r1, 8005c14 <USBD_LL_DataInStage+0x20>
 8005bfa:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005bfc:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8005c00:	2a02      	cmp	r2, #2
 8005c02:	d016      	beq.n	8005c32 <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005c04:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8005c08:	b113      	cbz	r3, 8005c10 <USBD_LL_DataInStage+0x1c>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8005c10:	2000      	movs	r0, #0
 8005c12:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c14:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d1f9      	bne.n	8005c10 <USBD_LL_DataInStage+0x1c>
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c1c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0f4      	beq.n	8005c10 <USBD_LL_DataInStage+0x1c>
          pdev->classId = idx;
 8005c26:	2200      	movs	r2, #0
}
 8005c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8005c2c:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c30:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8005c32:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 8005c36:	42b2      	cmp	r2, r6
 8005c38:	460d      	mov	r5, r1
 8005c3a:	d810      	bhi.n	8005c5e <USBD_LL_DataInStage+0x6a>
        if ((pep->maxpacket == pep->rem_length) &&
 8005c3c:	d01b      	beq.n	8005c76 <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c3e:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d024      	beq.n	8005c90 <USBD_LL_DataInStage+0x9c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c46:	2180      	movs	r1, #128	@ 0x80
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 fda5 	bl	8006798 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f000 fbea 	bl	8006428 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 8005c54:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0d9      	beq.n	8005c10 <USBD_LL_DataInStage+0x1c>
 8005c5c:	e7d5      	b.n	8005c0a <USBD_LL_DataInStage+0x16>
        pep->rem_length -= pep->maxpacket;
 8005c5e:	1b92      	subs	r2, r2, r6
 8005c60:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005c62:	4619      	mov	r1, r3
 8005c64:	f000 fbb6 	bl	80063d4 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c68:	462b      	mov	r3, r5
 8005c6a:	462a      	mov	r2, r5
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 fdd6 	bl	8006820 <USBD_LL_PrepareReceive>
 8005c74:	e7c6      	b.n	8005c04 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 8005c76:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d8e0      	bhi.n	8005c3e <USBD_LL_DataInStage+0x4a>
            (pep->total_length >= pep->maxpacket) &&
 8005c7c:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d2dc      	bcs.n	8005c3e <USBD_LL_DataInStage+0x4a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c84:	460a      	mov	r2, r1
 8005c86:	f000 fba5 	bl	80063d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c8a:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 8005c8e:	e7eb      	b.n	8005c68 <USBD_LL_DataInStage+0x74>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c90:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0d5      	beq.n	8005c46 <USBD_LL_DataInStage+0x52>
              pdev->classId = 0U;
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	4798      	blx	r3
 8005ca4:	e7cf      	b.n	8005c46 <USBD_LL_DataInStage+0x52>
 8005ca6:	bf00      	nop

08005ca8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005caa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cae:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
{
 8005cb6:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
 8005cb8:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cba:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_remote_wakeup = 0U;
 8005cbe:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005cc2:	f880 12a0 	strb.w	r1, [r0, #672]	@ 0x2a0
  if (pdev->pClass[0] != NULL)
 8005cc6:	b11b      	cbz	r3, 8005cd0 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	b10b      	cbz	r3, 8005cd0 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005ccc:	4798      	blx	r3
 8005cce:	b9b0      	cbnz	r0, 8005cfe <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 8005cd0:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2340      	movs	r3, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cd6:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cd8:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005cda:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f000 fd41 	bl	8006764 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ce2:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ce6:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cea:	462b      	mov	r3, r5
 8005cec:	2200      	movs	r2, #0
 8005cee:	2180      	movs	r1, #128	@ 0x80
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f000 fd37 	bl	8006764 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005cf6:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cf8:	6225      	str	r5, [r4, #32]

  return ret;
}
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 8005cfe:	2703      	movs	r7, #3
 8005d00:	e7e7      	b.n	8005cd2 <USBD_LL_Reset+0x2a>
 8005d02:	bf00      	nop

08005d04 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005d04:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005d06:	2000      	movs	r0, #0
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop

08005d0c <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005d0c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d004      	beq.n	8005d1e <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005d14:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d1e:	2304      	movs	r3, #4
 8005d20:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8005d24:	2000      	movs	r0, #0
 8005d26:	4770      	bx	lr

08005d28 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d28:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d104      	bne.n	8005d3a <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d30:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop

08005d40 <USBD_LL_SOF>:
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d40:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005d44:	2a03      	cmp	r2, #3
 8005d46:	d001      	beq.n	8005d4c <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8005d48:	2000      	movs	r0, #0
 8005d4a:	4770      	bx	lr
{
 8005d4c:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 8005d4e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005d52:	b113      	cbz	r3, 8005d5a <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	b103      	cbz	r3, 8005d5a <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 8005d58:	4798      	blx	r3
}
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	bd08      	pop	{r3, pc}
 8005d5e:	bf00      	nop

08005d60 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8005d60:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8005d64:	32ae      	adds	r2, #174	@ 0xae
 8005d66:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005d6a:	b162      	cbz	r2, 8005d86 <USBD_LL_IsoINIncomplete+0x26>
{
 8005d6c:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d6e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d001      	beq.n	8005d7a <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8005d76:	2000      	movs	r0, #0
}
 8005d78:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005d7a:	6a13      	ldr	r3, [r2, #32]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0fa      	beq.n	8005d76 <USBD_LL_IsoINIncomplete+0x16>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005d80:	4798      	blx	r3
  return USBD_OK;
 8005d82:	2000      	movs	r0, #0
}
 8005d84:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005d86:	2003      	movs	r0, #3
}
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop

08005d8c <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8005d8c:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8005d90:	32ae      	adds	r2, #174	@ 0xae
 8005d92:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005d96:	b162      	cbz	r2, 8005db2 <USBD_LL_IsoOUTIncomplete+0x26>
{
 8005d98:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d9a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d001      	beq.n	8005da6 <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8005da2:	2000      	movs	r0, #0
}
 8005da4:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005da6:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0fa      	beq.n	8005da2 <USBD_LL_IsoOUTIncomplete+0x16>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005dac:	4798      	blx	r3
  return USBD_OK;
 8005dae:	2000      	movs	r0, #0
}
 8005db0:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005db2:	2003      	movs	r0, #3
}
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop

08005db8 <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 8005db8:	2000      	movs	r0, #0
 8005dba:	4770      	bx	lr

08005dbc <USBD_LL_DevDisconnected>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005dbc:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	f880 129c 	strb.w	r1, [r0, #668]	@ 0x29c
  if (pdev->pClass[0] != NULL)
 8005dc6:	b142      	cbz	r2, 8005dda <USBD_LL_DevDisconnected+0x1e>
{
 8005dc8:	b508      	push	{r3, lr}
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005dca:	6852      	ldr	r2, [r2, #4]
 8005dcc:	7901      	ldrb	r1, [r0, #4]
 8005dce:	4790      	blx	r2
 8005dd0:	b908      	cbnz	r0, 8005dd6 <USBD_LL_DevDisconnected+0x1a>
  USBD_StatusTypeDef   ret = USBD_OK;
 8005dd2:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8005dd4:	bd08      	pop	{r3, pc}
      ret = USBD_FAIL;
 8005dd6:	2003      	movs	r0, #3
}
 8005dd8:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8005dda:	2000      	movs	r0, #0
}
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop

08005de0 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8005de0:	2000      	movs	r0, #0
 8005de2:	4770      	bx	lr

08005de4 <USBD_CoreFindEP>:
  *         return the class index relative to the selected endpoint
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
 8005de4:	2000      	movs	r0, #0
 8005de6:	4770      	bx	lr

08005de8 <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005de8:	7802      	ldrb	r2, [r0, #0]
 8005dea:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8005dee:	4594      	cmp	ip, r2
 8005df0:	4613      	mov	r3, r2
 8005df2:	d803      	bhi.n	8005dfc <USBD_GetEpDesc+0x14>
 8005df4:	e00c      	b.n	8005e10 <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 8005df6:	459c      	cmp	ip, r3
 8005df8:	d90a      	bls.n	8005e10 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8005dfa:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005dfc:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 8005dfe:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005e00:	7842      	ldrb	r2, [r0, #1]
 8005e02:	2a05      	cmp	r2, #5
  *ptr += pnext->bLength;
 8005e04:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005e06:	d1f6      	bne.n	8005df6 <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8005e08:	7882      	ldrb	r2, [r0, #2]
 8005e0a:	428a      	cmp	r2, r1
 8005e0c:	d1f3      	bne.n	8005df6 <USBD_GetEpDesc+0xe>
}
 8005e0e:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005e10:	2000      	movs	r0, #0
}
 8005e12:	4770      	bx	lr

08005e14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e14:	b570      	push	{r4, r5, r6, lr}
 8005e16:	780b      	ldrb	r3, [r1, #0]
 8005e18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e1c:	2b20      	cmp	r3, #32
{
 8005e1e:	b082      	sub	sp, #8
 8005e20:	460d      	mov	r5, r1
 8005e22:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e24:	d00e      	beq.n	8005e44 <USBD_StdDevReq+0x30>
 8005e26:	2b40      	cmp	r3, #64	@ 0x40
 8005e28:	d00c      	beq.n	8005e44 <USBD_StdDevReq+0x30>
 8005e2a:	b1bb      	cbz	r3, 8005e5c <USBD_StdDevReq+0x48>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e2c:	2180      	movs	r1, #128	@ 0x80
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f000 fcb2 	bl	8006798 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005e34:	2100      	movs	r1, #0
 8005e36:	4620      	mov	r0, r4
 8005e38:	f000 fcae 	bl	8006798 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8005e3c:	2500      	movs	r5, #0
}
 8005e3e:	4628      	mov	r0, r5
 8005e40:	b002      	add	sp, #8
 8005e42:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005e44:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005e48:	33ae      	adds	r3, #174	@ 0xae
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	4620      	mov	r0, r4
}
 8005e54:	b002      	add	sp, #8
 8005e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005e5a:	4718      	bx	r3
      switch (req->bRequest)
 8005e5c:	784b      	ldrb	r3, [r1, #1]
 8005e5e:	2b09      	cmp	r3, #9
 8005e60:	d8e4      	bhi.n	8005e2c <USBD_StdDevReq+0x18>
 8005e62:	a201      	add	r2, pc, #4	@ (adr r2, 8005e68 <USBD_StdDevReq+0x54>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005ec9 	.word	0x08005ec9
 8005e6c:	08005ef1 	.word	0x08005ef1
 8005e70:	08005e2d 	.word	0x08005e2d
 8005e74:	08005f0f 	.word	0x08005f0f
 8005e78:	08005e2d 	.word	0x08005e2d
 8005e7c:	08005f27 	.word	0x08005f27
 8005e80:	08005f67 	.word	0x08005f67
 8005e84:	08005e2d 	.word	0x08005e2d
 8005e88:	08005f9d 	.word	0x08005f9d
 8005e8c:	08005e91 	.word	0x08005e91
  cfgidx = (uint8_t)(req->wValue);
 8005e90:	7889      	ldrb	r1, [r1, #2]
 8005e92:	4db4      	ldr	r5, [pc, #720]	@ (8006164 <USBD_StdDevReq+0x350>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e94:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8005e96:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e98:	f200 8140 	bhi.w	800611c <USBD_StdDevReq+0x308>
  switch (pdev->dev_state)
 8005e9c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	b2de      	uxtb	r6, r3
 8005ea4:	f000 8126 	beq.w	80060f4 <USBD_StdDevReq+0x2e0>
 8005ea8:	2e03      	cmp	r6, #3
 8005eaa:	f000 8101 	beq.w	80060b0 <USBD_StdDevReq+0x29c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005eae:	2180      	movs	r1, #128	@ 0x80
 8005eb0:	f000 fc72 	bl	8006798 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 fc6e 	bl	8006798 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ebc:	7829      	ldrb	r1, [r5, #0]
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f7ff fe24 	bl	8005b0c <USBD_ClrClassConfig>
    return USBD_FAIL;
 8005ec4:	2503      	movs	r5, #3
 8005ec6:	e7ba      	b.n	8005e3e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8005ec8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d8ac      	bhi.n	8005e2c <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 8005ed2:	88ca      	ldrh	r2, [r1, #6]
 8005ed4:	2a02      	cmp	r2, #2
 8005ed6:	d1a9      	bne.n	8005e2c <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup != 0U)
 8005ed8:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8005edc:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bf0c      	ite	eq
 8005ee2:	2301      	moveq	r3, #1
 8005ee4:	2303      	movne	r3, #3
 8005ee6:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005eea:	f000 fa65 	bl	80063b8 <USBD_CtlSendData>
      break;
 8005eee:	e7a5      	b.n	8005e3c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8005ef0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d898      	bhi.n	8005e2c <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005efa:	884b      	ldrh	r3, [r1, #2]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d19d      	bne.n	8005e3c <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005f06:	4620      	mov	r0, r4
 8005f08:	f000 fa82 	bl	8006410 <USBD_CtlSendStatus>
 8005f0c:	e796      	b.n	8005e3c <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f0e:	884b      	ldrh	r3, [r1, #2]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d0f6      	beq.n	8005f02 <USBD_StdDevReq+0xee>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d189      	bne.n	8005e2c <USBD_StdDevReq+0x18>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005f18:	888b      	ldrh	r3, [r1, #4]
 8005f1a:	0a1b      	lsrs	r3, r3, #8
 8005f1c:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005f20:	f000 fa76 	bl	8006410 <USBD_CtlSendStatus>
 8005f24:	e78a      	b.n	8005e3c <USBD_StdDevReq+0x28>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f26:	888b      	ldrh	r3, [r1, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f47f af7f 	bne.w	8005e2c <USBD_StdDevReq+0x18>
 8005f2e:	88cb      	ldrh	r3, [r1, #6]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f47f af7b 	bne.w	8005e2c <USBD_StdDevReq+0x18>
 8005f36:	884d      	ldrh	r5, [r1, #2]
 8005f38:	2d7f      	cmp	r5, #127	@ 0x7f
 8005f3a:	f63f af77 	bhi.w	8005e2c <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f3e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	f43f af72 	beq.w	8005e2c <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f48:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8005f4a:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f4e:	f000 fc4f 	bl	80067f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 fa5c 	bl	8006410 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005f58:	2d00      	cmp	r5, #0
 8005f5a:	f000 80ff 	beq.w	800615c <USBD_StdDevReq+0x348>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005f64:	e76a      	b.n	8005e3c <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 8005f66:	884a      	ldrh	r2, [r1, #2]
 8005f68:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 8005f6a:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 8005f6c:	3b01      	subs	r3, #1
  uint16_t len = 0U;
 8005f6e:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 8005f72:	2b06      	cmp	r3, #6
 8005f74:	f63f af5a 	bhi.w	8005e2c <USBD_StdDevReq+0x18>
 8005f78:	a101      	add	r1, pc, #4	@ (adr r1, 8005f80 <USBD_StdDevReq+0x16c>)
 8005f7a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f7e:	bf00      	nop
 8005f80:	08006041 	.word	0x08006041
 8005f84:	08006027 	.word	0x08006027
 8005f88:	08006015 	.word	0x08006015
 8005f8c:	08005e2d 	.word	0x08005e2d
 8005f90:	08005e2d 	.word	0x08005e2d
 8005f94:	08005fff 	.word	0x08005fff
 8005f98:	08005fc3 	.word	0x08005fc3
  if (req->wLength != 1U)
 8005f9c:	88ca      	ldrh	r2, [r1, #6]
 8005f9e:	2a01      	cmp	r2, #1
 8005fa0:	f47f af44 	bne.w	8005e2c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8005fa4:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 8005fa8:	2902      	cmp	r1, #2
 8005faa:	b2cb      	uxtb	r3, r1
 8005fac:	d879      	bhi.n	80060a2 <USBD_StdDevReq+0x28e>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f43f af3c 	beq.w	8005e2c <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8005fb4:	4601      	mov	r1, r0
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005fbc:	f000 f9fc 	bl	80063b8 <USBD_CtlSendData>
        break;
 8005fc0:	e73c      	b.n	8005e3c <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fc2:	7c03      	ldrb	r3, [r0, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f47f af31 	bne.w	8005e2c <USBD_StdDevReq+0x18>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005fca:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005fce:	f10d 0006 	add.w	r0, sp, #6
 8005fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005fd6:	2307      	movs	r3, #7
 8005fd8:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 8005fda:	88eb      	ldrh	r3, [r5, #6]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d092      	beq.n	8005f06 <USBD_StdDevReq+0xf2>
    if (len != 0U)
 8005fe0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005fe4:	2a00      	cmp	r2, #0
 8005fe6:	f43f af21 	beq.w	8005e2c <USBD_StdDevReq+0x18>
      len = MIN(len, req->wLength);
 8005fea:	429a      	cmp	r2, r3
 8005fec:	bf28      	it	cs
 8005fee:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ff0:	4601      	mov	r1, r0
 8005ff2:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8005ff4:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ff8:	f000 f9de 	bl	80063b8 <USBD_CtlSendData>
 8005ffc:	e71e      	b.n	8005e3c <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ffe:	7c03      	ldrb	r3, [r0, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	f47f af13 	bne.w	8005e2c <USBD_StdDevReq+0x18>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006006:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800600a:	f10d 0006 	add.w	r0, sp, #6
 800600e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006010:	4798      	blx	r3
  if (err != 0U)
 8006012:	e7e2      	b.n	8005fda <USBD_StdDevReq+0x1c6>
      switch ((uint8_t)(req->wValue))
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	2a05      	cmp	r2, #5
 8006018:	f63f af08 	bhi.w	8005e2c <USBD_StdDevReq+0x18>
 800601c:	e8df f002 	tbb	[pc, r2]
 8006020:	292f353b 	.word	0x292f353b
 8006024:	1823      	.short	0x1823
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006026:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006028:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800602c:	2a00      	cmp	r2, #0
 800602e:	f040 8087 	bne.w	8006140 <USBD_StdDevReq+0x32c>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006034:	f10d 0006 	add.w	r0, sp, #6
 8006038:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800603a:	2302      	movs	r3, #2
 800603c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800603e:	e7cc      	b.n	8005fda <USBD_StdDevReq+0x1c6>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006040:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006044:	7c00      	ldrb	r0, [r0, #16]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f10d 0106 	add.w	r1, sp, #6
 800604c:	4798      	blx	r3
  if (err != 0U)
 800604e:	e7c4      	b.n	8005fda <USBD_StdDevReq+0x1c6>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006050:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	2b00      	cmp	r3, #0
 8006058:	f43f aee8 	beq.w	8005e2c <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800605c:	7c20      	ldrb	r0, [r4, #16]
 800605e:	f10d 0106 	add.w	r1, sp, #6
 8006062:	4798      	blx	r3
  if (err != 0U)
 8006064:	e7b9      	b.n	8005fda <USBD_StdDevReq+0x1c6>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006066:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1f5      	bne.n	800605c <USBD_StdDevReq+0x248>
 8006070:	e6dc      	b.n	8005e2c <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006072:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1ef      	bne.n	800605c <USBD_StdDevReq+0x248>
 800607c:	e6d6      	b.n	8005e2c <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800607e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e9      	bne.n	800605c <USBD_StdDevReq+0x248>
 8006088:	e6d0      	b.n	8005e2c <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800608a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e3      	bne.n	800605c <USBD_StdDevReq+0x248>
 8006094:	e6ca      	b.n	8005e2c <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006096:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1dd      	bne.n	800605c <USBD_StdDevReq+0x248>
 80060a0:	e6c4      	b.n	8005e2c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	f47f aec2 	bne.w	8005e2c <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80060a8:	1d01      	adds	r1, r0, #4
 80060aa:	f000 f985 	bl	80063b8 <USBD_CtlSendData>
        break;
 80060ae:	e6c5      	b.n	8005e3c <USBD_StdDevReq+0x28>
      if (cfgidx == 0U)
 80060b0:	2900      	cmp	r1, #0
 80060b2:	d03b      	beq.n	800612c <USBD_StdDevReq+0x318>
      else if (cfgidx != pdev->dev_config)
 80060b4:	6841      	ldr	r1, [r0, #4]
 80060b6:	2901      	cmp	r1, #1
 80060b8:	f43f af25 	beq.w	8005f06 <USBD_StdDevReq+0xf2>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060bc:	b2c9      	uxtb	r1, r1
 80060be:	f7ff fd25 	bl	8005b0c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80060c2:	7829      	ldrb	r1, [r5, #0]
 80060c4:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80060c6:	4620      	mov	r0, r4
 80060c8:	f7ff fd18 	bl	8005afc <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80060cc:	4605      	mov	r5, r0
 80060ce:	2800      	cmp	r0, #0
 80060d0:	f43f af19 	beq.w	8005f06 <USBD_StdDevReq+0xf2>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80060d4:	2180      	movs	r1, #128	@ 0x80
 80060d6:	4620      	mov	r0, r4
 80060d8:	f000 fb5e 	bl	8006798 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80060dc:	2100      	movs	r1, #0
 80060de:	4620      	mov	r0, r4
 80060e0:	f000 fb5a 	bl	8006798 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060e4:	7921      	ldrb	r1, [r4, #4]
 80060e6:	4620      	mov	r0, r4
 80060e8:	f7ff fd10 	bl	8005b0c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060ec:	2302      	movs	r3, #2
 80060ee:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80060f2:	e6a4      	b.n	8005e3e <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 80060f4:	2900      	cmp	r1, #0
 80060f6:	f43f af06 	beq.w	8005f06 <USBD_StdDevReq+0xf2>
        pdev->dev_config = cfgidx;
 80060fa:	2101      	movs	r1, #1
 80060fc:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80060fe:	f7ff fcfd 	bl	8005afc <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006102:	4605      	mov	r5, r0
 8006104:	b318      	cbz	r0, 800614e <USBD_StdDevReq+0x33a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006106:	2180      	movs	r1, #128	@ 0x80
 8006108:	4620      	mov	r0, r4
 800610a:	f000 fb45 	bl	8006798 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800610e:	2100      	movs	r1, #0
 8006110:	4620      	mov	r0, r4
 8006112:	f000 fb41 	bl	8006798 <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006116:	f884 629c 	strb.w	r6, [r4, #668]	@ 0x29c
 800611a:	e690      	b.n	8005e3e <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800611c:	2180      	movs	r1, #128	@ 0x80
 800611e:	f000 fb3b 	bl	8006798 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006122:	2100      	movs	r1, #0
 8006124:	4620      	mov	r0, r4
 8006126:	f000 fb37 	bl	8006798 <USBD_LL_StallEP>
    return USBD_FAIL;
 800612a:	e6cb      	b.n	8005ec4 <USBD_StdDevReq+0xb0>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800612c:	2302      	movs	r3, #2
 800612e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006132:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006134:	f7ff fcea 	bl	8005b0c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006138:	4620      	mov	r0, r4
 800613a:	f000 f969 	bl	8006410 <USBD_CtlSendStatus>
 800613e:	e67d      	b.n	8005e3c <USBD_StdDevReq+0x28>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	f10d 0006 	add.w	r0, sp, #6
 8006146:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006148:	2302      	movs	r3, #2
 800614a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800614c:	e745      	b.n	8005fda <USBD_StdDevReq+0x1c6>
          (void)USBD_CtlSendStatus(pdev);
 800614e:	4620      	mov	r0, r4
 8006150:	f000 f95e 	bl	8006410 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006154:	2303      	movs	r3, #3
 8006156:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800615a:	e66f      	b.n	8005e3c <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800615c:	2301      	movs	r3, #1
 800615e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006162:	e66b      	b.n	8005e3c <USBD_StdDevReq+0x28>
 8006164:	200005a8 	.word	0x200005a8

08006168 <USBD_StdItfReq>:
{
 8006168:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800616a:	780b      	ldrb	r3, [r1, #0]
 800616c:	065a      	lsls	r2, r3, #25
{
 800616e:	460d      	mov	r5, r1
 8006170:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006172:	d50c      	bpl.n	800618e <USBD_StdItfReq+0x26>
 8006174:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8006178:	2a40      	cmp	r2, #64	@ 0x40
 800617a:	d008      	beq.n	800618e <USBD_StdItfReq+0x26>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800617c:	2180      	movs	r1, #128	@ 0x80
 800617e:	f000 fb0b 	bl	8006798 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006182:	2100      	movs	r1, #0
 8006184:	4620      	mov	r0, r4
 8006186:	f000 fb07 	bl	8006798 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800618a:	2000      	movs	r0, #0
}
 800618c:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800618e:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006192:	3b01      	subs	r3, #1
 8006194:	2b02      	cmp	r3, #2
 8006196:	d802      	bhi.n	800619e <USBD_StdItfReq+0x36>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006198:	7929      	ldrb	r1, [r5, #4]
 800619a:	2901      	cmp	r1, #1
 800619c:	d908      	bls.n	80061b0 <USBD_StdItfReq+0x48>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800619e:	2180      	movs	r1, #128	@ 0x80
 80061a0:	4620      	mov	r0, r4
 80061a2:	f000 faf9 	bl	8006798 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80061a6:	2100      	movs	r1, #0
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 faf5 	bl	8006798 <USBD_LL_StallEP>
}
 80061ae:	e7ec      	b.n	800618a <USBD_StdItfReq+0x22>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80061b0:	4620      	mov	r0, r4
 80061b2:	f7ff fe15 	bl	8005de0 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061b6:	b988      	cbnz	r0, 80061dc <USBD_StdItfReq+0x74>
              if (pdev->pClass[idx]->Setup != NULL)
 80061b8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	b16b      	cbz	r3, 80061dc <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 80061c0:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061c4:	4629      	mov	r1, r5
 80061c6:	4620      	mov	r0, r4
 80061c8:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061ca:	88ea      	ldrh	r2, [r5, #6]
 80061cc:	2a00      	cmp	r2, #0
 80061ce:	d1dd      	bne.n	800618c <USBD_StdItfReq+0x24>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d1db      	bne.n	800618c <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 80061d4:	4620      	mov	r0, r4
 80061d6:	f000 f91b 	bl	8006410 <USBD_CtlSendStatus>
 80061da:	e7d6      	b.n	800618a <USBD_StdItfReq+0x22>
                ret = USBD_FAIL;
 80061dc:	2003      	movs	r0, #3
}
 80061de:	bd38      	pop	{r3, r4, r5, pc}

080061e0 <USBD_StdEPReq>:
{
 80061e0:	b530      	push	{r4, r5, lr}
 80061e2:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 80061e4:	888a      	ldrh	r2, [r1, #4]
 80061e6:	7823      	ldrb	r3, [r4, #0]
 80061e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061ec:	2b20      	cmp	r3, #32
{
 80061ee:	b083      	sub	sp, #12
 80061f0:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 80061f2:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061f4:	d01e      	beq.n	8006234 <USBD_StdEPReq+0x54>
 80061f6:	2b40      	cmp	r3, #64	@ 0x40
 80061f8:	d01c      	beq.n	8006234 <USBD_StdEPReq+0x54>
 80061fa:	b36b      	cbz	r3, 8006258 <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80061fc:	2180      	movs	r1, #128	@ 0x80
 80061fe:	4628      	mov	r0, r5
 8006200:	f000 faca 	bl	8006798 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006204:	2100      	movs	r1, #0
 8006206:	4628      	mov	r0, r5
 8006208:	f000 fac6 	bl	8006798 <USBD_LL_StallEP>
}
 800620c:	2000      	movs	r0, #0
 800620e:	b003      	add	sp, #12
 8006210:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 8006212:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006216:	2b02      	cmp	r3, #2
 8006218:	b2da      	uxtb	r2, r3
 800621a:	d05e      	beq.n	80062da <USBD_StdEPReq+0xfa>
 800621c:	2a03      	cmp	r2, #3
 800621e:	d1ed      	bne.n	80061fc <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006220:	8863      	ldrh	r3, [r4, #2]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1f2      	bne.n	800620c <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006226:	064b      	lsls	r3, r1, #25
 8006228:	d17d      	bne.n	8006326 <USBD_StdEPReq+0x146>
                (void)USBD_CtlSendStatus(pdev);
 800622a:	4628      	mov	r0, r5
 800622c:	9101      	str	r1, [sp, #4]
 800622e:	f000 f8ef 	bl	8006410 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006232:	9901      	ldr	r1, [sp, #4]
 8006234:	4628      	mov	r0, r5
 8006236:	f7ff fdd5 	bl	8005de4 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800623a:	2800      	cmp	r0, #0
 800623c:	d1e6      	bne.n	800620c <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 800623e:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
                  pdev->classId = idx;
 8006242:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0df      	beq.n	800620c <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800624c:	4621      	mov	r1, r4
 800624e:	4628      	mov	r0, r5
}
 8006250:	b003      	add	sp, #12
 8006252:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006256:	4718      	bx	r3
      switch (req->bRequest)
 8006258:	7863      	ldrb	r3, [r4, #1]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d0d9      	beq.n	8006212 <USBD_StdEPReq+0x32>
 800625e:	2b03      	cmp	r3, #3
 8006260:	d02a      	beq.n	80062b8 <USBD_StdEPReq+0xd8>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1ca      	bne.n	80061fc <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 8006266:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800626a:	2b02      	cmp	r3, #2
 800626c:	b2d8      	uxtb	r0, r3
 800626e:	d03d      	beq.n	80062ec <USBD_StdEPReq+0x10c>
 8006270:	2803      	cmp	r0, #3
 8006272:	d1c3      	bne.n	80061fc <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006274:	f001 030f 	and.w	r3, r1, #15
 8006278:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800627c:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800627e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8006282:	d442      	bmi.n	800630a <USBD_StdEPReq+0x12a>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006284:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0b7      	beq.n	80061fc <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800628c:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8006290:	2414      	movs	r4, #20
 8006292:	fb04 5403 	mla	r4, r4, r3, r5
 8006296:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800629a:	2b00      	cmp	r3, #0
 800629c:	d041      	beq.n	8006322 <USBD_StdEPReq+0x142>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800629e:	4628      	mov	r0, r5
 80062a0:	f000 fa92 	bl	80067c8 <USBD_LL_IsStallEP>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d03c      	beq.n	8006322 <USBD_StdEPReq+0x142>
 80062a8:	2301      	movs	r3, #1
                pep->status = 0x0000U;
 80062aa:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80062ac:	2202      	movs	r2, #2
 80062ae:	4621      	mov	r1, r4
 80062b0:	4628      	mov	r0, r5
 80062b2:	f000 f881 	bl	80063b8 <USBD_CtlSendData>
              break;
 80062b6:	e7a9      	b.n	800620c <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 80062b8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80062bc:	2b02      	cmp	r3, #2
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	d00b      	beq.n	80062da <USBD_StdEPReq+0xfa>
 80062c2:	2a03      	cmp	r2, #3
 80062c4:	d19a      	bne.n	80061fc <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062c6:	8863      	ldrh	r3, [r4, #2]
 80062c8:	b91b      	cbnz	r3, 80062d2 <USBD_StdEPReq+0xf2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062ca:	0648      	lsls	r0, r1, #25
 80062cc:	d001      	beq.n	80062d2 <USBD_StdEPReq+0xf2>
 80062ce:	88e3      	ldrh	r3, [r4, #6]
 80062d0:	b373      	cbz	r3, 8006330 <USBD_StdEPReq+0x150>
              (void)USBD_CtlSendStatus(pdev);
 80062d2:	4628      	mov	r0, r5
 80062d4:	f000 f89c 	bl	8006410 <USBD_CtlSendStatus>
              break;
 80062d8:	e798      	b.n	800620c <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062da:	064a      	lsls	r2, r1, #25
 80062dc:	d08e      	beq.n	80061fc <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062de:	f000 fa5b 	bl	8006798 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062e2:	2180      	movs	r1, #128	@ 0x80
 80062e4:	4628      	mov	r0, r5
 80062e6:	f000 fa57 	bl	8006798 <USBD_LL_StallEP>
 80062ea:	e78f      	b.n	800620c <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062ec:	0648      	lsls	r0, r1, #25
 80062ee:	d185      	bne.n	80061fc <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062f0:	0611      	lsls	r1, r2, #24
 80062f2:	bf4c      	ite	mi
 80062f4:	f105 0114 	addmi.w	r1, r5, #20
 80062f8:	f505 71aa 	addpl.w	r1, r5, #340	@ 0x154
              pep->status = 0x0000U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006300:	2202      	movs	r2, #2
 8006302:	4628      	mov	r0, r5
 8006304:	f000 f858 	bl	80063b8 <USBD_CtlSendData>
              break;
 8006308:	e780      	b.n	800620c <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800630a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800630c:	2b00      	cmp	r3, #0
 800630e:	f43f af75 	beq.w	80061fc <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006312:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8006316:	1c5c      	adds	r4, r3, #1
 8006318:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800631c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8006320:	e7bb      	b.n	800629a <USBD_StdEPReq+0xba>
{
 8006322:	2300      	movs	r3, #0
 8006324:	e7c1      	b.n	80062aa <USBD_StdEPReq+0xca>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006326:	9101      	str	r1, [sp, #4]
 8006328:	f000 fa42 	bl	80067b0 <USBD_LL_ClearStallEP>
 800632c:	9901      	ldr	r1, [sp, #4]
 800632e:	e77c      	b.n	800622a <USBD_StdEPReq+0x4a>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006330:	4628      	mov	r0, r5
 8006332:	f000 fa31 	bl	8006798 <USBD_LL_StallEP>
 8006336:	e7cc      	b.n	80062d2 <USBD_StdEPReq+0xf2>

08006338 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8006338:	780b      	ldrb	r3, [r1, #0]
 800633a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800633c:	784b      	ldrb	r3, [r1, #1]
 800633e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8006340:	884b      	ldrh	r3, [r1, #2]
 8006342:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8006344:	888b      	ldrh	r3, [r1, #4]
 8006346:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8006348:	88cb      	ldrh	r3, [r1, #6]
 800634a:	80c3      	strh	r3, [r0, #6]
}
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop

08006350 <USBD_CtlError>:
{
 8006350:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006352:	2180      	movs	r1, #128	@ 0x80
{
 8006354:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006356:	f000 fa1f 	bl	8006798 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800635a:	4620      	mov	r0, r4
 800635c:	2100      	movs	r1, #0
}
 800635e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8006362:	f000 ba19 	b.w	8006798 <USBD_LL_StallEP>
 8006366:	bf00      	nop

08006368 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8006368:	b308      	cbz	r0, 80063ae <USBD_GetString+0x46>
{
 800636a:	b570      	push	{r4, r5, r6, lr}
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800636c:	7803      	ldrb	r3, [r0, #0]
 800636e:	460e      	mov	r6, r1
 8006370:	4614      	mov	r4, r2
 8006372:	4605      	mov	r5, r0
 8006374:	b1e3      	cbz	r3, 80063b0 <USBD_GetString+0x48>
 8006376:	3001      	adds	r0, #1
 8006378:	f7f9 ff32 	bl	80001e0 <strlen>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	b2db      	uxtb	r3, r3
 8006380:	3301      	adds	r3, #1
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	b2da      	uxtb	r2, r3
 8006386:	8023      	strh	r3, [r4, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006388:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 800638a:	7032      	strb	r2, [r6, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800638c:	7073      	strb	r3, [r6, #1]
  while (*pdesc != (uint8_t)'\0')
 800638e:	782c      	ldrb	r4, [r5, #0]
 8006390:	b164      	cbz	r4, 80063ac <USBD_GetString+0x44>
 8006392:	4628      	mov	r0, r5
  idx++;
 8006394:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8006396:	2100      	movs	r1, #0
    idx++;
 8006398:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800639a:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 800639c:	54f4      	strb	r4, [r6, r3]
    unicode[idx] = 0U;
 800639e:	54b1      	strb	r1, [r6, r2]
  while (*pdesc != (uint8_t)'\0')
 80063a0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 80063a4:	3302      	adds	r3, #2
 80063a6:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 80063a8:	2c00      	cmp	r4, #0
 80063aa:	d1f5      	bne.n	8006398 <USBD_GetString+0x30>
}
 80063ac:	bd70      	pop	{r4, r5, r6, pc}
 80063ae:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80063b0:	2202      	movs	r2, #2
 80063b2:	4613      	mov	r3, r2
 80063b4:	e7e7      	b.n	8006386 <USBD_GetString+0x1e>
 80063b6:	bf00      	nop

080063b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80063b8:	b508      	push	{r3, lr}
 80063ba:	4613      	mov	r3, r2
 80063bc:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063be:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;
 80063c0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063c4:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063c8:	2100      	movs	r1, #0
 80063ca:	f000 fa1d 	bl	8006808 <USBD_LL_Transmit>

  return USBD_OK;
}
 80063ce:	2000      	movs	r0, #0
 80063d0:	bd08      	pop	{r3, pc}
 80063d2:	bf00      	nop

080063d4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80063d4:	b508      	push	{r3, lr}
 80063d6:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063d8:	460a      	mov	r2, r1
 80063da:	2100      	movs	r1, #0
 80063dc:	f000 fa14 	bl	8006808 <USBD_LL_Transmit>

  return USBD_OK;
}
 80063e0:	2000      	movs	r0, #0
 80063e2:	bd08      	pop	{r3, pc}

080063e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80063e4:	b508      	push	{r3, lr}
 80063e6:	4613      	mov	r3, r2
 80063e8:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063ea:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;
 80063ec:	e9c0 3356 	strd	r3, r3, [r0, #344]	@ 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063f0:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063f4:	2100      	movs	r1, #0
 80063f6:	f000 fa13 	bl	8006820 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80063fa:	2000      	movs	r0, #0
 80063fc:	bd08      	pop	{r3, pc}
 80063fe:	bf00      	nop

08006400 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006400:	b508      	push	{r3, lr}
 8006402:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006404:	460a      	mov	r2, r1
 8006406:	2100      	movs	r1, #0
 8006408:	f000 fa0a 	bl	8006820 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800640c:	2000      	movs	r0, #0
 800640e:	bd08      	pop	{r3, pc}

08006410 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006410:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006412:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006414:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006416:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800641a:	461a      	mov	r2, r3
 800641c:	4619      	mov	r1, r3
 800641e:	f000 f9f3 	bl	8006808 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006422:	2000      	movs	r0, #0
 8006424:	bd08      	pop	{r3, pc}
 8006426:	bf00      	nop

08006428 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006428:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800642a:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800642c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800642e:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006432:	461a      	mov	r2, r3
 8006434:	4619      	mov	r1, r3
 8006436:	f000 f9f3 	bl	8006820 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800643a:	2000      	movs	r0, #0
 800643c:	bd08      	pop	{r3, pc}
 800643e:	bf00      	nop

08006440 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006440:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006442:	4918      	ldr	r1, [pc, #96]	@ (80064a4 <MX_USB_DEVICE_Init+0x64>)
 8006444:	4818      	ldr	r0, [pc, #96]	@ (80064a8 <MX_USB_DEVICE_Init+0x68>)
 8006446:	2200      	movs	r2, #0
 8006448:	f7ff fb26 	bl	8005a98 <USBD_Init>
 800644c:	b970      	cbnz	r0, 800646c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800644e:	4917      	ldr	r1, [pc, #92]	@ (80064ac <MX_USB_DEVICE_Init+0x6c>)
 8006450:	4815      	ldr	r0, [pc, #84]	@ (80064a8 <MX_USB_DEVICE_Init+0x68>)
 8006452:	f7ff fb35 	bl	8005ac0 <USBD_RegisterClass>
 8006456:	b988      	cbnz	r0, 800647c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006458:	4915      	ldr	r1, [pc, #84]	@ (80064b0 <MX_USB_DEVICE_Init+0x70>)
 800645a:	4813      	ldr	r0, [pc, #76]	@ (80064a8 <MX_USB_DEVICE_Init+0x68>)
 800645c:	f7ff fadc 	bl	8005a18 <USBD_CDC_RegisterInterface>
 8006460:	b9a0      	cbnz	r0, 800648c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006462:	4811      	ldr	r0, [pc, #68]	@ (80064a8 <MX_USB_DEVICE_Init+0x68>)
 8006464:	f7ff fb48 	bl	8005af8 <USBD_Start>
 8006468:	b9b8      	cbnz	r0, 800649a <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800646a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800646c:	f7fa fd40 	bl	8000ef0 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006470:	490e      	ldr	r1, [pc, #56]	@ (80064ac <MX_USB_DEVICE_Init+0x6c>)
 8006472:	480d      	ldr	r0, [pc, #52]	@ (80064a8 <MX_USB_DEVICE_Init+0x68>)
 8006474:	f7ff fb24 	bl	8005ac0 <USBD_RegisterClass>
 8006478:	2800      	cmp	r0, #0
 800647a:	d0ed      	beq.n	8006458 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800647c:	f7fa fd38 	bl	8000ef0 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006480:	490b      	ldr	r1, [pc, #44]	@ (80064b0 <MX_USB_DEVICE_Init+0x70>)
 8006482:	4809      	ldr	r0, [pc, #36]	@ (80064a8 <MX_USB_DEVICE_Init+0x68>)
 8006484:	f7ff fac8 	bl	8005a18 <USBD_CDC_RegisterInterface>
 8006488:	2800      	cmp	r0, #0
 800648a:	d0ea      	beq.n	8006462 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800648c:	f7fa fd30 	bl	8000ef0 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006490:	4805      	ldr	r0, [pc, #20]	@ (80064a8 <MX_USB_DEVICE_Init+0x68>)
 8006492:	f7ff fb31 	bl	8005af8 <USBD_Start>
 8006496:	2800      	cmp	r0, #0
 8006498:	d0e7      	beq.n	800646a <MX_USB_DEVICE_Init+0x2a>
}
 800649a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800649e:	f7fa bd27 	b.w	8000ef0 <Error_Handler>
 80064a2:	bf00      	nop
 80064a4:	200000e4 	.word	0x200000e4
 80064a8:	200005ac 	.word	0x200005ac
 80064ac:	20000058 	.word	0x20000058
 80064b0:	2000009c 	.word	0x2000009c

080064b4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80064b4:	2000      	movs	r0, #0
 80064b6:	4770      	bx	lr

080064b8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80064b8:	2000      	movs	r0, #0
 80064ba:	4770      	bx	lr

080064bc <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80064bc:	2000      	movs	r0, #0
 80064be:	4770      	bx	lr

080064c0 <CDC_Receive_FS>:
{
 80064c0:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80064c2:	4c05      	ldr	r4, [pc, #20]	@ (80064d8 <CDC_Receive_FS+0x18>)
{
 80064c4:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7ff fac0 	bl	8005a4c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80064cc:	4620      	mov	r0, r4
 80064ce:	f7ff fac9 	bl	8005a64 <USBD_CDC_ReceivePacket>
}
 80064d2:	2000      	movs	r0, #0
 80064d4:	bd10      	pop	{r4, pc}
 80064d6:	bf00      	nop
 80064d8:	200005ac 	.word	0x200005ac

080064dc <CDC_Init_FS>:
{
 80064dc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80064de:	4c06      	ldr	r4, [pc, #24]	@ (80064f8 <CDC_Init_FS+0x1c>)
 80064e0:	4906      	ldr	r1, [pc, #24]	@ (80064fc <CDC_Init_FS+0x20>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	4620      	mov	r0, r4
 80064e6:	f7ff faa3 	bl	8005a30 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80064ea:	4905      	ldr	r1, [pc, #20]	@ (8006500 <CDC_Init_FS+0x24>)
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7ff faad 	bl	8005a4c <USBD_CDC_SetRxBuffer>
}
 80064f2:	2000      	movs	r0, #0
 80064f4:	bd10      	pop	{r4, pc}
 80064f6:	bf00      	nop
 80064f8:	200005ac 	.word	0x200005ac
 80064fc:	20000888 	.word	0x20000888
 8006500:	20000c88 	.word	0x20000c88

08006504 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006504:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8006506:	4801      	ldr	r0, [pc, #4]	@ (800650c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006508:	800b      	strh	r3, [r1, #0]
}
 800650a:	4770      	bx	lr
 800650c:	200000d0 	.word	0x200000d0

08006510 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006510:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8006512:	4801      	ldr	r0, [pc, #4]	@ (8006518 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006514:	800b      	strh	r3, [r1, #0]
}
 8006516:	4770      	bx	lr
 8006518:	200000cc 	.word	0x200000cc

0800651c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800651c:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800651e:	4c04      	ldr	r4, [pc, #16]	@ (8006530 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006520:	4804      	ldr	r0, [pc, #16]	@ (8006534 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 8006522:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006524:	4621      	mov	r1, r4
 8006526:	f7ff ff1f 	bl	8006368 <USBD_GetString>
  return USBD_StrDesc;
}
 800652a:	4620      	mov	r0, r4
 800652c:	bd10      	pop	{r4, pc}
 800652e:	bf00      	nop
 8006530:	20001088 	.word	0x20001088
 8006534:	080079e0 	.word	0x080079e0

08006538 <USBD_FS_ProductStrDescriptor>:
{
 8006538:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800653a:	4c04      	ldr	r4, [pc, #16]	@ (800654c <USBD_FS_ProductStrDescriptor+0x14>)
 800653c:	4804      	ldr	r0, [pc, #16]	@ (8006550 <USBD_FS_ProductStrDescriptor+0x18>)
{
 800653e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006540:	4621      	mov	r1, r4
 8006542:	f7ff ff11 	bl	8006368 <USBD_GetString>
}
 8006546:	4620      	mov	r0, r4
 8006548:	bd10      	pop	{r4, pc}
 800654a:	bf00      	nop
 800654c:	20001088 	.word	0x20001088
 8006550:	080079f4 	.word	0x080079f4

08006554 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006554:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006556:	4c04      	ldr	r4, [pc, #16]	@ (8006568 <USBD_FS_ConfigStrDescriptor+0x14>)
 8006558:	4804      	ldr	r0, [pc, #16]	@ (800656c <USBD_FS_ConfigStrDescriptor+0x18>)
{
 800655a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800655c:	4621      	mov	r1, r4
 800655e:	f7ff ff03 	bl	8006368 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8006562:	4620      	mov	r0, r4
 8006564:	bd10      	pop	{r4, pc}
 8006566:	bf00      	nop
 8006568:	20001088 	.word	0x20001088
 800656c:	08007a0c 	.word	0x08007a0c

08006570 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006570:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006572:	4c04      	ldr	r4, [pc, #16]	@ (8006584 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8006574:	4804      	ldr	r0, [pc, #16]	@ (8006588 <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 8006576:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006578:	4621      	mov	r1, r4
 800657a:	f7ff fef5 	bl	8006368 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800657e:	4620      	mov	r0, r4
 8006580:	bd10      	pop	{r4, pc}
 8006582:	bf00      	nop
 8006584:	20001088 	.word	0x20001088
 8006588:	08007a18 	.word	0x08007a18

0800658c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800658c:	231a      	movs	r3, #26
}
 800658e:	4801      	ldr	r0, [pc, #4]	@ (8006594 <USBD_FS_SerialStrDescriptor+0x8>)
  *length = USB_SIZ_STRING_SERIAL;
 8006590:	800b      	strh	r3, [r1, #0]
}
 8006592:	4770      	bx	lr
 8006594:	200000b0 	.word	0x200000b0

08006598 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006598:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 800659a:	6803      	ldr	r3, [r0, #0]
{
 800659c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800659e:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 80065a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065a4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80065a8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80065ac:	9406      	str	r4, [sp, #24]
  if(pcdHandle->Instance==USB_OTG_FS)
 80065ae:	d001      	beq.n	80065b4 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80065b0:	b009      	add	sp, #36	@ 0x24
 80065b2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065b4:	4d1c      	ldr	r5, [pc, #112]	@ (8006628 <HAL_PCD_MspInit+0x90>)
 80065b6:	9400      	str	r4, [sp, #0]
 80065b8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065ba:	481c      	ldr	r0, [pc, #112]	@ (800662c <HAL_PCD_MspInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	632b      	str	r3, [r5, #48]	@ 0x30
 80065c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065ca:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80065cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065d0:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80065d2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065d4:	f7fb fae4 	bl	8001ba0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80065d8:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80065dc:	2302      	movs	r3, #2
 80065de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065e2:	2200      	movs	r2, #0
 80065e4:	2303      	movs	r3, #3
 80065e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065ea:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80065ec:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065ee:	480f      	ldr	r0, [pc, #60]	@ (800662c <HAL_PCD_MspInit+0x94>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80065f0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065f2:	f7fb fad5 	bl	8001ba0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80065f6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80065f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065fc:	636b      	str	r3, [r5, #52]	@ 0x34
 80065fe:	9401      	str	r4, [sp, #4]
 8006600:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8006602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006606:	646b      	str	r3, [r5, #68]	@ 0x44
 8006608:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800660a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800660e:	4622      	mov	r2, r4
 8006610:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006612:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006614:	2043      	movs	r0, #67	@ 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006616:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006618:	f7fb f8b6 	bl	8001788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800661c:	2043      	movs	r0, #67	@ 0x43
 800661e:	f7fb f8ef 	bl	8001800 <HAL_NVIC_EnableIRQ>
}
 8006622:	b009      	add	sp, #36	@ 0x24
 8006624:	bd30      	pop	{r4, r5, pc}
 8006626:	bf00      	nop
 8006628:	40023800 	.word	0x40023800
 800662c:	40020000 	.word	0x40020000

08006630 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006630:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8006634:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006638:	f7ff ba72 	b.w	8005b20 <USBD_LL_SetupStage>

0800663c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800663c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8006640:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006644:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006648:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800664c:	f7ff ba98 	b.w	8005b80 <USBD_LL_DataOutStage>

08006650 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006650:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8006654:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006658:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800665c:	6a1a      	ldr	r2, [r3, #32]
 800665e:	f7ff bac9 	b.w	8005bf4 <USBD_LL_DataInStage>
 8006662:	bf00      	nop

08006664 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006664:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006668:	f7ff bb6a 	b.w	8005d40 <USBD_LL_SOF>

0800666c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800666c:	b510      	push	{r4, lr}
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800666e:	79c3      	ldrb	r3, [r0, #7]
 8006670:	2b02      	cmp	r3, #2
{
 8006672:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006674:	d001      	beq.n	800667a <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8006676:	f7fa fc3b 	bl	8000ef0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800667a:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800667e:	2101      	movs	r1, #1
 8006680:	f7ff fb40 	bl	8005d04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006684:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
}
 8006688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800668c:	f7ff bb0c 	b.w	8005ca8 <USBD_LL_Reset>

08006690 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006690:	b510      	push	{r4, lr}
 8006692:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006694:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006698:	f7ff fb38 	bl	8005d0c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800669c:	6822      	ldr	r2, [r4, #0]
 800669e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 80066a2:	f043 0301 	orr.w	r3, r3, #1
 80066a6:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80066aa:	7ae3      	ldrb	r3, [r4, #11]
 80066ac:	b123      	cbz	r3, 80066b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80066ae:	4a03      	ldr	r2, [pc, #12]	@ (80066bc <HAL_PCD_SuspendCallback+0x2c>)
 80066b0:	6913      	ldr	r3, [r2, #16]
 80066b2:	f043 0306 	orr.w	r3, r3, #6
 80066b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80066b8:	bd10      	pop	{r4, pc}
 80066ba:	bf00      	nop
 80066bc:	e000ed00 	.word	0xe000ed00

080066c0 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80066c0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80066c4:	f7ff bb30 	b.w	8005d28 <USBD_LL_Resume>

080066c8 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80066c8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80066cc:	f7ff bb5e 	b.w	8005d8c <USBD_LL_IsoOUTIncomplete>

080066d0 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80066d0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80066d4:	f7ff bb44 	b.w	8005d60 <USBD_LL_IsoINIncomplete>

080066d8 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80066d8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80066dc:	f7ff bb6c 	b.w	8005db8 <USBD_LL_DevConnected>

080066e0 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80066e0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80066e4:	f7ff bb6a 	b.w	8005dbc <USBD_LL_DevDisconnected>

080066e8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80066e8:	7803      	ldrb	r3, [r0, #0]
 80066ea:	b10b      	cbz	r3, 80066f0 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 80066ec:	2000      	movs	r0, #0
 80066ee:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 80066f0:	4b15      	ldr	r3, [pc, #84]	@ (8006748 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80066f2:	2204      	movs	r2, #4
{
 80066f4:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80066f6:	f44f 7c00 	mov.w	ip, #512	@ 0x200
  hpcd_USB_OTG_FS.pData = pdev;
 80066fa:	f8c3 04e0 	str.w	r0, [r3, #1248]	@ 0x4e0
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80066fe:	f04f 44a0 	mov.w	r4, #1342177280	@ 0x50000000
  pdev->pData = &hpcd_USB_OTG_FS;
 8006702:	f8c0 32c8 	str.w	r3, [r0, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006706:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006708:	711a      	strb	r2, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800670a:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800670c:	2201      	movs	r2, #1
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800670e:	601c      	str	r4, [r3, #0]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006710:	f8a3 c006 	strh.w	ip, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006714:	f8c3 1009 	str.w	r1, [r3, #9]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006718:	81da      	strh	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800671a:	f7fb fe01 	bl	8002320 <HAL_PCD_Init>
 800671e:	b978      	cbnz	r0, 8006740 <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006720:	2180      	movs	r1, #128	@ 0x80
 8006722:	4809      	ldr	r0, [pc, #36]	@ (8006748 <USBD_LL_Init+0x60>)
 8006724:	f7fc ff78 	bl	8003618 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006728:	2240      	movs	r2, #64	@ 0x40
 800672a:	2100      	movs	r1, #0
 800672c:	4806      	ldr	r0, [pc, #24]	@ (8006748 <USBD_LL_Init+0x60>)
 800672e:	f7fc fef1 	bl	8003514 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006732:	2280      	movs	r2, #128	@ 0x80
 8006734:	2101      	movs	r1, #1
 8006736:	4804      	ldr	r0, [pc, #16]	@ (8006748 <USBD_LL_Init+0x60>)
 8006738:	f7fc feec 	bl	8003514 <HAL_PCDEx_SetTxFiFo>
}
 800673c:	2000      	movs	r0, #0
 800673e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006740:	f7fa fbd6 	bl	8000ef0 <Error_Handler>
 8006744:	e7ec      	b.n	8006720 <USBD_LL_Init+0x38>
 8006746:	bf00      	nop
 8006748:	200014a8 	.word	0x200014a8

0800674c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800674c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800674e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006752:	f7fb ffef 	bl	8002734 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006756:	b118      	cbz	r0, 8006760 <USBD_LL_Start+0x14>
 8006758:	2802      	cmp	r0, #2
 800675a:	bf0c      	ite	eq
 800675c:	2001      	moveq	r0, #1
 800675e:	2003      	movne	r0, #3
}
 8006760:	bd08      	pop	{r3, pc}
 8006762:	bf00      	nop

08006764 <USBD_LL_OpenEP>:
{
 8006764:	4694      	mov	ip, r2
 8006766:	b508      	push	{r3, lr}
 8006768:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800676a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800676e:	4663      	mov	r3, ip
 8006770:	f7fc fd94 	bl	800329c <HAL_PCD_EP_Open>
  switch (hal_status)
 8006774:	b118      	cbz	r0, 800677e <USBD_LL_OpenEP+0x1a>
 8006776:	2802      	cmp	r0, #2
 8006778:	bf0c      	ite	eq
 800677a:	2001      	moveq	r0, #1
 800677c:	2003      	movne	r0, #3
}
 800677e:	bd08      	pop	{r3, pc}

08006780 <USBD_LL_CloseEP>:
{
 8006780:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006782:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006786:	f7fc fdc7 	bl	8003318 <HAL_PCD_EP_Close>
  switch (hal_status)
 800678a:	b118      	cbz	r0, 8006794 <USBD_LL_CloseEP+0x14>
 800678c:	2802      	cmp	r0, #2
 800678e:	bf0c      	ite	eq
 8006790:	2001      	moveq	r0, #1
 8006792:	2003      	movne	r0, #3
}
 8006794:	bd08      	pop	{r3, pc}
 8006796:	bf00      	nop

08006798 <USBD_LL_StallEP>:
{
 8006798:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800679a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800679e:	f7fc fe3f 	bl	8003420 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 80067a2:	b118      	cbz	r0, 80067ac <USBD_LL_StallEP+0x14>
 80067a4:	2802      	cmp	r0, #2
 80067a6:	bf0c      	ite	eq
 80067a8:	2001      	moveq	r0, #1
 80067aa:	2003      	movne	r0, #3
}
 80067ac:	bd08      	pop	{r3, pc}
 80067ae:	bf00      	nop

080067b0 <USBD_LL_ClearStallEP>:
{
 80067b0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80067b2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80067b6:	f7fc fe75 	bl	80034a4 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 80067ba:	b118      	cbz	r0, 80067c4 <USBD_LL_ClearStallEP+0x14>
 80067bc:	2802      	cmp	r0, #2
 80067be:	bf0c      	ite	eq
 80067c0:	2001      	moveq	r0, #1
 80067c2:	2003      	movne	r0, #3
}
 80067c4:	bd08      	pop	{r3, pc}
 80067c6:	bf00      	nop

080067c8 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80067c8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80067ca:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
  if((ep_addr & 0x80) == 0x80)
 80067ce:	d406      	bmi.n	80067de <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80067d0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80067d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80067d8:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
}
 80067dc:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80067de:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80067e2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80067e6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80067ea:	7d98      	ldrb	r0, [r3, #22]
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop

080067f0 <USBD_LL_SetUSBAddress>:
{
 80067f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80067f2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80067f6:	f7fc fd3d 	bl	8003274 <HAL_PCD_SetAddress>
  switch (hal_status)
 80067fa:	b118      	cbz	r0, 8006804 <USBD_LL_SetUSBAddress+0x14>
 80067fc:	2802      	cmp	r0, #2
 80067fe:	bf0c      	ite	eq
 8006800:	2001      	moveq	r0, #1
 8006802:	2003      	movne	r0, #3
}
 8006804:	bd08      	pop	{r3, pc}
 8006806:	bf00      	nop

08006808 <USBD_LL_Transmit>:
{
 8006808:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800680a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800680e:	f7fc fde3 	bl	80033d8 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8006812:	b118      	cbz	r0, 800681c <USBD_LL_Transmit+0x14>
 8006814:	2802      	cmp	r0, #2
 8006816:	bf0c      	ite	eq
 8006818:	2001      	moveq	r0, #1
 800681a:	2003      	movne	r0, #3
}
 800681c:	bd08      	pop	{r3, pc}
 800681e:	bf00      	nop

08006820 <USBD_LL_PrepareReceive>:
{
 8006820:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006822:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006826:	f7fc fdab 	bl	8003380 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800682a:	b118      	cbz	r0, 8006834 <USBD_LL_PrepareReceive+0x14>
 800682c:	2802      	cmp	r0, #2
 800682e:	bf0c      	ite	eq
 8006830:	2001      	moveq	r0, #1
 8006832:	2003      	movne	r0, #3
}
 8006834:	bd08      	pop	{r3, pc}
 8006836:	bf00      	nop

08006838 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006838:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800683c:	f7fc bdc2 	b.w	80033c4 <HAL_PCD_EP_GetRxCount>

08006840 <USBD_static_malloc>:
}
 8006840:	4800      	ldr	r0, [pc, #0]	@ (8006844 <USBD_static_malloc+0x4>)
 8006842:	4770      	bx	lr
 8006844:	20001288 	.word	0x20001288

08006848 <USBD_static_free>:
}
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop

0800684c <siprintf>:
 800684c:	b40e      	push	{r1, r2, r3}
 800684e:	b500      	push	{lr}
 8006850:	b09c      	sub	sp, #112	@ 0x70
 8006852:	ab1d      	add	r3, sp, #116	@ 0x74
 8006854:	9002      	str	r0, [sp, #8]
 8006856:	9006      	str	r0, [sp, #24]
 8006858:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800685c:	4809      	ldr	r0, [pc, #36]	@ (8006884 <siprintf+0x38>)
 800685e:	9107      	str	r1, [sp, #28]
 8006860:	9104      	str	r1, [sp, #16]
 8006862:	4909      	ldr	r1, [pc, #36]	@ (8006888 <siprintf+0x3c>)
 8006864:	f853 2b04 	ldr.w	r2, [r3], #4
 8006868:	9105      	str	r1, [sp, #20]
 800686a:	6800      	ldr	r0, [r0, #0]
 800686c:	9301      	str	r3, [sp, #4]
 800686e:	a902      	add	r1, sp, #8
 8006870:	f000 f9a2 	bl	8006bb8 <_svfiprintf_r>
 8006874:	9b02      	ldr	r3, [sp, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	b01c      	add	sp, #112	@ 0x70
 800687c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006880:	b003      	add	sp, #12
 8006882:	4770      	bx	lr
 8006884:	20000100 	.word	0x20000100
 8006888:	ffff0208 	.word	0xffff0208

0800688c <memset>:
 800688c:	4402      	add	r2, r0
 800688e:	4603      	mov	r3, r0
 8006890:	4293      	cmp	r3, r2
 8006892:	d100      	bne.n	8006896 <memset+0xa>
 8006894:	4770      	bx	lr
 8006896:	f803 1b01 	strb.w	r1, [r3], #1
 800689a:	e7f9      	b.n	8006890 <memset+0x4>

0800689c <__errno>:
 800689c:	4b01      	ldr	r3, [pc, #4]	@ (80068a4 <__errno+0x8>)
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20000100 	.word	0x20000100

080068a8 <__libc_init_array>:
 80068a8:	b570      	push	{r4, r5, r6, lr}
 80068aa:	4d0d      	ldr	r5, [pc, #52]	@ (80068e0 <__libc_init_array+0x38>)
 80068ac:	4c0d      	ldr	r4, [pc, #52]	@ (80068e4 <__libc_init_array+0x3c>)
 80068ae:	1b64      	subs	r4, r4, r5
 80068b0:	10a4      	asrs	r4, r4, #2
 80068b2:	2600      	movs	r6, #0
 80068b4:	42a6      	cmp	r6, r4
 80068b6:	d109      	bne.n	80068cc <__libc_init_array+0x24>
 80068b8:	4d0b      	ldr	r5, [pc, #44]	@ (80068e8 <__libc_init_array+0x40>)
 80068ba:	4c0c      	ldr	r4, [pc, #48]	@ (80068ec <__libc_init_array+0x44>)
 80068bc:	f000 fc66 	bl	800718c <_init>
 80068c0:	1b64      	subs	r4, r4, r5
 80068c2:	10a4      	asrs	r4, r4, #2
 80068c4:	2600      	movs	r6, #0
 80068c6:	42a6      	cmp	r6, r4
 80068c8:	d105      	bne.n	80068d6 <__libc_init_array+0x2e>
 80068ca:	bd70      	pop	{r4, r5, r6, pc}
 80068cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d0:	4798      	blx	r3
 80068d2:	3601      	adds	r6, #1
 80068d4:	e7ee      	b.n	80068b4 <__libc_init_array+0xc>
 80068d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068da:	4798      	blx	r3
 80068dc:	3601      	adds	r6, #1
 80068de:	e7f2      	b.n	80068c6 <__libc_init_array+0x1e>
 80068e0:	08007a64 	.word	0x08007a64
 80068e4:	08007a64 	.word	0x08007a64
 80068e8:	08007a64 	.word	0x08007a64
 80068ec:	08007a68 	.word	0x08007a68

080068f0 <__retarget_lock_acquire_recursive>:
 80068f0:	4770      	bx	lr

080068f2 <__retarget_lock_release_recursive>:
 80068f2:	4770      	bx	lr

080068f4 <memcpy>:
 80068f4:	440a      	add	r2, r1
 80068f6:	4291      	cmp	r1, r2
 80068f8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80068fc:	d100      	bne.n	8006900 <memcpy+0xc>
 80068fe:	4770      	bx	lr
 8006900:	b510      	push	{r4, lr}
 8006902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800690a:	4291      	cmp	r1, r2
 800690c:	d1f9      	bne.n	8006902 <memcpy+0xe>
 800690e:	bd10      	pop	{r4, pc}

08006910 <_free_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4605      	mov	r5, r0
 8006914:	2900      	cmp	r1, #0
 8006916:	d041      	beq.n	800699c <_free_r+0x8c>
 8006918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800691c:	1f0c      	subs	r4, r1, #4
 800691e:	2b00      	cmp	r3, #0
 8006920:	bfb8      	it	lt
 8006922:	18e4      	addlt	r4, r4, r3
 8006924:	f000 f8e0 	bl	8006ae8 <__malloc_lock>
 8006928:	4a1d      	ldr	r2, [pc, #116]	@ (80069a0 <_free_r+0x90>)
 800692a:	6813      	ldr	r3, [r2, #0]
 800692c:	b933      	cbnz	r3, 800693c <_free_r+0x2c>
 800692e:	6063      	str	r3, [r4, #4]
 8006930:	6014      	str	r4, [r2, #0]
 8006932:	4628      	mov	r0, r5
 8006934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006938:	f000 b8dc 	b.w	8006af4 <__malloc_unlock>
 800693c:	42a3      	cmp	r3, r4
 800693e:	d908      	bls.n	8006952 <_free_r+0x42>
 8006940:	6820      	ldr	r0, [r4, #0]
 8006942:	1821      	adds	r1, r4, r0
 8006944:	428b      	cmp	r3, r1
 8006946:	bf01      	itttt	eq
 8006948:	6819      	ldreq	r1, [r3, #0]
 800694a:	685b      	ldreq	r3, [r3, #4]
 800694c:	1809      	addeq	r1, r1, r0
 800694e:	6021      	streq	r1, [r4, #0]
 8006950:	e7ed      	b.n	800692e <_free_r+0x1e>
 8006952:	461a      	mov	r2, r3
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	b10b      	cbz	r3, 800695c <_free_r+0x4c>
 8006958:	42a3      	cmp	r3, r4
 800695a:	d9fa      	bls.n	8006952 <_free_r+0x42>
 800695c:	6811      	ldr	r1, [r2, #0]
 800695e:	1850      	adds	r0, r2, r1
 8006960:	42a0      	cmp	r0, r4
 8006962:	d10b      	bne.n	800697c <_free_r+0x6c>
 8006964:	6820      	ldr	r0, [r4, #0]
 8006966:	4401      	add	r1, r0
 8006968:	1850      	adds	r0, r2, r1
 800696a:	4283      	cmp	r3, r0
 800696c:	6011      	str	r1, [r2, #0]
 800696e:	d1e0      	bne.n	8006932 <_free_r+0x22>
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	6053      	str	r3, [r2, #4]
 8006976:	4408      	add	r0, r1
 8006978:	6010      	str	r0, [r2, #0]
 800697a:	e7da      	b.n	8006932 <_free_r+0x22>
 800697c:	d902      	bls.n	8006984 <_free_r+0x74>
 800697e:	230c      	movs	r3, #12
 8006980:	602b      	str	r3, [r5, #0]
 8006982:	e7d6      	b.n	8006932 <_free_r+0x22>
 8006984:	6820      	ldr	r0, [r4, #0]
 8006986:	1821      	adds	r1, r4, r0
 8006988:	428b      	cmp	r3, r1
 800698a:	bf04      	itt	eq
 800698c:	6819      	ldreq	r1, [r3, #0]
 800698e:	685b      	ldreq	r3, [r3, #4]
 8006990:	6063      	str	r3, [r4, #4]
 8006992:	bf04      	itt	eq
 8006994:	1809      	addeq	r1, r1, r0
 8006996:	6021      	streq	r1, [r4, #0]
 8006998:	6054      	str	r4, [r2, #4]
 800699a:	e7ca      	b.n	8006932 <_free_r+0x22>
 800699c:	bd38      	pop	{r3, r4, r5, pc}
 800699e:	bf00      	nop
 80069a0:	20001ad0 	.word	0x20001ad0

080069a4 <sbrk_aligned>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	4e0f      	ldr	r6, [pc, #60]	@ (80069e4 <sbrk_aligned+0x40>)
 80069a8:	460c      	mov	r4, r1
 80069aa:	6831      	ldr	r1, [r6, #0]
 80069ac:	4605      	mov	r5, r0
 80069ae:	b911      	cbnz	r1, 80069b6 <sbrk_aligned+0x12>
 80069b0:	f000 fba6 	bl	8007100 <_sbrk_r>
 80069b4:	6030      	str	r0, [r6, #0]
 80069b6:	4621      	mov	r1, r4
 80069b8:	4628      	mov	r0, r5
 80069ba:	f000 fba1 	bl	8007100 <_sbrk_r>
 80069be:	1c43      	adds	r3, r0, #1
 80069c0:	d103      	bne.n	80069ca <sbrk_aligned+0x26>
 80069c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80069c6:	4620      	mov	r0, r4
 80069c8:	bd70      	pop	{r4, r5, r6, pc}
 80069ca:	1cc4      	adds	r4, r0, #3
 80069cc:	f024 0403 	bic.w	r4, r4, #3
 80069d0:	42a0      	cmp	r0, r4
 80069d2:	d0f8      	beq.n	80069c6 <sbrk_aligned+0x22>
 80069d4:	1a21      	subs	r1, r4, r0
 80069d6:	4628      	mov	r0, r5
 80069d8:	f000 fb92 	bl	8007100 <_sbrk_r>
 80069dc:	3001      	adds	r0, #1
 80069de:	d1f2      	bne.n	80069c6 <sbrk_aligned+0x22>
 80069e0:	e7ef      	b.n	80069c2 <sbrk_aligned+0x1e>
 80069e2:	bf00      	nop
 80069e4:	20001acc 	.word	0x20001acc

080069e8 <_malloc_r>:
 80069e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ec:	1ccd      	adds	r5, r1, #3
 80069ee:	f025 0503 	bic.w	r5, r5, #3
 80069f2:	3508      	adds	r5, #8
 80069f4:	2d0c      	cmp	r5, #12
 80069f6:	bf38      	it	cc
 80069f8:	250c      	movcc	r5, #12
 80069fa:	2d00      	cmp	r5, #0
 80069fc:	4606      	mov	r6, r0
 80069fe:	db01      	blt.n	8006a04 <_malloc_r+0x1c>
 8006a00:	42a9      	cmp	r1, r5
 8006a02:	d904      	bls.n	8006a0e <_malloc_r+0x26>
 8006a04:	230c      	movs	r3, #12
 8006a06:	6033      	str	r3, [r6, #0]
 8006a08:	2000      	movs	r0, #0
 8006a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ae4 <_malloc_r+0xfc>
 8006a12:	f000 f869 	bl	8006ae8 <__malloc_lock>
 8006a16:	f8d8 3000 	ldr.w	r3, [r8]
 8006a1a:	461c      	mov	r4, r3
 8006a1c:	bb44      	cbnz	r4, 8006a70 <_malloc_r+0x88>
 8006a1e:	4629      	mov	r1, r5
 8006a20:	4630      	mov	r0, r6
 8006a22:	f7ff ffbf 	bl	80069a4 <sbrk_aligned>
 8006a26:	1c43      	adds	r3, r0, #1
 8006a28:	4604      	mov	r4, r0
 8006a2a:	d158      	bne.n	8006ade <_malloc_r+0xf6>
 8006a2c:	f8d8 4000 	ldr.w	r4, [r8]
 8006a30:	4627      	mov	r7, r4
 8006a32:	2f00      	cmp	r7, #0
 8006a34:	d143      	bne.n	8006abe <_malloc_r+0xd6>
 8006a36:	2c00      	cmp	r4, #0
 8006a38:	d04b      	beq.n	8006ad2 <_malloc_r+0xea>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	4639      	mov	r1, r7
 8006a3e:	4630      	mov	r0, r6
 8006a40:	eb04 0903 	add.w	r9, r4, r3
 8006a44:	f000 fb5c 	bl	8007100 <_sbrk_r>
 8006a48:	4581      	cmp	r9, r0
 8006a4a:	d142      	bne.n	8006ad2 <_malloc_r+0xea>
 8006a4c:	6821      	ldr	r1, [r4, #0]
 8006a4e:	1a6d      	subs	r5, r5, r1
 8006a50:	4629      	mov	r1, r5
 8006a52:	4630      	mov	r0, r6
 8006a54:	f7ff ffa6 	bl	80069a4 <sbrk_aligned>
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d03a      	beq.n	8006ad2 <_malloc_r+0xea>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	442b      	add	r3, r5
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	f8d8 3000 	ldr.w	r3, [r8]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	bb62      	cbnz	r2, 8006ac4 <_malloc_r+0xdc>
 8006a6a:	f8c8 7000 	str.w	r7, [r8]
 8006a6e:	e00f      	b.n	8006a90 <_malloc_r+0xa8>
 8006a70:	6822      	ldr	r2, [r4, #0]
 8006a72:	1b52      	subs	r2, r2, r5
 8006a74:	d420      	bmi.n	8006ab8 <_malloc_r+0xd0>
 8006a76:	2a0b      	cmp	r2, #11
 8006a78:	d917      	bls.n	8006aaa <_malloc_r+0xc2>
 8006a7a:	1961      	adds	r1, r4, r5
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	6025      	str	r5, [r4, #0]
 8006a80:	bf18      	it	ne
 8006a82:	6059      	strne	r1, [r3, #4]
 8006a84:	6863      	ldr	r3, [r4, #4]
 8006a86:	bf08      	it	eq
 8006a88:	f8c8 1000 	streq.w	r1, [r8]
 8006a8c:	5162      	str	r2, [r4, r5]
 8006a8e:	604b      	str	r3, [r1, #4]
 8006a90:	4630      	mov	r0, r6
 8006a92:	f000 f82f 	bl	8006af4 <__malloc_unlock>
 8006a96:	f104 000b 	add.w	r0, r4, #11
 8006a9a:	1d23      	adds	r3, r4, #4
 8006a9c:	f020 0007 	bic.w	r0, r0, #7
 8006aa0:	1ac2      	subs	r2, r0, r3
 8006aa2:	bf1c      	itt	ne
 8006aa4:	1a1b      	subne	r3, r3, r0
 8006aa6:	50a3      	strne	r3, [r4, r2]
 8006aa8:	e7af      	b.n	8006a0a <_malloc_r+0x22>
 8006aaa:	6862      	ldr	r2, [r4, #4]
 8006aac:	42a3      	cmp	r3, r4
 8006aae:	bf0c      	ite	eq
 8006ab0:	f8c8 2000 	streq.w	r2, [r8]
 8006ab4:	605a      	strne	r2, [r3, #4]
 8006ab6:	e7eb      	b.n	8006a90 <_malloc_r+0xa8>
 8006ab8:	4623      	mov	r3, r4
 8006aba:	6864      	ldr	r4, [r4, #4]
 8006abc:	e7ae      	b.n	8006a1c <_malloc_r+0x34>
 8006abe:	463c      	mov	r4, r7
 8006ac0:	687f      	ldr	r7, [r7, #4]
 8006ac2:	e7b6      	b.n	8006a32 <_malloc_r+0x4a>
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	42a3      	cmp	r3, r4
 8006aca:	d1fb      	bne.n	8006ac4 <_malloc_r+0xdc>
 8006acc:	2300      	movs	r3, #0
 8006ace:	6053      	str	r3, [r2, #4]
 8006ad0:	e7de      	b.n	8006a90 <_malloc_r+0xa8>
 8006ad2:	230c      	movs	r3, #12
 8006ad4:	6033      	str	r3, [r6, #0]
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f000 f80c 	bl	8006af4 <__malloc_unlock>
 8006adc:	e794      	b.n	8006a08 <_malloc_r+0x20>
 8006ade:	6005      	str	r5, [r0, #0]
 8006ae0:	e7d6      	b.n	8006a90 <_malloc_r+0xa8>
 8006ae2:	bf00      	nop
 8006ae4:	20001ad0 	.word	0x20001ad0

08006ae8 <__malloc_lock>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	@ (8006af0 <__malloc_lock+0x8>)
 8006aea:	f7ff bf01 	b.w	80068f0 <__retarget_lock_acquire_recursive>
 8006aee:	bf00      	nop
 8006af0:	20001ac8 	.word	0x20001ac8

08006af4 <__malloc_unlock>:
 8006af4:	4801      	ldr	r0, [pc, #4]	@ (8006afc <__malloc_unlock+0x8>)
 8006af6:	f7ff befc 	b.w	80068f2 <__retarget_lock_release_recursive>
 8006afa:	bf00      	nop
 8006afc:	20001ac8 	.word	0x20001ac8

08006b00 <__ssputs_r>:
 8006b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b04:	688e      	ldr	r6, [r1, #8]
 8006b06:	461f      	mov	r7, r3
 8006b08:	42be      	cmp	r6, r7
 8006b0a:	680b      	ldr	r3, [r1, #0]
 8006b0c:	4682      	mov	sl, r0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	4690      	mov	r8, r2
 8006b12:	d82d      	bhi.n	8006b70 <__ssputs_r+0x70>
 8006b14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b1c:	d026      	beq.n	8006b6c <__ssputs_r+0x6c>
 8006b1e:	6965      	ldr	r5, [r4, #20]
 8006b20:	6909      	ldr	r1, [r1, #16]
 8006b22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b26:	eba3 0901 	sub.w	r9, r3, r1
 8006b2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b2e:	1c7b      	adds	r3, r7, #1
 8006b30:	444b      	add	r3, r9
 8006b32:	106d      	asrs	r5, r5, #1
 8006b34:	429d      	cmp	r5, r3
 8006b36:	bf38      	it	cc
 8006b38:	461d      	movcc	r5, r3
 8006b3a:	0553      	lsls	r3, r2, #21
 8006b3c:	d527      	bpl.n	8006b8e <__ssputs_r+0x8e>
 8006b3e:	4629      	mov	r1, r5
 8006b40:	f7ff ff52 	bl	80069e8 <_malloc_r>
 8006b44:	4606      	mov	r6, r0
 8006b46:	b360      	cbz	r0, 8006ba2 <__ssputs_r+0xa2>
 8006b48:	6921      	ldr	r1, [r4, #16]
 8006b4a:	464a      	mov	r2, r9
 8006b4c:	f7ff fed2 	bl	80068f4 <memcpy>
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b5a:	81a3      	strh	r3, [r4, #12]
 8006b5c:	6126      	str	r6, [r4, #16]
 8006b5e:	6165      	str	r5, [r4, #20]
 8006b60:	444e      	add	r6, r9
 8006b62:	eba5 0509 	sub.w	r5, r5, r9
 8006b66:	6026      	str	r6, [r4, #0]
 8006b68:	60a5      	str	r5, [r4, #8]
 8006b6a:	463e      	mov	r6, r7
 8006b6c:	42be      	cmp	r6, r7
 8006b6e:	d900      	bls.n	8006b72 <__ssputs_r+0x72>
 8006b70:	463e      	mov	r6, r7
 8006b72:	6820      	ldr	r0, [r4, #0]
 8006b74:	4632      	mov	r2, r6
 8006b76:	4641      	mov	r1, r8
 8006b78:	f000 faa8 	bl	80070cc <memmove>
 8006b7c:	68a3      	ldr	r3, [r4, #8]
 8006b7e:	1b9b      	subs	r3, r3, r6
 8006b80:	60a3      	str	r3, [r4, #8]
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	4433      	add	r3, r6
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	2000      	movs	r0, #0
 8006b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8e:	462a      	mov	r2, r5
 8006b90:	f000 fac6 	bl	8007120 <_realloc_r>
 8006b94:	4606      	mov	r6, r0
 8006b96:	2800      	cmp	r0, #0
 8006b98:	d1e0      	bne.n	8006b5c <__ssputs_r+0x5c>
 8006b9a:	6921      	ldr	r1, [r4, #16]
 8006b9c:	4650      	mov	r0, sl
 8006b9e:	f7ff feb7 	bl	8006910 <_free_r>
 8006ba2:	230c      	movs	r3, #12
 8006ba4:	f8ca 3000 	str.w	r3, [sl]
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bae:	81a3      	strh	r3, [r4, #12]
 8006bb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bb4:	e7e9      	b.n	8006b8a <__ssputs_r+0x8a>
	...

08006bb8 <_svfiprintf_r>:
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	4698      	mov	r8, r3
 8006bbe:	898b      	ldrh	r3, [r1, #12]
 8006bc0:	061b      	lsls	r3, r3, #24
 8006bc2:	b09d      	sub	sp, #116	@ 0x74
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	460d      	mov	r5, r1
 8006bc8:	4614      	mov	r4, r2
 8006bca:	d510      	bpl.n	8006bee <_svfiprintf_r+0x36>
 8006bcc:	690b      	ldr	r3, [r1, #16]
 8006bce:	b973      	cbnz	r3, 8006bee <_svfiprintf_r+0x36>
 8006bd0:	2140      	movs	r1, #64	@ 0x40
 8006bd2:	f7ff ff09 	bl	80069e8 <_malloc_r>
 8006bd6:	6028      	str	r0, [r5, #0]
 8006bd8:	6128      	str	r0, [r5, #16]
 8006bda:	b930      	cbnz	r0, 8006bea <_svfiprintf_r+0x32>
 8006bdc:	230c      	movs	r3, #12
 8006bde:	603b      	str	r3, [r7, #0]
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006be4:	b01d      	add	sp, #116	@ 0x74
 8006be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bea:	2340      	movs	r3, #64	@ 0x40
 8006bec:	616b      	str	r3, [r5, #20]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bf2:	2320      	movs	r3, #32
 8006bf4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bfc:	2330      	movs	r3, #48	@ 0x30
 8006bfe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d9c <_svfiprintf_r+0x1e4>
 8006c02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c06:	f04f 0901 	mov.w	r9, #1
 8006c0a:	4623      	mov	r3, r4
 8006c0c:	469a      	mov	sl, r3
 8006c0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c12:	b10a      	cbz	r2, 8006c18 <_svfiprintf_r+0x60>
 8006c14:	2a25      	cmp	r2, #37	@ 0x25
 8006c16:	d1f9      	bne.n	8006c0c <_svfiprintf_r+0x54>
 8006c18:	ebba 0b04 	subs.w	fp, sl, r4
 8006c1c:	d00b      	beq.n	8006c36 <_svfiprintf_r+0x7e>
 8006c1e:	465b      	mov	r3, fp
 8006c20:	4622      	mov	r2, r4
 8006c22:	4629      	mov	r1, r5
 8006c24:	4638      	mov	r0, r7
 8006c26:	f7ff ff6b 	bl	8006b00 <__ssputs_r>
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	f000 80a7 	beq.w	8006d7e <_svfiprintf_r+0x1c6>
 8006c30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c32:	445a      	add	r2, fp
 8006c34:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c36:	f89a 3000 	ldrb.w	r3, [sl]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 809f 	beq.w	8006d7e <_svfiprintf_r+0x1c6>
 8006c40:	2300      	movs	r3, #0
 8006c42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c4a:	f10a 0a01 	add.w	sl, sl, #1
 8006c4e:	9304      	str	r3, [sp, #16]
 8006c50:	9307      	str	r3, [sp, #28]
 8006c52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c56:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c58:	4654      	mov	r4, sl
 8006c5a:	2205      	movs	r2, #5
 8006c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c60:	484e      	ldr	r0, [pc, #312]	@ (8006d9c <_svfiprintf_r+0x1e4>)
 8006c62:	f7f9 fac5 	bl	80001f0 <memchr>
 8006c66:	9a04      	ldr	r2, [sp, #16]
 8006c68:	b9d8      	cbnz	r0, 8006ca2 <_svfiprintf_r+0xea>
 8006c6a:	06d0      	lsls	r0, r2, #27
 8006c6c:	bf44      	itt	mi
 8006c6e:	2320      	movmi	r3, #32
 8006c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c74:	0711      	lsls	r1, r2, #28
 8006c76:	bf44      	itt	mi
 8006c78:	232b      	movmi	r3, #43	@ 0x2b
 8006c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c82:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c84:	d015      	beq.n	8006cb2 <_svfiprintf_r+0xfa>
 8006c86:	9a07      	ldr	r2, [sp, #28]
 8006c88:	4654      	mov	r4, sl
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	f04f 0c0a 	mov.w	ip, #10
 8006c90:	4621      	mov	r1, r4
 8006c92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c96:	3b30      	subs	r3, #48	@ 0x30
 8006c98:	2b09      	cmp	r3, #9
 8006c9a:	d94b      	bls.n	8006d34 <_svfiprintf_r+0x17c>
 8006c9c:	b1b0      	cbz	r0, 8006ccc <_svfiprintf_r+0x114>
 8006c9e:	9207      	str	r2, [sp, #28]
 8006ca0:	e014      	b.n	8006ccc <_svfiprintf_r+0x114>
 8006ca2:	eba0 0308 	sub.w	r3, r0, r8
 8006ca6:	fa09 f303 	lsl.w	r3, r9, r3
 8006caa:	4313      	orrs	r3, r2
 8006cac:	9304      	str	r3, [sp, #16]
 8006cae:	46a2      	mov	sl, r4
 8006cb0:	e7d2      	b.n	8006c58 <_svfiprintf_r+0xa0>
 8006cb2:	9b03      	ldr	r3, [sp, #12]
 8006cb4:	1d19      	adds	r1, r3, #4
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	9103      	str	r1, [sp, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	bfbb      	ittet	lt
 8006cbe:	425b      	neglt	r3, r3
 8006cc0:	f042 0202 	orrlt.w	r2, r2, #2
 8006cc4:	9307      	strge	r3, [sp, #28]
 8006cc6:	9307      	strlt	r3, [sp, #28]
 8006cc8:	bfb8      	it	lt
 8006cca:	9204      	strlt	r2, [sp, #16]
 8006ccc:	7823      	ldrb	r3, [r4, #0]
 8006cce:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cd0:	d10a      	bne.n	8006ce8 <_svfiprintf_r+0x130>
 8006cd2:	7863      	ldrb	r3, [r4, #1]
 8006cd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cd6:	d132      	bne.n	8006d3e <_svfiprintf_r+0x186>
 8006cd8:	9b03      	ldr	r3, [sp, #12]
 8006cda:	1d1a      	adds	r2, r3, #4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	9203      	str	r2, [sp, #12]
 8006ce0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ce4:	3402      	adds	r4, #2
 8006ce6:	9305      	str	r3, [sp, #20]
 8006ce8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006dac <_svfiprintf_r+0x1f4>
 8006cec:	7821      	ldrb	r1, [r4, #0]
 8006cee:	2203      	movs	r2, #3
 8006cf0:	4650      	mov	r0, sl
 8006cf2:	f7f9 fa7d 	bl	80001f0 <memchr>
 8006cf6:	b138      	cbz	r0, 8006d08 <_svfiprintf_r+0x150>
 8006cf8:	9b04      	ldr	r3, [sp, #16]
 8006cfa:	eba0 000a 	sub.w	r0, r0, sl
 8006cfe:	2240      	movs	r2, #64	@ 0x40
 8006d00:	4082      	lsls	r2, r0
 8006d02:	4313      	orrs	r3, r2
 8006d04:	3401      	adds	r4, #1
 8006d06:	9304      	str	r3, [sp, #16]
 8006d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0c:	4824      	ldr	r0, [pc, #144]	@ (8006da0 <_svfiprintf_r+0x1e8>)
 8006d0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d12:	2206      	movs	r2, #6
 8006d14:	f7f9 fa6c 	bl	80001f0 <memchr>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d036      	beq.n	8006d8a <_svfiprintf_r+0x1d2>
 8006d1c:	4b21      	ldr	r3, [pc, #132]	@ (8006da4 <_svfiprintf_r+0x1ec>)
 8006d1e:	bb1b      	cbnz	r3, 8006d68 <_svfiprintf_r+0x1b0>
 8006d20:	9b03      	ldr	r3, [sp, #12]
 8006d22:	3307      	adds	r3, #7
 8006d24:	f023 0307 	bic.w	r3, r3, #7
 8006d28:	3308      	adds	r3, #8
 8006d2a:	9303      	str	r3, [sp, #12]
 8006d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d2e:	4433      	add	r3, r6
 8006d30:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d32:	e76a      	b.n	8006c0a <_svfiprintf_r+0x52>
 8006d34:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d38:	460c      	mov	r4, r1
 8006d3a:	2001      	movs	r0, #1
 8006d3c:	e7a8      	b.n	8006c90 <_svfiprintf_r+0xd8>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	3401      	adds	r4, #1
 8006d42:	9305      	str	r3, [sp, #20]
 8006d44:	4619      	mov	r1, r3
 8006d46:	f04f 0c0a 	mov.w	ip, #10
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d50:	3a30      	subs	r2, #48	@ 0x30
 8006d52:	2a09      	cmp	r2, #9
 8006d54:	d903      	bls.n	8006d5e <_svfiprintf_r+0x1a6>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0c6      	beq.n	8006ce8 <_svfiprintf_r+0x130>
 8006d5a:	9105      	str	r1, [sp, #20]
 8006d5c:	e7c4      	b.n	8006ce8 <_svfiprintf_r+0x130>
 8006d5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d62:	4604      	mov	r4, r0
 8006d64:	2301      	movs	r3, #1
 8006d66:	e7f0      	b.n	8006d4a <_svfiprintf_r+0x192>
 8006d68:	ab03      	add	r3, sp, #12
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	462a      	mov	r2, r5
 8006d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8006da8 <_svfiprintf_r+0x1f0>)
 8006d70:	a904      	add	r1, sp, #16
 8006d72:	4638      	mov	r0, r7
 8006d74:	f3af 8000 	nop.w
 8006d78:	1c42      	adds	r2, r0, #1
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	d1d6      	bne.n	8006d2c <_svfiprintf_r+0x174>
 8006d7e:	89ab      	ldrh	r3, [r5, #12]
 8006d80:	065b      	lsls	r3, r3, #25
 8006d82:	f53f af2d 	bmi.w	8006be0 <_svfiprintf_r+0x28>
 8006d86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d88:	e72c      	b.n	8006be4 <_svfiprintf_r+0x2c>
 8006d8a:	ab03      	add	r3, sp, #12
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	462a      	mov	r2, r5
 8006d90:	4b05      	ldr	r3, [pc, #20]	@ (8006da8 <_svfiprintf_r+0x1f0>)
 8006d92:	a904      	add	r1, sp, #16
 8006d94:	4638      	mov	r0, r7
 8006d96:	f000 f879 	bl	8006e8c <_printf_i>
 8006d9a:	e7ed      	b.n	8006d78 <_svfiprintf_r+0x1c0>
 8006d9c:	08007a26 	.word	0x08007a26
 8006da0:	08007a30 	.word	0x08007a30
 8006da4:	00000000 	.word	0x00000000
 8006da8:	08006b01 	.word	0x08006b01
 8006dac:	08007a2c 	.word	0x08007a2c

08006db0 <_printf_common>:
 8006db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db4:	4616      	mov	r6, r2
 8006db6:	4698      	mov	r8, r3
 8006db8:	688a      	ldr	r2, [r1, #8]
 8006dba:	690b      	ldr	r3, [r1, #16]
 8006dbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	bfb8      	it	lt
 8006dc4:	4613      	movlt	r3, r2
 8006dc6:	6033      	str	r3, [r6, #0]
 8006dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006dcc:	4607      	mov	r7, r0
 8006dce:	460c      	mov	r4, r1
 8006dd0:	b10a      	cbz	r2, 8006dd6 <_printf_common+0x26>
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	6033      	str	r3, [r6, #0]
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	0699      	lsls	r1, r3, #26
 8006dda:	bf42      	ittt	mi
 8006ddc:	6833      	ldrmi	r3, [r6, #0]
 8006dde:	3302      	addmi	r3, #2
 8006de0:	6033      	strmi	r3, [r6, #0]
 8006de2:	6825      	ldr	r5, [r4, #0]
 8006de4:	f015 0506 	ands.w	r5, r5, #6
 8006de8:	d106      	bne.n	8006df8 <_printf_common+0x48>
 8006dea:	f104 0a19 	add.w	sl, r4, #25
 8006dee:	68e3      	ldr	r3, [r4, #12]
 8006df0:	6832      	ldr	r2, [r6, #0]
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	42ab      	cmp	r3, r5
 8006df6:	dc26      	bgt.n	8006e46 <_printf_common+0x96>
 8006df8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006dfc:	6822      	ldr	r2, [r4, #0]
 8006dfe:	3b00      	subs	r3, #0
 8006e00:	bf18      	it	ne
 8006e02:	2301      	movne	r3, #1
 8006e04:	0692      	lsls	r2, r2, #26
 8006e06:	d42b      	bmi.n	8006e60 <_printf_common+0xb0>
 8006e08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e0c:	4641      	mov	r1, r8
 8006e0e:	4638      	mov	r0, r7
 8006e10:	47c8      	blx	r9
 8006e12:	3001      	adds	r0, #1
 8006e14:	d01e      	beq.n	8006e54 <_printf_common+0xa4>
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	6922      	ldr	r2, [r4, #16]
 8006e1a:	f003 0306 	and.w	r3, r3, #6
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	bf02      	ittt	eq
 8006e22:	68e5      	ldreq	r5, [r4, #12]
 8006e24:	6833      	ldreq	r3, [r6, #0]
 8006e26:	1aed      	subeq	r5, r5, r3
 8006e28:	68a3      	ldr	r3, [r4, #8]
 8006e2a:	bf0c      	ite	eq
 8006e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e30:	2500      	movne	r5, #0
 8006e32:	4293      	cmp	r3, r2
 8006e34:	bfc4      	itt	gt
 8006e36:	1a9b      	subgt	r3, r3, r2
 8006e38:	18ed      	addgt	r5, r5, r3
 8006e3a:	2600      	movs	r6, #0
 8006e3c:	341a      	adds	r4, #26
 8006e3e:	42b5      	cmp	r5, r6
 8006e40:	d11a      	bne.n	8006e78 <_printf_common+0xc8>
 8006e42:	2000      	movs	r0, #0
 8006e44:	e008      	b.n	8006e58 <_printf_common+0xa8>
 8006e46:	2301      	movs	r3, #1
 8006e48:	4652      	mov	r2, sl
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	47c8      	blx	r9
 8006e50:	3001      	adds	r0, #1
 8006e52:	d103      	bne.n	8006e5c <_printf_common+0xac>
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e5c:	3501      	adds	r5, #1
 8006e5e:	e7c6      	b.n	8006dee <_printf_common+0x3e>
 8006e60:	18e1      	adds	r1, r4, r3
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	2030      	movs	r0, #48	@ 0x30
 8006e66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e6a:	4422      	add	r2, r4
 8006e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e74:	3302      	adds	r3, #2
 8006e76:	e7c7      	b.n	8006e08 <_printf_common+0x58>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	4641      	mov	r1, r8
 8006e7e:	4638      	mov	r0, r7
 8006e80:	47c8      	blx	r9
 8006e82:	3001      	adds	r0, #1
 8006e84:	d0e6      	beq.n	8006e54 <_printf_common+0xa4>
 8006e86:	3601      	adds	r6, #1
 8006e88:	e7d9      	b.n	8006e3e <_printf_common+0x8e>
	...

08006e8c <_printf_i>:
 8006e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e90:	7e0f      	ldrb	r7, [r1, #24]
 8006e92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e94:	2f78      	cmp	r7, #120	@ 0x78
 8006e96:	4691      	mov	r9, r2
 8006e98:	4680      	mov	r8, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	469a      	mov	sl, r3
 8006e9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ea2:	d807      	bhi.n	8006eb4 <_printf_i+0x28>
 8006ea4:	2f62      	cmp	r7, #98	@ 0x62
 8006ea6:	d80a      	bhi.n	8006ebe <_printf_i+0x32>
 8006ea8:	2f00      	cmp	r7, #0
 8006eaa:	f000 80d2 	beq.w	8007052 <_printf_i+0x1c6>
 8006eae:	2f58      	cmp	r7, #88	@ 0x58
 8006eb0:	f000 80b9 	beq.w	8007026 <_printf_i+0x19a>
 8006eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006eb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ebc:	e03a      	b.n	8006f34 <_printf_i+0xa8>
 8006ebe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ec2:	2b15      	cmp	r3, #21
 8006ec4:	d8f6      	bhi.n	8006eb4 <_printf_i+0x28>
 8006ec6:	a101      	add	r1, pc, #4	@ (adr r1, 8006ecc <_printf_i+0x40>)
 8006ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ecc:	08006f25 	.word	0x08006f25
 8006ed0:	08006f39 	.word	0x08006f39
 8006ed4:	08006eb5 	.word	0x08006eb5
 8006ed8:	08006eb5 	.word	0x08006eb5
 8006edc:	08006eb5 	.word	0x08006eb5
 8006ee0:	08006eb5 	.word	0x08006eb5
 8006ee4:	08006f39 	.word	0x08006f39
 8006ee8:	08006eb5 	.word	0x08006eb5
 8006eec:	08006eb5 	.word	0x08006eb5
 8006ef0:	08006eb5 	.word	0x08006eb5
 8006ef4:	08006eb5 	.word	0x08006eb5
 8006ef8:	08007039 	.word	0x08007039
 8006efc:	08006f63 	.word	0x08006f63
 8006f00:	08006ff3 	.word	0x08006ff3
 8006f04:	08006eb5 	.word	0x08006eb5
 8006f08:	08006eb5 	.word	0x08006eb5
 8006f0c:	0800705b 	.word	0x0800705b
 8006f10:	08006eb5 	.word	0x08006eb5
 8006f14:	08006f63 	.word	0x08006f63
 8006f18:	08006eb5 	.word	0x08006eb5
 8006f1c:	08006eb5 	.word	0x08006eb5
 8006f20:	08006ffb 	.word	0x08006ffb
 8006f24:	6833      	ldr	r3, [r6, #0]
 8006f26:	1d1a      	adds	r2, r3, #4
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6032      	str	r2, [r6, #0]
 8006f2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f34:	2301      	movs	r3, #1
 8006f36:	e09d      	b.n	8007074 <_printf_i+0x1e8>
 8006f38:	6833      	ldr	r3, [r6, #0]
 8006f3a:	6820      	ldr	r0, [r4, #0]
 8006f3c:	1d19      	adds	r1, r3, #4
 8006f3e:	6031      	str	r1, [r6, #0]
 8006f40:	0606      	lsls	r6, r0, #24
 8006f42:	d501      	bpl.n	8006f48 <_printf_i+0xbc>
 8006f44:	681d      	ldr	r5, [r3, #0]
 8006f46:	e003      	b.n	8006f50 <_printf_i+0xc4>
 8006f48:	0645      	lsls	r5, r0, #25
 8006f4a:	d5fb      	bpl.n	8006f44 <_printf_i+0xb8>
 8006f4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f50:	2d00      	cmp	r5, #0
 8006f52:	da03      	bge.n	8006f5c <_printf_i+0xd0>
 8006f54:	232d      	movs	r3, #45	@ 0x2d
 8006f56:	426d      	negs	r5, r5
 8006f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f5c:	4859      	ldr	r0, [pc, #356]	@ (80070c4 <_printf_i+0x238>)
 8006f5e:	230a      	movs	r3, #10
 8006f60:	e011      	b.n	8006f86 <_printf_i+0xfa>
 8006f62:	6821      	ldr	r1, [r4, #0]
 8006f64:	6833      	ldr	r3, [r6, #0]
 8006f66:	0608      	lsls	r0, r1, #24
 8006f68:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f6c:	d402      	bmi.n	8006f74 <_printf_i+0xe8>
 8006f6e:	0649      	lsls	r1, r1, #25
 8006f70:	bf48      	it	mi
 8006f72:	b2ad      	uxthmi	r5, r5
 8006f74:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f76:	4853      	ldr	r0, [pc, #332]	@ (80070c4 <_printf_i+0x238>)
 8006f78:	6033      	str	r3, [r6, #0]
 8006f7a:	bf14      	ite	ne
 8006f7c:	230a      	movne	r3, #10
 8006f7e:	2308      	moveq	r3, #8
 8006f80:	2100      	movs	r1, #0
 8006f82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f86:	6866      	ldr	r6, [r4, #4]
 8006f88:	60a6      	str	r6, [r4, #8]
 8006f8a:	2e00      	cmp	r6, #0
 8006f8c:	bfa2      	ittt	ge
 8006f8e:	6821      	ldrge	r1, [r4, #0]
 8006f90:	f021 0104 	bicge.w	r1, r1, #4
 8006f94:	6021      	strge	r1, [r4, #0]
 8006f96:	b90d      	cbnz	r5, 8006f9c <_printf_i+0x110>
 8006f98:	2e00      	cmp	r6, #0
 8006f9a:	d04b      	beq.n	8007034 <_printf_i+0x1a8>
 8006f9c:	4616      	mov	r6, r2
 8006f9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fa2:	fb03 5711 	mls	r7, r3, r1, r5
 8006fa6:	5dc7      	ldrb	r7, [r0, r7]
 8006fa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fac:	462f      	mov	r7, r5
 8006fae:	42bb      	cmp	r3, r7
 8006fb0:	460d      	mov	r5, r1
 8006fb2:	d9f4      	bls.n	8006f9e <_printf_i+0x112>
 8006fb4:	2b08      	cmp	r3, #8
 8006fb6:	d10b      	bne.n	8006fd0 <_printf_i+0x144>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	07df      	lsls	r7, r3, #31
 8006fbc:	d508      	bpl.n	8006fd0 <_printf_i+0x144>
 8006fbe:	6923      	ldr	r3, [r4, #16]
 8006fc0:	6861      	ldr	r1, [r4, #4]
 8006fc2:	4299      	cmp	r1, r3
 8006fc4:	bfde      	ittt	le
 8006fc6:	2330      	movle	r3, #48	@ 0x30
 8006fc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fcc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006fd0:	1b92      	subs	r2, r2, r6
 8006fd2:	6122      	str	r2, [r4, #16]
 8006fd4:	f8cd a000 	str.w	sl, [sp]
 8006fd8:	464b      	mov	r3, r9
 8006fda:	aa03      	add	r2, sp, #12
 8006fdc:	4621      	mov	r1, r4
 8006fde:	4640      	mov	r0, r8
 8006fe0:	f7ff fee6 	bl	8006db0 <_printf_common>
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d14a      	bne.n	800707e <_printf_i+0x1f2>
 8006fe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006fec:	b004      	add	sp, #16
 8006fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	f043 0320 	orr.w	r3, r3, #32
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	4833      	ldr	r0, [pc, #204]	@ (80070c8 <_printf_i+0x23c>)
 8006ffc:	2778      	movs	r7, #120	@ 0x78
 8006ffe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	6831      	ldr	r1, [r6, #0]
 8007006:	061f      	lsls	r7, r3, #24
 8007008:	f851 5b04 	ldr.w	r5, [r1], #4
 800700c:	d402      	bmi.n	8007014 <_printf_i+0x188>
 800700e:	065f      	lsls	r7, r3, #25
 8007010:	bf48      	it	mi
 8007012:	b2ad      	uxthmi	r5, r5
 8007014:	6031      	str	r1, [r6, #0]
 8007016:	07d9      	lsls	r1, r3, #31
 8007018:	bf44      	itt	mi
 800701a:	f043 0320 	orrmi.w	r3, r3, #32
 800701e:	6023      	strmi	r3, [r4, #0]
 8007020:	b11d      	cbz	r5, 800702a <_printf_i+0x19e>
 8007022:	2310      	movs	r3, #16
 8007024:	e7ac      	b.n	8006f80 <_printf_i+0xf4>
 8007026:	4827      	ldr	r0, [pc, #156]	@ (80070c4 <_printf_i+0x238>)
 8007028:	e7e9      	b.n	8006ffe <_printf_i+0x172>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	f023 0320 	bic.w	r3, r3, #32
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	e7f6      	b.n	8007022 <_printf_i+0x196>
 8007034:	4616      	mov	r6, r2
 8007036:	e7bd      	b.n	8006fb4 <_printf_i+0x128>
 8007038:	6833      	ldr	r3, [r6, #0]
 800703a:	6825      	ldr	r5, [r4, #0]
 800703c:	6961      	ldr	r1, [r4, #20]
 800703e:	1d18      	adds	r0, r3, #4
 8007040:	6030      	str	r0, [r6, #0]
 8007042:	062e      	lsls	r6, r5, #24
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	d501      	bpl.n	800704c <_printf_i+0x1c0>
 8007048:	6019      	str	r1, [r3, #0]
 800704a:	e002      	b.n	8007052 <_printf_i+0x1c6>
 800704c:	0668      	lsls	r0, r5, #25
 800704e:	d5fb      	bpl.n	8007048 <_printf_i+0x1bc>
 8007050:	8019      	strh	r1, [r3, #0]
 8007052:	2300      	movs	r3, #0
 8007054:	6123      	str	r3, [r4, #16]
 8007056:	4616      	mov	r6, r2
 8007058:	e7bc      	b.n	8006fd4 <_printf_i+0x148>
 800705a:	6833      	ldr	r3, [r6, #0]
 800705c:	1d1a      	adds	r2, r3, #4
 800705e:	6032      	str	r2, [r6, #0]
 8007060:	681e      	ldr	r6, [r3, #0]
 8007062:	6862      	ldr	r2, [r4, #4]
 8007064:	2100      	movs	r1, #0
 8007066:	4630      	mov	r0, r6
 8007068:	f7f9 f8c2 	bl	80001f0 <memchr>
 800706c:	b108      	cbz	r0, 8007072 <_printf_i+0x1e6>
 800706e:	1b80      	subs	r0, r0, r6
 8007070:	6060      	str	r0, [r4, #4]
 8007072:	6863      	ldr	r3, [r4, #4]
 8007074:	6123      	str	r3, [r4, #16]
 8007076:	2300      	movs	r3, #0
 8007078:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800707c:	e7aa      	b.n	8006fd4 <_printf_i+0x148>
 800707e:	6923      	ldr	r3, [r4, #16]
 8007080:	4632      	mov	r2, r6
 8007082:	4649      	mov	r1, r9
 8007084:	4640      	mov	r0, r8
 8007086:	47d0      	blx	sl
 8007088:	3001      	adds	r0, #1
 800708a:	d0ad      	beq.n	8006fe8 <_printf_i+0x15c>
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	079b      	lsls	r3, r3, #30
 8007090:	d413      	bmi.n	80070ba <_printf_i+0x22e>
 8007092:	68e0      	ldr	r0, [r4, #12]
 8007094:	9b03      	ldr	r3, [sp, #12]
 8007096:	4298      	cmp	r0, r3
 8007098:	bfb8      	it	lt
 800709a:	4618      	movlt	r0, r3
 800709c:	e7a6      	b.n	8006fec <_printf_i+0x160>
 800709e:	2301      	movs	r3, #1
 80070a0:	4632      	mov	r2, r6
 80070a2:	4649      	mov	r1, r9
 80070a4:	4640      	mov	r0, r8
 80070a6:	47d0      	blx	sl
 80070a8:	3001      	adds	r0, #1
 80070aa:	d09d      	beq.n	8006fe8 <_printf_i+0x15c>
 80070ac:	3501      	adds	r5, #1
 80070ae:	68e3      	ldr	r3, [r4, #12]
 80070b0:	9903      	ldr	r1, [sp, #12]
 80070b2:	1a5b      	subs	r3, r3, r1
 80070b4:	42ab      	cmp	r3, r5
 80070b6:	dcf2      	bgt.n	800709e <_printf_i+0x212>
 80070b8:	e7eb      	b.n	8007092 <_printf_i+0x206>
 80070ba:	2500      	movs	r5, #0
 80070bc:	f104 0619 	add.w	r6, r4, #25
 80070c0:	e7f5      	b.n	80070ae <_printf_i+0x222>
 80070c2:	bf00      	nop
 80070c4:	08007a37 	.word	0x08007a37
 80070c8:	08007a48 	.word	0x08007a48

080070cc <memmove>:
 80070cc:	4288      	cmp	r0, r1
 80070ce:	b510      	push	{r4, lr}
 80070d0:	eb01 0402 	add.w	r4, r1, r2
 80070d4:	d902      	bls.n	80070dc <memmove+0x10>
 80070d6:	4284      	cmp	r4, r0
 80070d8:	4623      	mov	r3, r4
 80070da:	d807      	bhi.n	80070ec <memmove+0x20>
 80070dc:	1e43      	subs	r3, r0, #1
 80070de:	42a1      	cmp	r1, r4
 80070e0:	d008      	beq.n	80070f4 <memmove+0x28>
 80070e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070ea:	e7f8      	b.n	80070de <memmove+0x12>
 80070ec:	4402      	add	r2, r0
 80070ee:	4601      	mov	r1, r0
 80070f0:	428a      	cmp	r2, r1
 80070f2:	d100      	bne.n	80070f6 <memmove+0x2a>
 80070f4:	bd10      	pop	{r4, pc}
 80070f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070fe:	e7f7      	b.n	80070f0 <memmove+0x24>

08007100 <_sbrk_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	4d06      	ldr	r5, [pc, #24]	@ (800711c <_sbrk_r+0x1c>)
 8007104:	2300      	movs	r3, #0
 8007106:	4604      	mov	r4, r0
 8007108:	4608      	mov	r0, r1
 800710a:	602b      	str	r3, [r5, #0]
 800710c:	f7fa f83c 	bl	8001188 <_sbrk>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d102      	bne.n	800711a <_sbrk_r+0x1a>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	b103      	cbz	r3, 800711a <_sbrk_r+0x1a>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	20001ac4 	.word	0x20001ac4

08007120 <_realloc_r>:
 8007120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007124:	4680      	mov	r8, r0
 8007126:	4615      	mov	r5, r2
 8007128:	460c      	mov	r4, r1
 800712a:	b921      	cbnz	r1, 8007136 <_realloc_r+0x16>
 800712c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007130:	4611      	mov	r1, r2
 8007132:	f7ff bc59 	b.w	80069e8 <_malloc_r>
 8007136:	b92a      	cbnz	r2, 8007144 <_realloc_r+0x24>
 8007138:	f7ff fbea 	bl	8006910 <_free_r>
 800713c:	2400      	movs	r4, #0
 800713e:	4620      	mov	r0, r4
 8007140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007144:	f000 f81a 	bl	800717c <_malloc_usable_size_r>
 8007148:	4285      	cmp	r5, r0
 800714a:	4606      	mov	r6, r0
 800714c:	d802      	bhi.n	8007154 <_realloc_r+0x34>
 800714e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007152:	d8f4      	bhi.n	800713e <_realloc_r+0x1e>
 8007154:	4629      	mov	r1, r5
 8007156:	4640      	mov	r0, r8
 8007158:	f7ff fc46 	bl	80069e8 <_malloc_r>
 800715c:	4607      	mov	r7, r0
 800715e:	2800      	cmp	r0, #0
 8007160:	d0ec      	beq.n	800713c <_realloc_r+0x1c>
 8007162:	42b5      	cmp	r5, r6
 8007164:	462a      	mov	r2, r5
 8007166:	4621      	mov	r1, r4
 8007168:	bf28      	it	cs
 800716a:	4632      	movcs	r2, r6
 800716c:	f7ff fbc2 	bl	80068f4 <memcpy>
 8007170:	4621      	mov	r1, r4
 8007172:	4640      	mov	r0, r8
 8007174:	f7ff fbcc 	bl	8006910 <_free_r>
 8007178:	463c      	mov	r4, r7
 800717a:	e7e0      	b.n	800713e <_realloc_r+0x1e>

0800717c <_malloc_usable_size_r>:
 800717c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007180:	1f18      	subs	r0, r3, #4
 8007182:	2b00      	cmp	r3, #0
 8007184:	bfbc      	itt	lt
 8007186:	580b      	ldrlt	r3, [r1, r0]
 8007188:	18c0      	addlt	r0, r0, r3
 800718a:	4770      	bx	lr

0800718c <_init>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	bf00      	nop
 8007190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007192:	bc08      	pop	{r3}
 8007194:	469e      	mov	lr, r3
 8007196:	4770      	bx	lr

08007198 <_fini>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	bf00      	nop
 800719c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719e:	bc08      	pop	{r3}
 80071a0:	469e      	mov	lr, r3
 80071a2:	4770      	bx	lr
