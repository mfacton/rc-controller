
BoatController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041dc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004370  08004370  00005370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043d0  080043d0  000060f8  2**0
                  CONTENTS
  4 .ARM          00000008  080043d0  080043d0  000053d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043d8  080043d8  000060f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043d8  080043d8  000053d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043dc  080043dc  000053dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  080043e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000145c  200000f8  080044d8  000060f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001554  080044d8  00006554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f73  00000000  00000000  00006128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000398a  00000000  00000000  0001b09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0001ea28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000131e  00000000  00000000  0001f698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018149  00000000  00000000  000209b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d0b  00000000  00000000  00038aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088cde  00000000  00000000  0005180a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da4e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002160  00000000  00000000  000da52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000097c2  00000000  00000000  000dc68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000e5e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000f8 	.word	0x200000f8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004358 	.word	0x08004358

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000fc 	.word	0x200000fc
 80001d0:	08004358 	.word	0x08004358

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f8:	f000 b96a 	b.w	80004d0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	460c      	mov	r4, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14e      	bne.n	80002be <__udivmoddi4+0xaa>
 8000220:	4694      	mov	ip, r2
 8000222:	458c      	cmp	ip, r1
 8000224:	4686      	mov	lr, r0
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	d962      	bls.n	80002f2 <__udivmoddi4+0xde>
 800022c:	b14a      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 800022e:	f1c2 0320 	rsb	r3, r2, #32
 8000232:	4091      	lsls	r1, r2
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	fa0c fc02 	lsl.w	ip, ip, r2
 800023c:	4319      	orrs	r1, r3
 800023e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000242:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000246:	fa1f f68c 	uxth.w	r6, ip
 800024a:	fbb1 f4f7 	udiv	r4, r1, r7
 800024e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000252:	fb07 1114 	mls	r1, r7, r4, r1
 8000256:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025a:	fb04 f106 	mul.w	r1, r4, r6
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800026a:	f080 8112 	bcs.w	8000492 <__udivmoddi4+0x27e>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 810f 	bls.w	8000492 <__udivmoddi4+0x27e>
 8000274:	3c02      	subs	r4, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a59      	subs	r1, r3, r1
 800027a:	fa1f f38e 	uxth.w	r3, lr
 800027e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000282:	fb07 1110 	mls	r1, r7, r0, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb00 f606 	mul.w	r6, r0, r6
 800028e:	429e      	cmp	r6, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x94>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800029a:	f080 80fc 	bcs.w	8000496 <__udivmoddi4+0x282>
 800029e:	429e      	cmp	r6, r3
 80002a0:	f240 80f9 	bls.w	8000496 <__udivmoddi4+0x282>
 80002a4:	4463      	add	r3, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	1b9b      	subs	r3, r3, r6
 80002aa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa6>
 80002b2:	40d3      	lsrs	r3, r2
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xba>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb4>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa6>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x150>
 80002d6:	42a3      	cmp	r3, r4
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xcc>
 80002da:	4290      	cmp	r0, r2
 80002dc:	f0c0 80f0 	bcc.w	80004c0 <__udivmoddi4+0x2ac>
 80002e0:	1a86      	subs	r6, r0, r2
 80002e2:	eb64 0303 	sbc.w	r3, r4, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	d0e6      	beq.n	80002ba <__udivmoddi4+0xa6>
 80002ec:	e9c5 6300 	strd	r6, r3, [r5]
 80002f0:	e7e3      	b.n	80002ba <__udivmoddi4+0xa6>
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x204>
 80002f8:	eba1 040c 	sub.w	r4, r1, ip
 80002fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000300:	fa1f f78c 	uxth.w	r7, ip
 8000304:	2101      	movs	r1, #1
 8000306:	fbb4 f6f8 	udiv	r6, r4, r8
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb08 4416 	mls	r4, r8, r6, r4
 8000312:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000316:	fb07 f006 	mul.w	r0, r7, r6
 800031a:	4298      	cmp	r0, r3
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x11c>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x11a>
 8000328:	4298      	cmp	r0, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 800032e:	4626      	mov	r6, r4
 8000330:	1a1c      	subs	r4, r3, r0
 8000332:	fa1f f38e 	uxth.w	r3, lr
 8000336:	fbb4 f0f8 	udiv	r0, r4, r8
 800033a:	fb08 4410 	mls	r4, r8, r0, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb00 f707 	mul.w	r7, r0, r7
 8000346:	429f      	cmp	r7, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x148>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x146>
 8000354:	429f      	cmp	r7, r3
 8000356:	f200 80b0 	bhi.w	80004ba <__udivmoddi4+0x2a6>
 800035a:	4620      	mov	r0, r4
 800035c:	1bdb      	subs	r3, r3, r7
 800035e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x9c>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa20 fc06 	lsr.w	ip, r0, r6
 8000374:	fa04 f301 	lsl.w	r3, r4, r1
 8000378:	ea43 030c 	orr.w	r3, r3, ip
 800037c:	40f4      	lsrs	r4, r6
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	0c38      	lsrs	r0, r7, #16
 8000384:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000388:	fbb4 fef0 	udiv	lr, r4, r0
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	fb00 441e 	mls	r4, r0, lr, r4
 8000394:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000398:	fb0e f90c 	mul.w	r9, lr, ip
 800039c:	45a1      	cmp	r9, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d90a      	bls.n	80003ba <__udivmoddi4+0x1a6>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003aa:	f080 8084 	bcs.w	80004b6 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8081 	bls.w	80004b6 <__udivmoddi4+0x2a2>
 80003b4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b8:	443c      	add	r4, r7
 80003ba:	eba4 0409 	sub.w	r4, r4, r9
 80003be:	fa1f f983 	uxth.w	r9, r3
 80003c2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ce:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1d2>
 80003d6:	193c      	adds	r4, r7, r4
 80003d8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003dc:	d267      	bcs.n	80004ae <__udivmoddi4+0x29a>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d965      	bls.n	80004ae <__udivmoddi4+0x29a>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ea:	fba0 9302 	umull	r9, r3, r0, r2
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	429c      	cmp	r4, r3
 80003f4:	46ce      	mov	lr, r9
 80003f6:	469c      	mov	ip, r3
 80003f8:	d351      	bcc.n	800049e <__udivmoddi4+0x28a>
 80003fa:	d04e      	beq.n	800049a <__udivmoddi4+0x286>
 80003fc:	b155      	cbz	r5, 8000414 <__udivmoddi4+0x200>
 80003fe:	ebb8 030e 	subs.w	r3, r8, lr
 8000402:	eb64 040c 	sbc.w	r4, r4, ip
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	40cb      	lsrs	r3, r1
 800040c:	431e      	orrs	r6, r3
 800040e:	40cc      	lsrs	r4, r1
 8000410:	e9c5 6400 	strd	r6, r4, [r5]
 8000414:	2100      	movs	r1, #0
 8000416:	e750      	b.n	80002ba <__udivmoddi4+0xa6>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f103 	lsr.w	r1, r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa24 f303 	lsr.w	r3, r4, r3
 8000428:	4094      	lsls	r4, r2
 800042a:	430c      	orrs	r4, r1
 800042c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000430:	fa00 fe02 	lsl.w	lr, r0, r2
 8000434:	fa1f f78c 	uxth.w	r7, ip
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3110 	mls	r1, r8, r0, r3
 8000440:	0c23      	lsrs	r3, r4, #16
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb00 f107 	mul.w	r1, r0, r7
 800044a:	4299      	cmp	r1, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x24c>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000456:	d22c      	bcs.n	80004b2 <__udivmoddi4+0x29e>
 8000458:	4299      	cmp	r1, r3
 800045a:	d92a      	bls.n	80004b2 <__udivmoddi4+0x29e>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1a5b      	subs	r3, r3, r1
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb3 f1f8 	udiv	r1, r3, r8
 8000468:	fb08 3311 	mls	r3, r8, r1, r3
 800046c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000470:	fb01 f307 	mul.w	r3, r1, r7
 8000474:	42a3      	cmp	r3, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x276>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000480:	d213      	bcs.n	80004aa <__udivmoddi4+0x296>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d911      	bls.n	80004aa <__udivmoddi4+0x296>
 8000486:	3902      	subs	r1, #2
 8000488:	4464      	add	r4, ip
 800048a:	1ae4      	subs	r4, r4, r3
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	e739      	b.n	8000306 <__udivmoddi4+0xf2>
 8000492:	4604      	mov	r4, r0
 8000494:	e6f0      	b.n	8000278 <__udivmoddi4+0x64>
 8000496:	4608      	mov	r0, r1
 8000498:	e706      	b.n	80002a8 <__udivmoddi4+0x94>
 800049a:	45c8      	cmp	r8, r9
 800049c:	d2ae      	bcs.n	80003fc <__udivmoddi4+0x1e8>
 800049e:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a6:	3801      	subs	r0, #1
 80004a8:	e7a8      	b.n	80003fc <__udivmoddi4+0x1e8>
 80004aa:	4631      	mov	r1, r6
 80004ac:	e7ed      	b.n	800048a <__udivmoddi4+0x276>
 80004ae:	4603      	mov	r3, r0
 80004b0:	e799      	b.n	80003e6 <__udivmoddi4+0x1d2>
 80004b2:	4630      	mov	r0, r6
 80004b4:	e7d4      	b.n	8000460 <__udivmoddi4+0x24c>
 80004b6:	46d6      	mov	lr, sl
 80004b8:	e77f      	b.n	80003ba <__udivmoddi4+0x1a6>
 80004ba:	4463      	add	r3, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e74d      	b.n	800035c <__udivmoddi4+0x148>
 80004c0:	4606      	mov	r6, r0
 80004c2:	4623      	mov	r3, r4
 80004c4:	4608      	mov	r0, r1
 80004c6:	e70f      	b.n	80002e8 <__udivmoddi4+0xd4>
 80004c8:	3e02      	subs	r6, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	e730      	b.n	8000330 <__udivmoddi4+0x11c>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <Control_Init>:
#include "control.h"

void Control_Init(void) {

}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Control_Loop>:

void Control_Loop(void) {
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	2300      	movs	r3, #0
{
 80004e0:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 80004e6:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ea:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80004ee:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f2:	4921      	ldr	r1, [pc, #132]	@ (8000578 <SystemClock_Config+0x9c>)
 80004f4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f6:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f8:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80004fa:	4a20      	ldr	r2, [pc, #128]	@ (800057c <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fc:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000500:	6408      	str	r0, [r1, #64]	@ 0x40
 8000502:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000504:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8000508:	9101      	str	r1, [sp, #4]
 800050a:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800050c:	9302      	str	r3, [sp, #8]
 800050e:	6813      	ldr	r3, [r2, #0]
 8000510:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000518:	6013      	str	r3, [r2, #0]
 800051a:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800051c:	2001      	movs	r0, #1
 800051e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000522:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000526:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800052a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800052c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000530:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000532:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000536:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000538:	2107      	movs	r1, #7
 800053a:	2004      	movs	r0, #4
 800053c:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000540:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000542:	23a8      	movs	r3, #168	@ 0xa8
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000544:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000546:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000548:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	f001 fd1b 	bl	8001f84 <HAL_RCC_OscConfig>
 800054e:	b108      	cbz	r0, 8000554 <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000550:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000552:	e7fe      	b.n	8000552 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000554:	210f      	movs	r1, #15
 8000556:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000558:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800055c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000560:	a803      	add	r0, sp, #12
 8000562:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000564:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000568:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800056a:	f001 ff13 	bl	8002394 <HAL_RCC_ClockConfig>
 800056e:	b108      	cbz	r0, 8000574 <SystemClock_Config+0x98>
 8000570:	b672      	cpsid	i
  while (1)
 8000572:	e7fe      	b.n	8000572 <SystemClock_Config+0x96>
}
 8000574:	b014      	add	sp, #80	@ 0x50
 8000576:	bd10      	pop	{r4, pc}
 8000578:	40023800 	.word	0x40023800
 800057c:	40007000 	.word	0x40007000

08000580 <main>:
{
 8000580:	b500      	push	{lr}
 8000582:	b085      	sub	sp, #20
  HAL_Init();
 8000584:	f000 f90a 	bl	800079c <HAL_Init>
  SystemClock_Config();
 8000588:	f7ff ffa8 	bl	80004dc <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058c:	4a1c      	ldr	r2, [pc, #112]	@ (8000600 <main+0x80>)
  hi2c1.Instance = I2C1;
 800058e:	481d      	ldr	r0, [pc, #116]	@ (8000604 <main+0x84>)
 8000590:	4c1d      	ldr	r4, [pc, #116]	@ (8000608 <main+0x88>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8000598:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800059c:	6311      	str	r1, [r2, #48]	@ 0x30
 800059e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80005a0:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80005a4:	9101      	str	r1, [sp, #4]
 80005a6:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a8:	9302      	str	r3, [sp, #8]
 80005aa:	6b11      	ldr	r1, [r2, #48]	@ 0x30
  hi2c1.Init.ClockSpeed = 100000;
 80005ac:	6083      	str	r3, [r0, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	f041 0101 	orr.w	r1, r1, #1
 80005b2:	6311      	str	r1, [r2, #48]	@ 0x30
 80005b4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
  hi2c1.Init.ClockSpeed = 100000;
 80005b6:	60c3      	str	r3, [r0, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	f001 0101 	and.w	r1, r1, #1
 80005bc:	9102      	str	r1, [sp, #8]
 80005be:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c0:	9303      	str	r3, [sp, #12]
 80005c2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
  hi2c1.Init.ClockSpeed = 100000;
 80005c4:	6143      	str	r3, [r0, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	f041 0102 	orr.w	r1, r1, #2
 80005ca:	6311      	str	r1, [r2, #48]	@ 0x30
 80005cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
  hi2c1.Init.ClockSpeed = 100000;
 80005ce:	490f      	ldr	r1, [pc, #60]	@ (800060c <main+0x8c>)
 80005d0:	6183      	str	r3, [r0, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	f002 0202 	and.w	r2, r2, #2
 80005d6:	9203      	str	r2, [sp, #12]
  hi2c1.Init.ClockSpeed = 100000;
 80005d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005dc:	e9c0 4100 	strd	r4, r1, [r0]
 80005e0:	e9c0 3307 	strd	r3, r3, [r0, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e4:	9d03      	ldr	r5, [sp, #12]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	6102      	str	r2, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e8:	f000 fa82 	bl	8000af0 <HAL_I2C_Init>
 80005ec:	b108      	cbz	r0, 80005f2 <main+0x72>
 80005ee:	b672      	cpsid	i
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x70>
  MX_USB_DEVICE_Init();
 80005f2:	f003 fc7f 	bl	8003ef4 <MX_USB_DEVICE_Init>
  Control_Init();
 80005f6:	f7ff ff6d 	bl	80004d4 <Control_Init>
	  Control_Loop();
 80005fa:	f7ff ff6d 	bl	80004d8 <Control_Loop>
  while (1)
 80005fe:	e7fc      	b.n	80005fa <main+0x7a>
 8000600:	40023800 	.word	0x40023800
 8000604:	20000118 	.word	0x20000118
 8000608:	40005400 	.word	0x40005400
 800060c:	000186a0 	.word	0x000186a0

08000610 <Error_Handler>:
 8000610:	b672      	cpsid	i
  while (1)
 8000612:	e7fe      	b.n	8000612 <Error_Handler+0x2>

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <HAL_MspInit+0x34>)
 8000618:	2100      	movs	r1, #0
 800061a:	9100      	str	r1, [sp, #0]
 800061c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800061e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000622:	645a      	str	r2, [r3, #68]	@ 0x44
 8000624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000626:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	9101      	str	r1, [sp, #4]
 8000630:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000632:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000636:	641a      	str	r2, [r3, #64]	@ 0x40
 8000638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000642:	b002      	add	sp, #8
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800

0800064c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800064c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <HAL_I2C_MspInit+0x64>)
 8000650:	6802      	ldr	r2, [r0, #0]
{
 8000652:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8000656:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800065c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000660:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 8000662:	d001      	beq.n	8000668 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000664:	b009      	add	sp, #36	@ 0x24
 8000666:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000668:	4d12      	ldr	r5, [pc, #72]	@ (80006b4 <HAL_I2C_MspInit+0x68>)
 800066a:	9400      	str	r4, [sp, #0]
 800066c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	4812      	ldr	r0, [pc, #72]	@ (80006b8 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	632b      	str	r3, [r5, #48]	@ 0x30
 8000676:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000678:	f003 0302 	and.w	r3, r3, #2
 800067c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800067e:	22c0      	movs	r2, #192	@ 0xc0
 8000680:	2312      	movs	r3, #18
 8000682:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000686:	2303      	movs	r3, #3
 8000688:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2304      	movs	r3, #4
 800068e:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000690:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f000 f937 	bl	8000904 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000696:	9401      	str	r4, [sp, #4]
 8000698:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800069e:	642b      	str	r3, [r5, #64]	@ 0x40
 80006a0:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80006a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b01      	ldr	r3, [sp, #4]
}
 80006aa:	b009      	add	sp, #36	@ 0x24
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop
 80006b0:	40005400 	.word	0x40005400
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020400 	.word	0x40020400

080006bc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006bc:	e7fe      	b.n	80006bc <NMI_Handler>
 80006be:	bf00      	nop

080006c0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <HardFault_Handler>
 80006c2:	bf00      	nop

080006c4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <MemManage_Handler>
 80006c6:	bf00      	nop

080006c8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <BusFault_Handler>
 80006ca:	bf00      	nop

080006cc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <UsageFault_Handler>
 80006ce:	bf00      	nop

080006d0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop

080006d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006dc:	f000 b878 	b.w	80007d0 <HAL_IncTick>

080006e0 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006e0:	4801      	ldr	r0, [pc, #4]	@ (80006e8 <OTG_FS_IRQHandler+0x8>)
 80006e2:	f000 bcf7 	b.w	80010d4 <HAL_PCD_IRQHandler>
 80006e6:	bf00      	nop
 80006e8:	20001070 	.word	0x20001070

080006ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006ec:	4a03      	ldr	r2, [pc, #12]	@ (80006fc <SystemInit+0x10>)
 80006ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80006f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006f6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000700:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000738 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000704:	f7ff fff2 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800070a:	490d      	ldr	r1, [pc, #52]	@ (8000740 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800070c:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	@ (8000748 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000720:	4c0a      	ldr	r4, [pc, #40]	@ (800074c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800072e:	f003 fdef 	bl	8004310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000732:	f7ff ff25 	bl	8000580 <main>
  bx  lr    
 8000736:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000738:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8000744:	080043e0 	.word	0x080043e0
  ldr r2, =_sbss
 8000748:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 800074c:	20001554 	.word	0x20001554

08000750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC_IRQHandler>
	...

08000754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000754:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000756:	4a0e      	ldr	r2, [pc, #56]	@ (8000790 <HAL_InitTick+0x3c>)
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <HAL_InitTick+0x40>)
 800075a:	7812      	ldrb	r2, [r2, #0]
 800075c:	681b      	ldr	r3, [r3, #0]
{
 800075e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000760:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000764:	fbb0 f0f2 	udiv	r0, r0, r2
 8000768:	fbb3 f0f0 	udiv	r0, r3, r0
 800076c:	f000 f8b0 	bl	80008d0 <HAL_SYSTICK_Config>
 8000770:	b908      	cbnz	r0, 8000776 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	2d0f      	cmp	r5, #15
 8000774:	d901      	bls.n	800077a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000776:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000778:	bd38      	pop	{r3, r4, r5, pc}
 800077a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	4602      	mov	r2, r0
 800077e:	4629      	mov	r1, r5
 8000780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000784:	f000 f85a 	bl	800083c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4b03      	ldr	r3, [pc, #12]	@ (8000798 <HAL_InitTick+0x44>)
 800078a:	4620      	mov	r0, r4
 800078c:	601d      	str	r5, [r3, #0]
}
 800078e:	bd38      	pop	{r3, r4, r5, pc}
 8000790:	20000004 	.word	0x20000004
 8000794:	20000000 	.word	0x20000000
 8000798:	20000008 	.word	0x20000008

0800079c <HAL_Init>:
{
 800079c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <HAL_Init+0x30>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80007a6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80007ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80007b6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 f82d 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80007be:	200f      	movs	r0, #15
 80007c0:	f7ff ffc8 	bl	8000754 <HAL_InitTick>
  HAL_MspInit();
 80007c4:	f7ff ff26 	bl	8000614 <HAL_MspInit>
}
 80007c8:	2000      	movs	r0, #0
 80007ca:	bd08      	pop	{r3, pc}
 80007cc:	40023c00 	.word	0x40023c00

080007d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007d0:	4a03      	ldr	r2, [pc, #12]	@ (80007e0 <HAL_IncTick+0x10>)
 80007d2:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <HAL_IncTick+0x14>)
 80007d4:	6811      	ldr	r1, [r2, #0]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	440b      	add	r3, r1
 80007da:	6013      	str	r3, [r2, #0]
}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	2000016c 	.word	0x2000016c
 80007e4:	20000004 	.word	0x20000004

080007e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007e8:	4b01      	ldr	r3, [pc, #4]	@ (80007f0 <HAL_GetTick+0x8>)
 80007ea:	6818      	ldr	r0, [r3, #0]
}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	2000016c 	.word	0x2000016c

080007f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f4:	b538      	push	{r3, r4, r5, lr}
 80007f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80007f8:	f7ff fff6 	bl	80007e8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007fc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80007fe:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000800:	d002      	beq.n	8000808 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000802:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <HAL_Delay+0x20>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000808:	f7ff ffee 	bl	80007e8 <HAL_GetTick>
 800080c:	1b40      	subs	r0, r0, r5
 800080e:	42a0      	cmp	r0, r4
 8000810:	d3fa      	bcc.n	8000808 <HAL_Delay+0x14>
  {
  }
}
 8000812:	bd38      	pop	{r3, r4, r5, pc}
 8000814:	20000004 	.word	0x20000004

08000818 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000818:	4907      	ldr	r1, [pc, #28]	@ (8000838 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800081a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800081c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081e:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000822:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000826:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000828:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800082a:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800082e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000832:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800083c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <HAL_NVIC_SetPriority+0x70>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000844:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000846:	f1c3 0e07 	rsb	lr, r3, #7
 800084a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000852:	bf28      	it	cs
 8000854:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000858:	f1bc 0f06 	cmp.w	ip, #6
 800085c:	d91c      	bls.n	8000898 <HAL_NVIC_SetPriority+0x5c>
 800085e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000866:	fa03 f30c 	lsl.w	r3, r3, ip
 800086a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000872:	fa03 f30e 	lsl.w	r3, r3, lr
 8000876:	ea21 0303 	bic.w	r3, r1, r3
 800087a:	fa03 f30c 	lsl.w	r3, r3, ip
 800087e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8000882:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000886:	db0a      	blt.n	800089e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800088c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000890:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000894:	f85d fb04 	ldr.w	pc, [sp], #4
 8000898:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089a:	4694      	mov	ip, r2
 800089c:	e7e7      	b.n	800086e <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <HAL_NVIC_SetPriority+0x74>)
 80008a0:	f000 000f 	and.w	r0, r0, #15
 80008a4:	4402      	add	r2, r0
 80008a6:	7613      	strb	r3, [r2, #24]
 80008a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ac:	e000ed00 	.word	0xe000ed00
 80008b0:	e000ecfc 	.word	0xe000ecfc

080008b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008b4:	2800      	cmp	r0, #0
 80008b6:	db07      	blt.n	80008c8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b8:	4a04      	ldr	r2, [pc, #16]	@ (80008cc <HAL_NVIC_EnableIRQ+0x18>)
 80008ba:	0941      	lsrs	r1, r0, #5
 80008bc:	2301      	movs	r3, #1
 80008be:	f000 001f 	and.w	r0, r0, #31
 80008c2:	4083      	lsls	r3, r0
 80008c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e100 	.word	0xe000e100

080008d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d0:	3801      	subs	r0, #1
 80008d2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80008d6:	d301      	bcc.n	80008dc <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008da:	4770      	bx	lr
{
 80008dc:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e2:	4c07      	ldr	r4, [pc, #28]	@ (8000900 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80008ea:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ee:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f4:	619a      	str	r2, [r3, #24]
}
 80008f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fa:	6119      	str	r1, [r3, #16]
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000908:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800090a:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090c:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 8000ae4 <HAL_GPIO_Init+0x1e0>
{
 8000910:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8000912:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000916:	4689      	mov	r9, r1
 8000918:	e003      	b.n	8000922 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800091a:	3301      	adds	r3, #1
 800091c:	2b10      	cmp	r3, #16
 800091e:	f000 8082 	beq.w	8000a26 <HAL_GPIO_Init+0x122>
    ioposition = 0x01U << position;
 8000922:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000926:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 800092a:	43a2      	bics	r2, r4
 800092c:	d1f5      	bne.n	800091a <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800092e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8000932:	f001 0203 	and.w	r2, r1, #3
 8000936:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800093a:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800093c:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800093e:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000942:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000944:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000948:	d970      	bls.n	8000a2c <HAL_GPIO_Init+0x128>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800094a:	2a03      	cmp	r2, #3
 800094c:	f040 80a7 	bne.w	8000a9e <HAL_GPIO_Init+0x19a>
      temp = GPIOx->MODER;
 8000950:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000952:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000956:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000958:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800095a:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800095e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000960:	d0db      	beq.n	800091a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2200      	movs	r2, #0
 8000964:	9203      	str	r2, [sp, #12]
 8000966:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800096a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800096e:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8000972:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8000976:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800097a:	9203      	str	r2, [sp, #12]
 800097c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800097e:	f023 0203 	bic.w	r2, r3, #3
 8000982:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000986:	f003 0703 	and.w	r7, r3, #3
 800098a:	260f      	movs	r6, #15
 800098c:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8000990:	00bf      	lsls	r7, r7, #2
 8000992:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000996:	4e50      	ldr	r6, [pc, #320]	@ (8000ad8 <HAL_GPIO_Init+0x1d4>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000998:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800099a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800099c:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a0:	d018      	beq.n	80009d4 <HAL_GPIO_Init+0xd0>
 80009a2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80009a6:	42b0      	cmp	r0, r6
 80009a8:	f000 8084 	beq.w	8000ab4 <HAL_GPIO_Init+0x1b0>
 80009ac:	4e4b      	ldr	r6, [pc, #300]	@ (8000adc <HAL_GPIO_Init+0x1d8>)
 80009ae:	42b0      	cmp	r0, r6
 80009b0:	f000 8086 	beq.w	8000ac0 <HAL_GPIO_Init+0x1bc>
 80009b4:	f8df c130 	ldr.w	ip, [pc, #304]	@ 8000ae8 <HAL_GPIO_Init+0x1e4>
 80009b8:	4560      	cmp	r0, ip
 80009ba:	f000 8087 	beq.w	8000acc <HAL_GPIO_Init+0x1c8>
 80009be:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8000aec <HAL_GPIO_Init+0x1e8>
 80009c2:	4560      	cmp	r0, ip
 80009c4:	bf0c      	ite	eq
 80009c6:	f04f 0c04 	moveq.w	ip, #4
 80009ca:	f04f 0c07 	movne.w	ip, #7
 80009ce:	fa0c f707 	lsl.w	r7, ip, r7
 80009d2:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009d4:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009d6:	4a42      	ldr	r2, [pc, #264]	@ (8000ae0 <HAL_GPIO_Init+0x1dc>)
 80009d8:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80009da:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80009dc:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80009e0:	4e3f      	ldr	r6, [pc, #252]	@ (8000ae0 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 80009e2:	bf54      	ite	pl
 80009e4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80009e6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 80009ea:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 80009ec:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80009ee:	4e3c      	ldr	r6, [pc, #240]	@ (8000ae0 <HAL_GPIO_Init+0x1dc>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80009f0:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 80009f2:	bf54      	ite	pl
 80009f4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80009f6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 80009fa:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 80009fc:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80009fe:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000a00:	4e37      	ldr	r6, [pc, #220]	@ (8000ae0 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8000a02:	bf54      	ite	pl
 8000a04:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000a06:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8000a0a:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a0c:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a0e:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a10:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000a14:	4932      	ldr	r1, [pc, #200]	@ (8000ae0 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8000a16:	bf54      	ite	pl
 8000a18:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000a1a:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a1e:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8000a20:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a22:	f47f af7e 	bne.w	8000922 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8000a26:	b005      	add	sp, #20
 8000a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8000a2c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a2e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a32:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8000a36:	fa07 f70c 	lsl.w	r7, r7, ip
 8000a3a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000a3e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a40:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a42:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a46:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8000a4a:	409f      	lsls	r7, r3
 8000a4c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000a50:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000a52:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a54:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a58:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8000a5c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000a60:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a64:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8000a66:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a68:	f47f af72 	bne.w	8000950 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8000a6c:	08df      	lsrs	r7, r3, #3
 8000a6e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8000a72:	9701      	str	r7, [sp, #4]
 8000a74:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a76:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8000a7a:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a7c:	f003 0e07 	and.w	lr, r3, #7
 8000a80:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000a84:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a86:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a8a:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000a8e:	9e00      	ldr	r6, [sp, #0]
 8000a90:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000a94:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a96:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000a9a:	6237      	str	r7, [r6, #32]
 8000a9c:	e758      	b.n	8000950 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8000a9e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000aa0:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aa4:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8000aa8:	fa07 f70c 	lsl.w	r7, r7, ip
 8000aac:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8000ab0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ab2:	e74d      	b.n	8000950 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ab4:	f04f 0c01 	mov.w	ip, #1
 8000ab8:	fa0c f707 	lsl.w	r7, ip, r7
 8000abc:	433d      	orrs	r5, r7
 8000abe:	e789      	b.n	80009d4 <HAL_GPIO_Init+0xd0>
 8000ac0:	f04f 0c02 	mov.w	ip, #2
 8000ac4:	fa0c f707 	lsl.w	r7, ip, r7
 8000ac8:	433d      	orrs	r5, r7
 8000aca:	e783      	b.n	80009d4 <HAL_GPIO_Init+0xd0>
 8000acc:	f04f 0c03 	mov.w	ip, #3
 8000ad0:	fa0c f707 	lsl.w	r7, ip, r7
 8000ad4:	433d      	orrs	r5, r7
 8000ad6:	e77d      	b.n	80009d4 <HAL_GPIO_Init+0xd0>
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	40013c00 	.word	0x40013c00
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020c00 	.word	0x40020c00
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000af0:	2800      	cmp	r0, #0
 8000af2:	f000 80b8 	beq.w	8000c66 <HAL_I2C_Init+0x176>
{
 8000af6:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000af8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8000afc:	4604      	mov	r4, r0
 8000afe:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f000 8098 	beq.w	8000c38 <HAL_I2C_Init+0x148>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b08:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b0a:	2224      	movs	r2, #36	@ 0x24
 8000b0c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	f022 0201 	bic.w	r2, r2, #1
 8000b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000b1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000b26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b28:	f001 fcd8 	bl	80024dc <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b2c:	6865      	ldr	r5, [r4, #4]
 8000b2e:	4b4f      	ldr	r3, [pc, #316]	@ (8000c6c <HAL_I2C_Init+0x17c>)
 8000b30:	429d      	cmp	r5, r3
 8000b32:	d84f      	bhi.n	8000bd4 <HAL_I2C_Init+0xe4>
 8000b34:	4b4e      	ldr	r3, [pc, #312]	@ (8000c70 <HAL_I2C_Init+0x180>)
 8000b36:	4298      	cmp	r0, r3
 8000b38:	d97c      	bls.n	8000c34 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000b3a:	4b4e      	ldr	r3, [pc, #312]	@ (8000c74 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b3c:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8000b3e:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b42:	1e43      	subs	r3, r0, #1
 8000b44:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b48:	6822      	ldr	r2, [r4, #0]
 8000b4a:	6851      	ldr	r1, [r2, #4]
 8000b4c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8000b50:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8000b54:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b56:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8000b58:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b5c:	f10c 0c01 	add.w	ip, ip, #1
 8000b60:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8000b64:	ea41 010c 	orr.w	r1, r1, ip
 8000b68:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b6a:	69d1      	ldr	r1, [r2, #28]
 8000b6c:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8000b70:	3301      	adds	r3, #1
 8000b72:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8000b76:	4203      	tst	r3, r0
 8000b78:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8000b7c:	d161      	bne.n	8000c42 <HAL_I2C_Init+0x152>
 8000b7e:	2304      	movs	r3, #4
 8000b80:	430b      	orrs	r3, r1
 8000b82:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000b84:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8000b88:	6811      	ldr	r1, [r2, #0]
 8000b8a:	4303      	orrs	r3, r0
 8000b8c:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8000b90:	430b      	orrs	r3, r1
 8000b92:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000b94:	6891      	ldr	r1, [r2, #8]
 8000b96:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8000b9a:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8000b9e:	4303      	orrs	r3, r0
 8000ba0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8000ba4:	430b      	orrs	r3, r1
 8000ba6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ba8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8000bac:	68d1      	ldr	r1, [r2, #12]
 8000bae:	4303      	orrs	r3, r0
 8000bb0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8000bb4:	430b      	orrs	r3, r1
 8000bb6:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000bb8:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bba:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8000bbc:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8000bc0:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8000bc2:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bc4:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000bc6:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000bca:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bcc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e

  return HAL_OK;
 8000bd0:	4618      	mov	r0, r3
}
 8000bd2:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000bd4:	4b28      	ldr	r3, [pc, #160]	@ (8000c78 <HAL_I2C_Init+0x188>)
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d92c      	bls.n	8000c34 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bda:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000bdc:	4b25      	ldr	r3, [pc, #148]	@ (8000c74 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bde:	4e27      	ldr	r6, [pc, #156]	@ (8000c7c <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000be0:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000be4:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000be6:	6850      	ldr	r0, [r2, #4]
 8000be8:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8000bec:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 8000bf0:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000bf2:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bf6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000bfa:	fb00 f101 	mul.w	r1, r0, r1
 8000bfe:	fba6 6101 	umull	r6, r1, r6, r1
 8000c02:	6a10      	ldr	r0, [r2, #32]
 8000c04:	0989      	lsrs	r1, r1, #6
 8000c06:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8000c0a:	3101      	adds	r1, #1
 8000c0c:	4301      	orrs	r1, r0
 8000c0e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c10:	69d1      	ldr	r1, [r2, #28]
 8000c12:	68a0      	ldr	r0, [r4, #8]
 8000c14:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8000c18:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8000c1c:	b9a0      	cbnz	r0, 8000c48 <HAL_I2C_Init+0x158>
 8000c1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c22:	fbb3 f3f5 	udiv	r3, r3, r5
 8000c26:	3301      	adds	r3, #1
 8000c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c2c:	b1cb      	cbz	r3, 8000c62 <HAL_I2C_Init+0x172>
 8000c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c32:	e7a5      	b.n	8000b80 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8000c34:	2001      	movs	r0, #1
}
 8000c36:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000c38:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8000c3c:	f7ff fd06 	bl	800064c <HAL_I2C_MspInit>
 8000c40:	e762      	b.n	8000b08 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c46:	e79b      	b.n	8000b80 <HAL_I2C_Init+0x90>
 8000c48:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000c4c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000c50:	fbb3 f3f5 	udiv	r3, r3, r5
 8000c54:	3301      	adds	r3, #1
 8000c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c5a:	b113      	cbz	r3, 8000c62 <HAL_I2C_Init+0x172>
 8000c5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c60:	e78e      	b.n	8000b80 <HAL_I2C_Init+0x90>
 8000c62:	2301      	movs	r3, #1
 8000c64:	e78c      	b.n	8000b80 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8000c66:	2001      	movs	r0, #1
}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	000186a0 	.word	0x000186a0
 8000c70:	001e847f 	.word	0x001e847f
 8000c74:	431bde83 	.word	0x431bde83
 8000c78:	003d08ff 	.word	0x003d08ff
 8000c7c:	10624dd3 	.word	0x10624dd3

08000c80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c80:	b530      	push	{r4, r5, lr}
 8000c82:	b083      	sub	sp, #12
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c84:	b308      	cbz	r0, 8000cca <HAL_PCD_Init+0x4a>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c86:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
  USBx = hpcd->Instance;
 8000c8a:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 81ef 	beq.w	8001076 <HAL_PCD_Init+0x3f6>
 8000c98:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c9a:	2303      	movs	r3, #3

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000c9c:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ca0:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  {
    hpcd->Init.dma_enable = 0U;
 8000ca4:	bf04      	itt	eq
 8000ca6:	2300      	moveq	r3, #0
 8000ca8:	71a3      	strbeq	r3, [r4, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000caa:	f001 fd2d 	bl	8002708 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cae:	7c23      	ldrb	r3, [r4, #16]
 8000cb0:	f88d 3000 	strb.w	r3, [sp]
 8000cb4:	1d25      	adds	r5, r4, #4
 8000cb6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000cba:	6820      	ldr	r0, [r4, #0]
 8000cbc:	f001 fc1e 	bl	80024fc <USB_CoreInit>
 8000cc0:	4601      	mov	r1, r0
 8000cc2:	b130      	cbz	r0, 8000cd2 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000cca:	2501      	movs	r5, #1
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000ccc:	4628      	mov	r0, r5
 8000cce:	b003      	add	sp, #12
 8000cd0:	bd30      	pop	{r4, r5, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000cd2:	6820      	ldr	r0, [r4, #0]
 8000cd4:	f001 fd20 	bl	8002718 <USB_SetCurrentMode>
 8000cd8:	2800      	cmp	r0, #0
 8000cda:	d1f3      	bne.n	8000cc4 <HAL_PCD_Init+0x44>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cdc:	7922      	ldrb	r2, [r4, #4]
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f000 81b3 	beq.w	800104a <HAL_PCD_Init+0x3ca>
    hpcd->IN_ep[i].num = i;
 8000ce4:	f44f 7380 	mov.w	r3, #256	@ 0x100
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ce8:	2a01      	cmp	r2, #1
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cea:	e9c4 0007 	strd	r0, r0, [r4, #28]
    hpcd->IN_ep[i].num = i;
 8000cee:	82a3      	strh	r3, [r4, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cf0:	85e0      	strh	r0, [r4, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cf2:	7620      	strb	r0, [r4, #24]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cf4:	6260      	str	r0, [r4, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cf6:	f000 81c4 	beq.w	8001082 <HAL_PCD_Init+0x402>
    hpcd->IN_ep[i].num = i;
 8000cfa:	f240 1301 	movw	r3, #257	@ 0x101
 8000cfe:	8723      	strh	r3, [r4, #56]	@ 0x38
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d00:	2a02      	cmp	r2, #2
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d02:	f04f 0301 	mov.w	r3, #1
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d06:	e9c4 0010 	strd	r0, r0, [r4, #64]	@ 0x40
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d0a:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d0e:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d12:	64a0      	str	r0, [r4, #72]	@ 0x48
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d14:	f000 80e2 	beq.w	8000edc <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8000d18:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000d1c:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d20:	2a03      	cmp	r2, #3
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d22:	f04f 0302 	mov.w	r3, #2
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d26:	e9c4 0019 	strd	r0, r0, [r4, #100]	@ 0x64
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d2a:	f8a4 3076 	strh.w	r3, [r4, #118]	@ 0x76
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d2e:	f884 0060 	strb.w	r0, [r4, #96]	@ 0x60
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d32:	66e0      	str	r0, [r4, #108]	@ 0x6c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d34:	f000 80d2 	beq.w	8000edc <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8000d38:	f240 1303 	movw	r3, #259	@ 0x103
 8000d3c:	f8a4 3080 	strh.w	r3, [r4, #128]	@ 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d40:	2a04      	cmp	r2, #4
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d42:	f04f 0303 	mov.w	r3, #3
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d46:	e9c4 0022 	strd	r0, r0, [r4, #136]	@ 0x88
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d4a:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d4e:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d52:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d56:	f000 80c1 	beq.w	8000edc <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8000d5a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000d5e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d62:	2a05      	cmp	r2, #5
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d64:	f04f 0304 	mov.w	r3, #4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d68:	e9c4 002b 	strd	r0, r0, [r4, #172]	@ 0xac
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d6c:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d70:	f884 00a8 	strb.w	r0, [r4, #168]	@ 0xa8
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d74:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d78:	f000 80b0 	beq.w	8000edc <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8000d7c:	f240 1305 	movw	r3, #261	@ 0x105
 8000d80:	f8a4 30c8 	strh.w	r3, [r4, #200]	@ 0xc8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d84:	2a06      	cmp	r2, #6
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d86:	f04f 0305 	mov.w	r3, #5
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d8a:	e9c4 0034 	strd	r0, r0, [r4, #208]	@ 0xd0
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d8e:	f8a4 30e2 	strh.w	r3, [r4, #226]	@ 0xe2
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d92:	f884 00cc 	strb.w	r0, [r4, #204]	@ 0xcc
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d96:	f8c4 00d8 	str.w	r0, [r4, #216]	@ 0xd8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d9a:	f000 809f 	beq.w	8000edc <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8000d9e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000da2:	f8a4 30ec 	strh.w	r3, [r4, #236]	@ 0xec
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000da6:	2a07      	cmp	r2, #7
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000da8:	f04f 0306 	mov.w	r3, #6
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000dac:	e9c4 003d 	strd	r0, r0, [r4, #244]	@ 0xf4
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000db0:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000db4:	f884 00f0 	strb.w	r0, [r4, #240]	@ 0xf0
    hpcd->IN_ep[i].xfer_len = 0U;
 8000db8:	f8c4 00fc 	str.w	r0, [r4, #252]	@ 0xfc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dbc:	f000 808e 	beq.w	8000edc <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8000dc0:	f240 1107 	movw	r1, #263	@ 0x107
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000dc4:	2300      	movs	r3, #0
    hpcd->IN_ep[i].num = i;
 8000dc6:	f8a4 1110 	strh.w	r1, [r4, #272]	@ 0x110
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dca:	2a08      	cmp	r2, #8
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000dcc:	f04f 0107 	mov.w	r1, #7
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000dd0:	e9c4 3346 	strd	r3, r3, [r4, #280]	@ 0x118
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000dd4:	f8a4 112a 	strh.w	r1, [r4, #298]	@ 0x12a
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000dd8:	f884 3114 	strb.w	r3, [r4, #276]	@ 0x114
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ddc:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000de0:	d07c      	beq.n	8000edc <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8000de2:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8000de6:	f8a4 1134 	strh.w	r1, [r4, #308]	@ 0x134
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dea:	2a09      	cmp	r2, #9
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000dec:	f04f 0108 	mov.w	r1, #8
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000df0:	e9c4 334f 	strd	r3, r3, [r4, #316]	@ 0x13c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000df4:	f8a4 114e 	strh.w	r1, [r4, #334]	@ 0x14e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000df8:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
    hpcd->IN_ep[i].xfer_len = 0U;
 8000dfc:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e00:	d06c      	beq.n	8000edc <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8000e02:	f240 1109 	movw	r1, #265	@ 0x109
 8000e06:	f8a4 1158 	strh.w	r1, [r4, #344]	@ 0x158
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e0a:	2a0a      	cmp	r2, #10
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e0c:	f04f 0109 	mov.w	r1, #9
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e10:	e9c4 3358 	strd	r3, r3, [r4, #352]	@ 0x160
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e14:	f8a4 1172 	strh.w	r1, [r4, #370]	@ 0x172
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e18:	f884 315c 	strb.w	r3, [r4, #348]	@ 0x15c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e1c:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e20:	d05c      	beq.n	8000edc <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8000e22:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8000e26:	f8a4 117c 	strh.w	r1, [r4, #380]	@ 0x17c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e2a:	2a0b      	cmp	r2, #11
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e2c:	f04f 010a 	mov.w	r1, #10
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e30:	e9c4 3361 	strd	r3, r3, [r4, #388]	@ 0x184
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e34:	f8a4 1196 	strh.w	r1, [r4, #406]	@ 0x196
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e38:	f884 3180 	strb.w	r3, [r4, #384]	@ 0x180
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e3c:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e40:	d04c      	beq.n	8000edc <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8000e42:	f240 110b 	movw	r1, #267	@ 0x10b
 8000e46:	f8a4 11a0 	strh.w	r1, [r4, #416]	@ 0x1a0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e4a:	2a0c      	cmp	r2, #12
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e4c:	f04f 010b 	mov.w	r1, #11
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e50:	e9c4 336a 	strd	r3, r3, [r4, #424]	@ 0x1a8
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e54:	f8a4 11ba 	strh.w	r1, [r4, #442]	@ 0x1ba
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e58:	f884 31a4 	strb.w	r3, [r4, #420]	@ 0x1a4
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e5c:	f8c4 31b0 	str.w	r3, [r4, #432]	@ 0x1b0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e60:	d03c      	beq.n	8000edc <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8000e62:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8000e66:	f8a4 11c4 	strh.w	r1, [r4, #452]	@ 0x1c4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e6a:	2a0d      	cmp	r2, #13
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e6c:	f04f 010c 	mov.w	r1, #12
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e70:	e9c4 3373 	strd	r3, r3, [r4, #460]	@ 0x1cc
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e74:	f8a4 11de 	strh.w	r1, [r4, #478]	@ 0x1de
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e78:	f884 31c8 	strb.w	r3, [r4, #456]	@ 0x1c8
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e7c:	f8c4 31d4 	str.w	r3, [r4, #468]	@ 0x1d4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e80:	d02c      	beq.n	8000edc <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8000e82:	f240 110d 	movw	r1, #269	@ 0x10d
 8000e86:	f8a4 11e8 	strh.w	r1, [r4, #488]	@ 0x1e8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e8a:	2a0e      	cmp	r2, #14
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e8c:	f04f 010d 	mov.w	r1, #13
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e90:	e9c4 337c 	strd	r3, r3, [r4, #496]	@ 0x1f0
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e94:	f8a4 1202 	strh.w	r1, [r4, #514]	@ 0x202
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e98:	f884 31ec 	strb.w	r3, [r4, #492]	@ 0x1ec
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e9c:	f8c4 31f8 	str.w	r3, [r4, #504]	@ 0x1f8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ea0:	d01c      	beq.n	8000edc <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8000ea2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000ea6:	f8a4 120c 	strh.w	r1, [r4, #524]	@ 0x20c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eaa:	2a0f      	cmp	r2, #15
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000eac:	f04f 010e 	mov.w	r1, #14
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eb0:	e9c4 3385 	strd	r3, r3, [r4, #532]	@ 0x214
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000eb4:	f8a4 1226 	strh.w	r1, [r4, #550]	@ 0x226
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000eb8:	f884 3210 	strb.w	r3, [r4, #528]	@ 0x210
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ebc:	f8c4 321c 	str.w	r3, [r4, #540]	@ 0x21c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec0:	d00c      	beq.n	8000edc <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8000ec2:	f240 110f 	movw	r1, #271	@ 0x10f
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ec6:	e9c4 338e 	strd	r3, r3, [r4, #568]	@ 0x238
    hpcd->IN_ep[i].num = i;
 8000eca:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ed4:	f884 3234 	strb.w	r3, [r4, #564]	@ 0x234
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ed8:	f8c4 3240 	str.w	r3, [r4, #576]	@ 0x240
    hpcd->OUT_ep[i].num = i;
 8000edc:	2300      	movs	r3, #0
 8000ede:	2101      	movs	r1, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ee0:	2a02      	cmp	r2, #2
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ee2:	e9c4 3397 	strd	r3, r3, [r4, #604]	@ 0x25c
 8000ee6:	e9c4 33a0 	strd	r3, r3, [r4, #640]	@ 0x280
    hpcd->OUT_ep[i].num = i;
 8000eea:	f8a4 3254 	strh.w	r3, [r4, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000eee:	f884 3258 	strb.w	r3, [r4, #600]	@ 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ef2:	f8c4 3264 	str.w	r3, [r4, #612]	@ 0x264
    hpcd->OUT_ep[i].num = i;
 8000ef6:	f8a4 1278 	strh.w	r1, [r4, #632]	@ 0x278
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000efa:	f884 327c 	strb.w	r3, [r4, #636]	@ 0x27c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000efe:	f8c4 3288 	str.w	r3, [r4, #648]	@ 0x288
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f02:	f000 80a2 	beq.w	800104a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8000f06:	2102      	movs	r1, #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f08:	2a03      	cmp	r2, #3
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f0a:	e9c4 33a9 	strd	r3, r3, [r4, #676]	@ 0x2a4
    hpcd->OUT_ep[i].num = i;
 8000f0e:	f8a4 129c 	strh.w	r1, [r4, #668]	@ 0x29c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f12:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f16:	f8c4 32ac 	str.w	r3, [r4, #684]	@ 0x2ac
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f1a:	f000 8096 	beq.w	800104a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8000f1e:	2103      	movs	r1, #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f20:	2a04      	cmp	r2, #4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f22:	e9c4 33b2 	strd	r3, r3, [r4, #712]	@ 0x2c8
    hpcd->OUT_ep[i].num = i;
 8000f26:	f8a4 12c0 	strh.w	r1, [r4, #704]	@ 0x2c0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f2a:	f884 32c4 	strb.w	r3, [r4, #708]	@ 0x2c4
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f2e:	f8c4 32d0 	str.w	r3, [r4, #720]	@ 0x2d0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f32:	f000 808a 	beq.w	800104a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8000f36:	2104      	movs	r1, #4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f38:	2a05      	cmp	r2, #5
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f3a:	e9c4 33bb 	strd	r3, r3, [r4, #748]	@ 0x2ec
    hpcd->OUT_ep[i].num = i;
 8000f3e:	f8a4 12e4 	strh.w	r1, [r4, #740]	@ 0x2e4
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f42:	f884 32e8 	strb.w	r3, [r4, #744]	@ 0x2e8
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f46:	f8c4 32f4 	str.w	r3, [r4, #756]	@ 0x2f4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f4a:	d07e      	beq.n	800104a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8000f4c:	2105      	movs	r1, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f4e:	2a06      	cmp	r2, #6
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f50:	e9c4 33c4 	strd	r3, r3, [r4, #784]	@ 0x310
    hpcd->OUT_ep[i].num = i;
 8000f54:	f8a4 1308 	strh.w	r1, [r4, #776]	@ 0x308
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f58:	f884 330c 	strb.w	r3, [r4, #780]	@ 0x30c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f5c:	f8c4 3318 	str.w	r3, [r4, #792]	@ 0x318
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f60:	d073      	beq.n	800104a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8000f62:	2106      	movs	r1, #6
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f64:	2a07      	cmp	r2, #7
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f66:	e9c4 33cd 	strd	r3, r3, [r4, #820]	@ 0x334
    hpcd->OUT_ep[i].num = i;
 8000f6a:	f8a4 132c 	strh.w	r1, [r4, #812]	@ 0x32c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f6e:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f72:	f8c4 333c 	str.w	r3, [r4, #828]	@ 0x33c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f76:	d068      	beq.n	800104a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8000f78:	2107      	movs	r1, #7
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f7a:	2a08      	cmp	r2, #8
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f7c:	e9c4 33d6 	strd	r3, r3, [r4, #856]	@ 0x358
    hpcd->OUT_ep[i].num = i;
 8000f80:	f8a4 1350 	strh.w	r1, [r4, #848]	@ 0x350
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f84:	f884 3354 	strb.w	r3, [r4, #852]	@ 0x354
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f88:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f8c:	d05d      	beq.n	800104a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8000f8e:	2108      	movs	r1, #8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f90:	2a09      	cmp	r2, #9
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f92:	e9c4 33df 	strd	r3, r3, [r4, #892]	@ 0x37c
    hpcd->OUT_ep[i].num = i;
 8000f96:	f8a4 1374 	strh.w	r1, [r4, #884]	@ 0x374
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f9a:	f884 3378 	strb.w	r3, [r4, #888]	@ 0x378
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f9e:	f8c4 3384 	str.w	r3, [r4, #900]	@ 0x384
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa2:	d052      	beq.n	800104a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8000fa4:	2109      	movs	r1, #9
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa6:	2a0a      	cmp	r2, #10
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fa8:	e9c4 33e8 	strd	r3, r3, [r4, #928]	@ 0x3a0
    hpcd->OUT_ep[i].num = i;
 8000fac:	f8a4 1398 	strh.w	r1, [r4, #920]	@ 0x398
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fb0:	f884 339c 	strb.w	r3, [r4, #924]	@ 0x39c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fb4:	f8c4 33a8 	str.w	r3, [r4, #936]	@ 0x3a8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fb8:	d047      	beq.n	800104a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8000fba:	210a      	movs	r1, #10
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fbc:	2a0b      	cmp	r2, #11
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fbe:	e9c4 33f1 	strd	r3, r3, [r4, #964]	@ 0x3c4
    hpcd->OUT_ep[i].num = i;
 8000fc2:	f8a4 13bc 	strh.w	r1, [r4, #956]	@ 0x3bc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fc6:	f884 33c0 	strb.w	r3, [r4, #960]	@ 0x3c0
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fca:	f8c4 33cc 	str.w	r3, [r4, #972]	@ 0x3cc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fce:	d03c      	beq.n	800104a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8000fd0:	210b      	movs	r1, #11
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd2:	2a0c      	cmp	r2, #12
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fd4:	e9c4 33fa 	strd	r3, r3, [r4, #1000]	@ 0x3e8
    hpcd->OUT_ep[i].num = i;
 8000fd8:	f8a4 13e0 	strh.w	r1, [r4, #992]	@ 0x3e0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fdc:	f884 33e4 	strb.w	r3, [r4, #996]	@ 0x3e4
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fe0:	f8c4 33f0 	str.w	r3, [r4, #1008]	@ 0x3f0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe4:	d031      	beq.n	800104a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8000fe6:	210c      	movs	r1, #12
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe8:	2a0d      	cmp	r2, #13
    hpcd->OUT_ep[i].num = i;
 8000fea:	f8a4 1404 	strh.w	r1, [r4, #1028]	@ 0x404
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fee:	f884 3408 	strb.w	r3, [r4, #1032]	@ 0x408
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ff2:	f8c4 340c 	str.w	r3, [r4, #1036]	@ 0x40c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ff6:	f8c4 3410 	str.w	r3, [r4, #1040]	@ 0x410
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ffa:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ffe:	d024      	beq.n	800104a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8001000:	210d      	movs	r1, #13
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001002:	2a0e      	cmp	r2, #14
    hpcd->OUT_ep[i].num = i;
 8001004:	f8a4 1428 	strh.w	r1, [r4, #1064]	@ 0x428
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001008:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
    hpcd->OUT_ep[i].maxpacket = 0U;
 800100c:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001010:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001014:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001018:	d017      	beq.n	800104a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 800101a:	210e      	movs	r1, #14
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800101c:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[i].num = i;
 800101e:	f8a4 144c 	strh.w	r1, [r4, #1100]	@ 0x44c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001022:	f884 3450 	strb.w	r3, [r4, #1104]	@ 0x450
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001026:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800102a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    hpcd->OUT_ep[i].xfer_len = 0U;
 800102e:	f8c4 345c 	str.w	r3, [r4, #1116]	@ 0x45c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001032:	d00a      	beq.n	800104a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8001034:	220f      	movs	r2, #15
 8001036:	f8a4 2470 	strh.w	r2, [r4, #1136]	@ 0x470
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800103a:	f884 3474 	strb.w	r3, [r4, #1140]	@ 0x474
    hpcd->OUT_ep[i].maxpacket = 0U;
 800103e:	f8c4 3478 	str.w	r3, [r4, #1144]	@ 0x478
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001042:	f8c4 347c 	str.w	r3, [r4, #1148]	@ 0x47c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001046:	f8c4 3480 	str.w	r3, [r4, #1152]	@ 0x480
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800104a:	7c20      	ldrb	r0, [r4, #16]
 800104c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001050:	f88d 0000 	strb.w	r0, [sp]
 8001054:	6820      	ldr	r0, [r4, #0]
 8001056:	f001 fb97 	bl	8002788 <USB_DevInit>
 800105a:	4605      	mov	r5, r0
 800105c:	2800      	cmp	r0, #0
 800105e:	f47f ae31 	bne.w	8000cc4 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 8001062:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001064:	7460      	strb	r0, [r4, #17]
  (void)USB_DevDisconnect(hpcd->Instance);
 8001066:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8001068:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 800106c:	f001 ffba 	bl	8002fe4 <USB_DevDisconnect>
}
 8001070:	4628      	mov	r0, r5
 8001072:	b003      	add	sp, #12
 8001074:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001076:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 800107a:	f002 ffe7 	bl	800404c <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800107e:	6820      	ldr	r0, [r4, #0]
 8001080:	e60b      	b.n	8000c9a <HAL_PCD_Init+0x1a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001082:	e9c4 0097 	strd	r0, r0, [r4, #604]	@ 0x25c
    hpcd->OUT_ep[i].num = i;
 8001086:	f8a4 0254 	strh.w	r0, [r4, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800108a:	f884 0258 	strb.w	r0, [r4, #600]	@ 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 800108e:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001092:	e7da      	b.n	800104a <HAL_PCD_Init+0x3ca>

08001094 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001094:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8001096:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 800109a:	2b01      	cmp	r3, #1
{
 800109c:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800109e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80010a0:	d016      	beq.n	80010d0 <HAL_PCD_Start+0x3c>
 80010a2:	2301      	movs	r3, #1
 80010a4:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80010a8:	68c3      	ldr	r3, [r0, #12]
 80010aa:	065b      	lsls	r3, r3, #25
 80010ac:	d502      	bpl.n	80010b4 <HAL_PCD_Start+0x20>
 80010ae:	7b63      	ldrb	r3, [r4, #13]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d008      	beq.n	80010c6 <HAL_PCD_Start+0x32>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 80010b4:	f001 fb20 	bl	80026f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010b8:	6820      	ldr	r0, [r4, #0]
 80010ba:	f001 ff83 	bl	8002fc4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010be:	2000      	movs	r0, #0
 80010c0:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 80010c4:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010c6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010cc:	6383      	str	r3, [r0, #56]	@ 0x38
 80010ce:	e7f1      	b.n	80010b4 <HAL_PCD_Start+0x20>
  __HAL_LOCK(hpcd);
 80010d0:	2002      	movs	r0, #2
}
 80010d2:	bd10      	pop	{r4, pc}

080010d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010d8:	6806      	ldr	r6, [r0, #0]
{
 80010da:	b089      	sub	sp, #36	@ 0x24
 80010dc:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010de:	4630      	mov	r0, r6
 80010e0:	f001 ffbe 	bl	8003060 <USB_GetMode>
 80010e4:	b110      	cbz	r0, 80010ec <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 80010e6:	b009      	add	sp, #36	@ 0x24
 80010e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010ec:	4605      	mov	r5, r0
 80010ee:	6820      	ldr	r0, [r4, #0]
 80010f0:	f001 ff88 	bl	8003004 <USB_ReadInterrupts>
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d0f6      	beq.n	80010e6 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80010f8:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010fc:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80010fe:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8001102:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001106:	f001 ff7d 	bl	8003004 <USB_ReadInterrupts>
 800110a:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800110e:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001110:	f506 6300 	add.w	r3, r6, #2048	@ 0x800
 8001114:	9303      	str	r3, [sp, #12]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001116:	bf1e      	ittt	ne
 8001118:	6943      	ldrne	r3, [r0, #20]
 800111a:	f003 0302 	andne.w	r3, r3, #2
 800111e:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001120:	f001 ff70 	bl	8003004 <USB_ReadInterrupts>
 8001124:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001128:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800112a:	d012      	beq.n	8001152 <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800112c:	6983      	ldr	r3, [r0, #24]
 800112e:	f023 0310 	bic.w	r3, r3, #16
 8001132:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 8001134:	6a37      	ldr	r7, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001136:	f3c7 4343 	ubfx	r3, r7, #17, #4
 800113a:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800113c:	f007 080f 	and.w	r8, r7, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001140:	f000 83b6 	beq.w	80018b0 <HAL_PCD_IRQHandler+0x7dc>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001144:	2b06      	cmp	r3, #6
 8001146:	f000 8356 	beq.w	80017f6 <HAL_PCD_IRQHandler+0x722>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800114a:	6983      	ldr	r3, [r0, #24]
 800114c:	f043 0310 	orr.w	r3, r3, #16
 8001150:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001152:	f001 ff57 	bl	8003004 <USB_ReadInterrupts>
 8001156:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800115a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800115c:	f040 82b1 	bne.w	80016c2 <HAL_PCD_IRQHandler+0x5ee>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001160:	f001 ff50 	bl	8003004 <USB_ReadInterrupts>
 8001164:	0347      	lsls	r7, r0, #13
 8001166:	f100 8210 	bmi.w	800158a <HAL_PCD_IRQHandler+0x4b6>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800116a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800116c:	f001 ff4a 	bl	8003004 <USB_ReadInterrupts>
 8001170:	2800      	cmp	r0, #0
 8001172:	f2c0 8182 	blt.w	800147a <HAL_PCD_IRQHandler+0x3a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001176:	6820      	ldr	r0, [r4, #0]
 8001178:	f001 ff44 	bl	8003004 <USB_ReadInterrupts>
 800117c:	0503      	lsls	r3, r0, #20
 800117e:	f100 813d 	bmi.w	80013fc <HAL_PCD_IRQHandler+0x328>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001182:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001184:	f001 ff3e 	bl	8003004 <USB_ReadInterrupts>
 8001188:	04c0      	lsls	r0, r0, #19
 800118a:	f100 81a0 	bmi.w	80014ce <HAL_PCD_IRQHandler+0x3fa>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800118e:	6820      	ldr	r0, [r4, #0]
 8001190:	f001 ff38 	bl	8003004 <USB_ReadInterrupts>
 8001194:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8001198:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800119a:	f040 8181 	bne.w	80014a0 <HAL_PCD_IRQHandler+0x3cc>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800119e:	f001 ff31 	bl	8003004 <USB_ReadInterrupts>
 80011a2:	0701      	lsls	r1, r0, #28
 80011a4:	f100 81e8 	bmi.w	8001578 <HAL_PCD_IRQHandler+0x4a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80011a8:	6820      	ldr	r0, [r4, #0]
 80011aa:	f001 ff2b 	bl	8003004 <USB_ReadInterrupts>
 80011ae:	0602      	lsls	r2, r0, #24
 80011b0:	d571      	bpl.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80011b2:	69b3      	ldr	r3, [r6, #24]
 80011b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80011b8:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80011ba:	7923      	ldrb	r3, [r4, #4]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d96a      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80011c0:	f894 227b 	ldrb.w	r2, [r4, #635]	@ 0x27b
 80011c4:	2a01      	cmp	r2, #1
 80011c6:	f000 83e0 	beq.w	800198a <HAL_PCD_IRQHandler+0x8b6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d963      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80011ce:	f894 229f 	ldrb.w	r2, [r4, #671]	@ 0x29f
 80011d2:	2a01      	cmp	r2, #1
 80011d4:	f000 83f4 	beq.w	80019c0 <HAL_PCD_IRQHandler+0x8ec>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d95c      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80011dc:	f894 22c3 	ldrb.w	r2, [r4, #707]	@ 0x2c3
 80011e0:	2a01      	cmp	r2, #1
 80011e2:	f000 8301 	beq.w	80017e8 <HAL_PCD_IRQHandler+0x714>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d955      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80011ea:	f894 22e7 	ldrb.w	r2, [r4, #743]	@ 0x2e7
 80011ee:	2a01      	cmp	r2, #1
 80011f0:	f000 8314 	beq.w	800181c <HAL_PCD_IRQHandler+0x748>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d94e      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80011f8:	f894 230b 	ldrb.w	r2, [r4, #779]	@ 0x30b
 80011fc:	2a01      	cmp	r2, #1
 80011fe:	f000 841a 	beq.w	8001a36 <HAL_PCD_IRQHandler+0x962>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001202:	2b06      	cmp	r3, #6
 8001204:	d947      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001206:	f894 232f 	ldrb.w	r2, [r4, #815]	@ 0x32f
 800120a:	2a01      	cmp	r2, #1
 800120c:	f000 8427 	beq.w	8001a5e <HAL_PCD_IRQHandler+0x98a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001210:	2b07      	cmp	r3, #7
 8001212:	d940      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001214:	f894 2353 	ldrb.w	r2, [r4, #851]	@ 0x353
 8001218:	2a01      	cmp	r2, #1
 800121a:	f000 8439 	beq.w	8001a90 <HAL_PCD_IRQHandler+0x9bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800121e:	2b08      	cmp	r3, #8
 8001220:	d939      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001222:	f894 2377 	ldrb.w	r2, [r4, #887]	@ 0x377
 8001226:	2a01      	cmp	r2, #1
 8001228:	f000 8446 	beq.w	8001ab8 <HAL_PCD_IRQHandler+0x9e4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800122c:	2b09      	cmp	r3, #9
 800122e:	d932      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001230:	f894 239b 	ldrb.w	r2, [r4, #923]	@ 0x39b
 8001234:	2a01      	cmp	r2, #1
 8001236:	f000 8453 	beq.w	8001ae0 <HAL_PCD_IRQHandler+0xa0c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800123a:	2b0a      	cmp	r3, #10
 800123c:	d92b      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800123e:	f894 23bf 	ldrb.w	r2, [r4, #959]	@ 0x3bf
 8001242:	2a01      	cmp	r2, #1
 8001244:	f000 8460 	beq.w	8001b08 <HAL_PCD_IRQHandler+0xa34>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001248:	2b0b      	cmp	r3, #11
 800124a:	d924      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800124c:	f894 23e3 	ldrb.w	r2, [r4, #995]	@ 0x3e3
 8001250:	2a01      	cmp	r2, #1
 8001252:	f000 846d 	beq.w	8001b30 <HAL_PCD_IRQHandler+0xa5c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001256:	2b0c      	cmp	r3, #12
 8001258:	d91d      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800125a:	f894 2407 	ldrb.w	r2, [r4, #1031]	@ 0x407
 800125e:	2a01      	cmp	r2, #1
 8001260:	f000 8472 	beq.w	8001b48 <HAL_PCD_IRQHandler+0xa74>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001264:	2b0d      	cmp	r3, #13
 8001266:	d916      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001268:	f894 242b 	ldrb.w	r2, [r4, #1067]	@ 0x42b
 800126c:	2a01      	cmp	r2, #1
 800126e:	f000 8492 	beq.w	8001b96 <HAL_PCD_IRQHandler+0xac2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001272:	2b0e      	cmp	r3, #14
 8001274:	d90f      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001276:	f894 244f 	ldrb.w	r2, [r4, #1103]	@ 0x44f
 800127a:	2a01      	cmp	r2, #1
 800127c:	f000 8499 	beq.w	8001bb2 <HAL_PCD_IRQHandler+0xade>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d908      	bls.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001284:	f894 3473 	ldrb.w	r3, [r4, #1139]	@ 0x473
 8001288:	2b01      	cmp	r3, #1
 800128a:	d104      	bne.n	8001296 <HAL_PCD_IRQHandler+0x1c2>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800128c:	6820      	ldr	r0, [r4, #0]
 800128e:	f504 618e 	add.w	r1, r4, #1136	@ 0x470
 8001292:	f001 fda7 	bl	8002de4 <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001296:	6820      	ldr	r0, [r4, #0]
 8001298:	f001 feb4 	bl	8003004 <USB_ReadInterrupts>
 800129c:	02c3      	lsls	r3, r0, #11
 800129e:	f140 80ab 	bpl.w	80013f8 <HAL_PCD_IRQHandler+0x324>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80012a2:	7923      	ldrb	r3, [r4, #4]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	f240 8089 	bls.w	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80012aa:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80012ae:	f8d6 1920 	ldr.w	r1, [r6, #2336]	@ 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80012b2:	2a01      	cmp	r2, #1
 80012b4:	f000 8261 	beq.w	800177a <HAL_PCD_IRQHandler+0x6a6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d97f      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80012bc:	f894 2060 	ldrb.w	r2, [r4, #96]	@ 0x60
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80012c0:	f8d6 1940 	ldr.w	r1, [r6, #2368]	@ 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80012c4:	2a01      	cmp	r2, #1
 80012c6:	f000 826b 	beq.w	80017a0 <HAL_PCD_IRQHandler+0x6cc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d976      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80012ce:	f894 2084 	ldrb.w	r2, [r4, #132]	@ 0x84
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80012d2:	f8d6 1960 	ldr.w	r1, [r6, #2400]	@ 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80012d6:	2a01      	cmp	r2, #1
 80012d8:	f000 826e 	beq.w	80017b8 <HAL_PCD_IRQHandler+0x6e4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d96d      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80012e0:	f894 20a8 	ldrb.w	r2, [r4, #168]	@ 0xa8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80012e4:	f8d6 1980 	ldr.w	r1, [r6, #2432]	@ 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80012e8:	2a01      	cmp	r2, #1
 80012ea:	f000 8271 	beq.w	80017d0 <HAL_PCD_IRQHandler+0x6fc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d964      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80012f2:	f894 20cc 	ldrb.w	r2, [r4, #204]	@ 0xcc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80012f6:	f8d6 19a0 	ldr.w	r1, [r6, #2464]	@ 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80012fa:	2a01      	cmp	r2, #1
 80012fc:	f000 8339 	beq.w	8001972 <HAL_PCD_IRQHandler+0x89e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001300:	2b06      	cmp	r3, #6
 8001302:	d95b      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001304:	f894 20f0 	ldrb.w	r2, [r4, #240]	@ 0xf0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001308:	f8d6 19c0 	ldr.w	r1, [r6, #2496]	@ 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800130c:	2a01      	cmp	r2, #1
 800130e:	f000 834b 	beq.w	80019a8 <HAL_PCD_IRQHandler+0x8d4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001312:	2b07      	cmp	r3, #7
 8001314:	d952      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001316:	f894 2114 	ldrb.w	r2, [r4, #276]	@ 0x114
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800131a:	f8d6 19e0 	ldr.w	r1, [r6, #2528]	@ 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800131e:	2a01      	cmp	r2, #1
 8001320:	f000 8355 	beq.w	80019ce <HAL_PCD_IRQHandler+0x8fa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001324:	2b08      	cmp	r3, #8
 8001326:	d949      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001328:	f894 2138 	ldrb.w	r2, [r4, #312]	@ 0x138
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800132c:	f8d6 1a00 	ldr.w	r1, [r6, #2560]	@ 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001330:	2a01      	cmp	r2, #1
 8001332:	f000 8358 	beq.w	80019e6 <HAL_PCD_IRQHandler+0x912>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001336:	2b09      	cmp	r3, #9
 8001338:	d940      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800133a:	f894 215c 	ldrb.w	r2, [r4, #348]	@ 0x15c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800133e:	f8d6 1a20 	ldr.w	r1, [r6, #2592]	@ 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001342:	2a01      	cmp	r2, #1
 8001344:	f000 836b 	beq.w	8001a1e <HAL_PCD_IRQHandler+0x94a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001348:	2b0a      	cmp	r3, #10
 800134a:	d937      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800134c:	f894 2180 	ldrb.w	r2, [r4, #384]	@ 0x180
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001350:	f8d6 1a40 	ldr.w	r1, [r6, #2624]	@ 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001354:	2a01      	cmp	r2, #1
 8001356:	f000 8376 	beq.w	8001a46 <HAL_PCD_IRQHandler+0x972>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800135a:	2b0b      	cmp	r3, #11
 800135c:	d92e      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800135e:	f894 21a4 	ldrb.w	r2, [r4, #420]	@ 0x1a4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001362:	f8d6 1a60 	ldr.w	r1, [r6, #2656]	@ 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001366:	2a01      	cmp	r2, #1
 8001368:	f000 8386 	beq.w	8001a78 <HAL_PCD_IRQHandler+0x9a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800136c:	2b0c      	cmp	r3, #12
 800136e:	d925      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001370:	f894 21c8 	ldrb.w	r2, [r4, #456]	@ 0x1c8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001374:	f8d6 1a80 	ldr.w	r1, [r6, #2688]	@ 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001378:	2a01      	cmp	r2, #1
 800137a:	f000 8391 	beq.w	8001aa0 <HAL_PCD_IRQHandler+0x9cc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800137e:	2b0d      	cmp	r3, #13
 8001380:	d91c      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001382:	f894 21ec 	ldrb.w	r2, [r4, #492]	@ 0x1ec
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001386:	f8d6 1aa0 	ldr.w	r1, [r6, #2720]	@ 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800138a:	2a01      	cmp	r2, #1
 800138c:	f000 839c 	beq.w	8001ac8 <HAL_PCD_IRQHandler+0x9f4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001390:	2b0e      	cmp	r3, #14
 8001392:	d913      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001394:	f894 2210 	ldrb.w	r2, [r4, #528]	@ 0x210
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001398:	f8d6 1ac0 	ldr.w	r1, [r6, #2752]	@ 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800139c:	2a01      	cmp	r2, #1
 800139e:	f000 83a7 	beq.w	8001af0 <HAL_PCD_IRQHandler+0xa1c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	d90a      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80013a6:	f894 2234 	ldrb.w	r2, [r4, #564]	@ 0x234
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80013aa:	f8d6 1ae0 	ldr.w	r1, [r6, #2784]	@ 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80013ae:	2a01      	cmp	r2, #1
 80013b0:	f000 83b2 	beq.w	8001b18 <HAL_PCD_IRQHandler+0xa44>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80013b4:	2b10      	cmp	r3, #16
 80013b6:	d901      	bls.n	80013bc <HAL_PCD_IRQHandler+0x2e8>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80013b8:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	@ 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80013bc:	6820      	ldr	r0, [r4, #0]
 80013be:	6943      	ldr	r3, [r0, #20]
 80013c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c4:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80013c6:	f001 fe1d 	bl	8003004 <USB_ReadInterrupts>
 80013ca:	0287      	lsls	r7, r0, #10
 80013cc:	d421      	bmi.n	8001412 <HAL_PCD_IRQHandler+0x33e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80013ce:	6820      	ldr	r0, [r4, #0]
 80013d0:	f001 fe18 	bl	8003004 <USB_ReadInterrupts>
 80013d4:	0040      	lsls	r0, r0, #1
 80013d6:	f100 80c6 	bmi.w	8001566 <HAL_PCD_IRQHandler+0x492>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80013da:	6820      	ldr	r0, [r4, #0]
 80013dc:	f001 fe12 	bl	8003004 <USB_ReadInterrupts>
 80013e0:	0741      	lsls	r1, r0, #29
 80013e2:	f57f ae80 	bpl.w	80010e6 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80013ea:	076a      	lsls	r2, r5, #29
 80013ec:	f100 8281 	bmi.w	80018f2 <HAL_PCD_IRQHandler+0x81e>
      hpcd->Instance->GOTGINT |= RegVal;
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	432a      	orrs	r2, r5
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	e676      	b.n	80010e6 <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80013f8:	6820      	ldr	r0, [r4, #0]
 80013fa:	e7e4      	b.n	80013c6 <HAL_PCD_IRQHandler+0x2f2>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80013fc:	9b03      	ldr	r3, [sp, #12]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	07df      	lsls	r7, r3, #31
 8001402:	f100 8272 	bmi.w	80018ea <HAL_PCD_IRQHandler+0x816>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001406:	6820      	ldr	r0, [r4, #0]
 8001408:	6943      	ldr	r3, [r0, #20]
 800140a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800140e:	6143      	str	r3, [r0, #20]
 8001410:	e6b8      	b.n	8001184 <HAL_PCD_IRQHandler+0xb0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001412:	f894 c004 	ldrb.w	ip, [r4, #4]
 8001416:	f1bc 0f01 	cmp.w	ip, #1
 800141a:	d928      	bls.n	800146e <HAL_PCD_IRQHandler+0x39a>
 800141c:	f506 6232 	add.w	r2, r6, #2848	@ 0xb20
 8001420:	4623      	mov	r3, r4
 8001422:	2101      	movs	r1, #1
 8001424:	e006      	b.n	8001434 <HAL_PCD_IRQHandler+0x360>
 8001426:	3101      	adds	r1, #1
 8001428:	4561      	cmp	r1, ip
 800142a:	f102 0220 	add.w	r2, r2, #32
 800142e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001432:	d01c      	beq.n	800146e <HAL_PCD_IRQHandler+0x39a>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001434:	f893 027c 	ldrb.w	r0, [r3, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001438:	6815      	ldr	r5, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800143a:	2801      	cmp	r0, #1
 800143c:	d1f3      	bne.n	8001426 <HAL_PCD_IRQHandler+0x352>
 800143e:	2d00      	cmp	r5, #0
 8001440:	daf1      	bge.n	8001426 <HAL_PCD_IRQHandler+0x352>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001442:	f8d4 74d4 	ldr.w	r7, [r4, #1236]	@ 0x4d4
 8001446:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 800144a:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800144e:	42bd      	cmp	r5, r7
 8001450:	d1e9      	bne.n	8001426 <HAL_PCD_IRQHandler+0x352>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001452:	f883 027b 	strb.w	r0, [r3, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001456:	69b0      	ldr	r0, [r6, #24]
 8001458:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800145c:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800145e:	6970      	ldr	r0, [r6, #20]
 8001460:	0605      	lsls	r5, r0, #24
 8001462:	d4e0      	bmi.n	8001426 <HAL_PCD_IRQHandler+0x352>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001464:	9a03      	ldr	r2, [sp, #12]
 8001466:	6853      	ldr	r3, [r2, #4]
 8001468:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800146c:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800146e:	6820      	ldr	r0, [r4, #0]
 8001470:	6943      	ldr	r3, [r0, #20]
 8001472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001476:	6143      	str	r3, [r0, #20]
 8001478:	e7aa      	b.n	80013d0 <HAL_PCD_IRQHandler+0x2fc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800147a:	9a03      	ldr	r2, [sp, #12]
 800147c:	6853      	ldr	r3, [r2, #4]
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 8001484:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8001488:	2b01      	cmp	r3, #1
 800148a:	f000 8182 	beq.w	8001792 <HAL_PCD_IRQHandler+0x6be>
        HAL_PCD_ResumeCallback(hpcd);
 800148e:	4620      	mov	r0, r4
 8001490:	f002 fe70 	bl	8004174 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001494:	6820      	ldr	r0, [r4, #0]
 8001496:	6943      	ldr	r3, [r0, #20]
 8001498:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800149c:	6143      	str	r3, [r0, #20]
 800149e:	e66b      	b.n	8001178 <HAL_PCD_IRQHandler+0xa4>
      (void)USB_ActivateSetup(hpcd->Instance);
 80014a0:	f001 fde2 	bl	8003068 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80014a4:	6820      	ldr	r0, [r4, #0]
 80014a6:	f001 fac3 	bl	8002a30 <USB_GetDevSpeed>
 80014aa:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80014ac:	6825      	ldr	r5, [r4, #0]
 80014ae:	f001 f80f 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 80014b2:	79e2      	ldrb	r2, [r4, #7]
 80014b4:	4601      	mov	r1, r0
 80014b6:	4628      	mov	r0, r5
 80014b8:	f001 f8a4 	bl	8002604 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80014bc:	4620      	mov	r0, r4
 80014be:	f002 fe2f 	bl	8004120 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80014c2:	6820      	ldr	r0, [r4, #0]
 80014c4:	6943      	ldr	r3, [r0, #20]
 80014c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014ca:	6143      	str	r3, [r0, #20]
 80014cc:	e667      	b.n	800119e <HAL_PCD_IRQHandler+0xca>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014ce:	9a03      	ldr	r2, [sp, #12]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80014d0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014d2:	6853      	ldr	r3, [r2, #4]
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80014da:	2110      	movs	r1, #16
 80014dc:	f001 fa80 	bl	80029e0 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e0:	7920      	ldrb	r0, [r4, #4]
 80014e2:	b1d8      	cbz	r0, 800151c <HAL_PCD_IRQHandler+0x448>
 80014e4:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80014e8:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 80014ec:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80014f4:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80014f6:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80014fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80014fe:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001502:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001506:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150a:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800150c:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001510:	4285      	cmp	r5, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001512:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001516:	f103 0320 	add.w	r3, r3, #32
 800151a:	d1e7      	bne.n	80014ec <HAL_PCD_IRQHandler+0x418>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800151c:	9a03      	ldr	r2, [sp, #12]
 800151e:	69d3      	ldr	r3, [r2, #28]
 8001520:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001524:	61d3      	str	r3, [r2, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001526:	7be3      	ldrb	r3, [r4, #15]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f040 811b 	bne.w	8001764 <HAL_PCD_IRQHandler+0x690>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800152e:	6953      	ldr	r3, [r2, #20]
 8001530:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001534:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001538:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800153a:	6913      	ldr	r3, [r2, #16]
 800153c:	f043 030b 	orr.w	r3, r3, #11
 8001540:	6113      	str	r3, [r2, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001542:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001546:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001548:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800154c:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001550:	79a1      	ldrb	r1, [r4, #6]
 8001552:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001556:	f001 fd99 	bl	800308c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800155a:	6820      	ldr	r0, [r4, #0]
 800155c:	6943      	ldr	r3, [r0, #20]
 800155e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001562:	6143      	str	r3, [r0, #20]
 8001564:	e614      	b.n	8001190 <HAL_PCD_IRQHandler+0xbc>
      HAL_PCD_ConnectCallback(hpcd);
 8001566:	4620      	mov	r0, r4
 8001568:	f002 fe10 	bl	800418c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800156c:	6820      	ldr	r0, [r4, #0]
 800156e:	6943      	ldr	r3, [r0, #20]
 8001570:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001574:	6143      	str	r3, [r0, #20]
 8001576:	e731      	b.n	80013dc <HAL_PCD_IRQHandler+0x308>
      HAL_PCD_SOFCallback(hpcd);
 8001578:	4620      	mov	r0, r4
 800157a:	f002 fdcd 	bl	8004118 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800157e:	6820      	ldr	r0, [r4, #0]
 8001580:	6943      	ldr	r3, [r0, #20]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	6143      	str	r3, [r0, #20]
 8001588:	e60f      	b.n	80011aa <HAL_PCD_IRQHandler+0xd6>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800158a:	6820      	ldr	r0, [r4, #0]
 800158c:	f001 fd46 	bl	800301c <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8001590:	4681      	mov	r9, r0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001592:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8001594:	f1b9 0f00 	cmp.w	r9, #0
 8001598:	f43f ade8 	beq.w	800116c <HAL_PCD_IRQHandler+0x98>
 800159c:	f506 6710 	add.w	r7, r6, #2304	@ 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015a0:	9604      	str	r6, [sp, #16]
 80015a2:	46a0      	mov	r8, r4
      epnum = 0U;
 80015a4:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015a8:	4606      	mov	r6, r0
 80015aa:	9505      	str	r5, [sp, #20]
 80015ac:	e009      	b.n	80015c2 <HAL_PCD_IRQHandler+0x4ee>
      while (ep_intr != 0U)
 80015ae:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 80015b2:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 80015b6:	f108 0824 	add.w	r8, r8, #36	@ 0x24
 80015ba:	f107 0720 	add.w	r7, r7, #32
 80015be:	f000 8137 	beq.w	8001830 <HAL_PCD_IRQHandler+0x75c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015c2:	f019 0f01 	tst.w	r9, #1
 80015c6:	d0f2      	beq.n	80015ae <HAL_PCD_IRQHandler+0x4da>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015c8:	fa5f fb8a 	uxtb.w	fp, sl
 80015cc:	4630      	mov	r0, r6
 80015ce:	4659      	mov	r1, fp
 80015d0:	f001 fd36 	bl	8003040 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015d4:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015d6:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015d8:	d512      	bpl.n	8001600 <HAL_PCD_IRQHandler+0x52c>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015da:	9803      	ldr	r0, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015dc:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015de:	6b43      	ldr	r3, [r0, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015e0:	f00a 020f 	and.w	r2, sl, #15
 80015e4:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015e8:	ea23 0302 	bic.w	r3, r3, r2
 80015ec:	6343      	str	r3, [r0, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015ee:	60b9      	str	r1, [r7, #8]
            if (hpcd->Init.dma_enable == 1U)
 80015f0:	79a1      	ldrb	r1, [r4, #6]
 80015f2:	2901      	cmp	r1, #1
 80015f4:	f000 8182 	beq.w	80018fc <HAL_PCD_IRQHandler+0x828>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015f8:	4659      	mov	r1, fp
 80015fa:	4620      	mov	r0, r4
 80015fc:	f002 fd82 	bl	8004104 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001600:	072b      	lsls	r3, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001602:	bf44      	itt	mi
 8001604:	2308      	movmi	r3, #8
 8001606:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001608:	06ee      	lsls	r6, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800160a:	bf44      	itt	mi
 800160c:	2310      	movmi	r3, #16
 800160e:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001610:	0668      	lsls	r0, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001612:	bf44      	itt	mi
 8001614:	2340      	movmi	r3, #64	@ 0x40
 8001616:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001618:	07a9      	lsls	r1, r5, #30
 800161a:	f100 813d 	bmi.w	8001898 <HAL_PCD_IRQHandler+0x7c4>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800161e:	062a      	lsls	r2, r5, #24
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001620:	6826      	ldr	r6, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001622:	d5c4      	bpl.n	80015ae <HAL_PCD_IRQHandler+0x4da>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001624:	e9d8 5309 	ldrd	r5, r3, [r8, #36]	@ 0x24
 8001628:	42ab      	cmp	r3, r5
 800162a:	d8c0      	bhi.n	80015ae <HAL_PCD_IRQHandler+0x4da>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800162c:	f506 6110 	add.w	r1, r6, #2304	@ 0x900
  len32b = (len + 3U) / 4U;
 8001630:	f8d8 001c 	ldr.w	r0, [r8, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001634:	9607      	str	r6, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001636:	eb01 114a 	add.w	r1, r1, sl, lsl #5
  len = ep->xfer_len - ep->xfer_count;
 800163a:	eba5 0c03 	sub.w	ip, r5, r3
  len32b = (len + 3U) / 4U;
 800163e:	4584      	cmp	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001640:	698a      	ldr	r2, [r1, #24]
  len32b = (len + 3U) / 4U;
 8001642:	bf28      	it	cs
 8001644:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001646:	fa1f fe82 	uxth.w	lr, r2
  len32b = (len + 3U) / 4U;
 800164a:	f10c 0c03 	add.w	ip, ip, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800164e:	ebbe 0f9c 	cmp.w	lr, ip, lsr #2
 8001652:	f0c0 818a 	bcc.w	800196a <HAL_PCD_IRQHandler+0x896>
 8001656:	9706      	str	r7, [sp, #24]
 8001658:	460f      	mov	r7, r1
 800165a:	e021      	b.n	80016a0 <HAL_PCD_IRQHandler+0x5cc>
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800165c:	1aed      	subs	r5, r5, r3
 800165e:	f8d8 301c 	ldr.w	r3, [r8, #28]
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001662:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8001666:	429d      	cmp	r5, r3
 8001668:	bf28      	it	cs
 800166a:	461d      	movcs	r5, r3
 800166c:	79a3      	ldrb	r3, [r4, #6]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	465a      	mov	r2, fp
 8001672:	b2ab      	uxth	r3, r5
 8001674:	4630      	mov	r0, r6
 8001676:	f001 fbff 	bl	8002e78 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 800167a:	f8d8 3020 	ldr.w	r3, [r8, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800167e:	69ba      	ldr	r2, [r7, #24]
    ep->xfer_buff  += len;
 8001680:	442b      	add	r3, r5
 8001682:	f8c8 3020 	str.w	r3, [r8, #32]
    ep->xfer_count += len;
 8001686:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800168a:	b292      	uxth	r2, r2
    ep->xfer_count += len;
 800168c:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800168e:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001690:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
    ep->xfer_count += len;
 8001694:	f8c8 3028 	str.w	r3, [r8, #40]	@ 0x28
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001698:	f0c0 8163 	bcc.w	8001962 <HAL_PCD_IRQHandler+0x88e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800169c:	f8d8 5024 	ldr.w	r5, [r8, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80016a0:	429d      	cmp	r5, r3
 80016a2:	d8db      	bhi.n	800165c <HAL_PCD_IRQHandler+0x588>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016a4:	9f06      	ldr	r7, [sp, #24]
 80016a6:	6826      	ldr	r6, [r4, #0]
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016a8:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016aa:	f00a 050f 	and.w	r5, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016ae:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016b2:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016b4:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016b8:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016ba:	ea23 0302 	bic.w	r3, r3, r2
 80016be:	634b      	str	r3, [r1, #52]	@ 0x34
 80016c0:	e775      	b.n	80015ae <HAL_PCD_IRQHandler+0x4da>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016c2:	f001 fca3 	bl	800300c <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80016c6:	4607      	mov	r7, r0
 80016c8:	6820      	ldr	r0, [r4, #0]
 80016ca:	2f00      	cmp	r7, #0
 80016cc:	f43f ad48 	beq.w	8001160 <HAL_PCD_IRQHandler+0x8c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80016d0:	9504      	str	r5, [sp, #16]
 80016d2:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
 80016d6:	46a3      	mov	fp, r4
      epnum = 0U;
 80016d8:	f04f 0a00 	mov.w	sl, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80016dc:	4625      	mov	r5, r4
 80016de:	e008      	b.n	80016f2 <HAL_PCD_IRQHandler+0x61e>
      while (ep_intr != 0U)
 80016e0:	087f      	lsrs	r7, r7, #1
        epnum++;
 80016e2:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 80016e6:	f108 0820 	add.w	r8, r8, #32
 80016ea:	f10b 0b24 	add.w	fp, fp, #36	@ 0x24
 80016ee:	f000 809c 	beq.w	800182a <HAL_PCD_IRQHandler+0x756>
        if ((ep_intr & 0x1U) != 0U)
 80016f2:	07fc      	lsls	r4, r7, #31
 80016f4:	d5f4      	bpl.n	80016e0 <HAL_PCD_IRQHandler+0x60c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016f6:	fa5f f48a 	uxtb.w	r4, sl
 80016fa:	4621      	mov	r1, r4
 80016fc:	f001 fc96 	bl	800302c <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001700:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001704:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001706:	f040 80a8 	bne.w	800185a <HAL_PCD_IRQHandler+0x786>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800170a:	f019 0f08 	tst.w	r9, #8
 800170e:	f040 8093 	bne.w	8001838 <HAL_PCD_IRQHandler+0x764>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001712:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001716:	bf1c      	itt	ne
 8001718:	2210      	movne	r2, #16
 800171a:	f8c8 2008 	strne.w	r2, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800171e:	f019 0f02 	tst.w	r9, #2
 8001722:	d00f      	beq.n	8001744 <HAL_PCD_IRQHandler+0x670>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001724:	6972      	ldr	r2, [r6, #20]
 8001726:	0611      	lsls	r1, r2, #24
 8001728:	d504      	bpl.n	8001734 <HAL_PCD_IRQHandler+0x660>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800172a:	9b03      	ldr	r3, [sp, #12]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001732:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 8001734:	f89b 2257 	ldrb.w	r2, [fp, #599]	@ 0x257
 8001738:	2a01      	cmp	r2, #1
 800173a:	f000 812d 	beq.w	8001998 <HAL_PCD_IRQHandler+0x8c4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800173e:	2302      	movs	r3, #2
 8001740:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001744:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001748:	bf1c      	itt	ne
 800174a:	2320      	movne	r3, #32
 800174c:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001750:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001754:	bf18      	it	ne
 8001756:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 800175a:	6828      	ldr	r0, [r5, #0]
 800175c:	bf18      	it	ne
 800175e:	f8c8 3008 	strne.w	r3, [r8, #8]
 8001762:	e7bd      	b.n	80016e0 <HAL_PCD_IRQHandler+0x60c>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001764:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8001768:	f043 030b 	orr.w	r3, r3, #11
 800176c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001770:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8001772:	f043 030b 	orr.w	r3, r3, #11
 8001776:	6453      	str	r3, [r2, #68]	@ 0x44
 8001778:	e6e3      	b.n	8001542 <HAL_PCD_IRQHandler+0x46e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800177a:	2900      	cmp	r1, #0
 800177c:	f6bf ad9c 	bge.w	80012b8 <HAL_PCD_IRQHandler+0x1e4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001780:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001782:	f884 203b 	strb.w	r2, [r4, #59]	@ 0x3b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001786:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800178a:	f001 fb2b 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800178e:	7923      	ldrb	r3, [r4, #4]
 8001790:	e592      	b.n	80012b8 <HAL_PCD_IRQHandler+0x1e4>
        hpcd->LPM_State = LPM_L0;
 8001792:	2100      	movs	r1, #0
 8001794:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001798:	4620      	mov	r0, r4
 800179a:	f000 fbf1 	bl	8001f80 <HAL_PCDEx_LPM_Callback>
 800179e:	e679      	b.n	8001494 <HAL_PCD_IRQHandler+0x3c0>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80017a0:	2900      	cmp	r1, #0
 80017a2:	f6bf ad92 	bge.w	80012ca <HAL_PCD_IRQHandler+0x1f6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80017a6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80017a8:	f884 205f 	strb.w	r2, [r4, #95]	@ 0x5f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80017ac:	f104 015c 	add.w	r1, r4, #92	@ 0x5c
 80017b0:	f001 fb18 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017b4:	7923      	ldrb	r3, [r4, #4]
 80017b6:	e588      	b.n	80012ca <HAL_PCD_IRQHandler+0x1f6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80017b8:	2900      	cmp	r1, #0
 80017ba:	f6bf ad8f 	bge.w	80012dc <HAL_PCD_IRQHandler+0x208>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80017be:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80017c0:	f884 2083 	strb.w	r2, [r4, #131]	@ 0x83
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80017c4:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 80017c8:	f001 fb0c 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017cc:	7923      	ldrb	r3, [r4, #4]
 80017ce:	e585      	b.n	80012dc <HAL_PCD_IRQHandler+0x208>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80017d0:	2900      	cmp	r1, #0
 80017d2:	f6bf ad8c 	bge.w	80012ee <HAL_PCD_IRQHandler+0x21a>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80017d6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80017d8:	f884 20a7 	strb.w	r2, [r4, #167]	@ 0xa7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80017dc:	f104 01a4 	add.w	r1, r4, #164	@ 0xa4
 80017e0:	f001 fb00 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017e4:	7923      	ldrb	r3, [r4, #4]
 80017e6:	e582      	b.n	80012ee <HAL_PCD_IRQHandler+0x21a>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80017e8:	6820      	ldr	r0, [r4, #0]
 80017ea:	f504 7130 	add.w	r1, r4, #704	@ 0x2c0
 80017ee:	f001 faf9 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017f2:	7923      	ldrb	r3, [r4, #4]
 80017f4:	e4f7      	b.n	80011e6 <HAL_PCD_IRQHandler+0x112>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017f6:	2208      	movs	r2, #8
 80017f8:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 80017fc:	4630      	mov	r0, r6
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017fe:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001802:	f001 fb4f 	bl	8002ea4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001806:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 800180a:	f3c7 130a 	ubfx	r3, r7, #4, #11
 800180e:	f8d2 1268 	ldr.w	r1, [r2, #616]	@ 0x268
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001812:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001814:	440b      	add	r3, r1
 8001816:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 800181a:	e496      	b.n	800114a <HAL_PCD_IRQHandler+0x76>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800181c:	6820      	ldr	r0, [r4, #0]
 800181e:	f504 7139 	add.w	r1, r4, #740	@ 0x2e4
 8001822:	f001 fadf 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001826:	7923      	ldrb	r3, [r4, #4]
 8001828:	e4e4      	b.n	80011f4 <HAL_PCD_IRQHandler+0x120>
 800182a:	462c      	mov	r4, r5
 800182c:	9d04      	ldr	r5, [sp, #16]
 800182e:	e497      	b.n	8001160 <HAL_PCD_IRQHandler+0x8c>
 8001830:	4630      	mov	r0, r6
 8001832:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
 8001836:	e499      	b.n	800116c <HAL_PCD_IRQHandler+0x98>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001838:	6829      	ldr	r1, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800183a:	2208      	movs	r2, #8
 800183c:	f8c8 2008 	str.w	r2, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001840:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001842:	f501 6230 	add.w	r2, r1, #2816	@ 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001846:	49be      	ldr	r1, [pc, #760]	@ (8001b40 <HAL_PCD_IRQHandler+0xa6c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001848:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800184c:	4288      	cmp	r0, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800184e:	6893      	ldr	r3, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001850:	d867      	bhi.n	8001922 <HAL_PCD_IRQHandler+0x84e>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001852:	4628      	mov	r0, r5
 8001854:	f002 fc46 	bl	80040e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001858:	e75b      	b.n	8001712 <HAL_PCD_IRQHandler+0x63e>
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800185a:	6828      	ldr	r0, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800185c:	2201      	movs	r2, #1
 800185e:	f8c8 2008 	str.w	r2, [r8, #8]
  if (hpcd->Init.dma_enable == 1U)
 8001862:	79a9      	ldrb	r1, [r5, #6]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001864:	f8d0 e040 	ldr.w	lr, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001868:	f500 6230 	add.w	r2, r0, #2816	@ 0xb00
 800186c:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8001870:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001872:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8001874:	d067      	beq.n	8001946 <HAL_PCD_IRQHandler+0x872>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001876:	49b3      	ldr	r1, [pc, #716]	@ (8001b44 <HAL_PCD_IRQHandler+0xa70>)
 8001878:	458e      	cmp	lr, r1
 800187a:	f000 80c0 	beq.w	80019fe <HAL_PCD_IRQHandler+0x92a>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800187e:	f1ba 0f00 	cmp.w	sl, #0
 8001882:	d104      	bne.n	800188e <HAL_PCD_IRQHandler+0x7ba>
 8001884:	f8d5 2264 	ldr.w	r2, [r5, #612]	@ 0x264
 8001888:	2a00      	cmp	r2, #0
 800188a:	f000 818c 	beq.w	8001ba6 <HAL_PCD_IRQHandler+0xad2>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800188e:	4621      	mov	r1, r4
 8001890:	4628      	mov	r0, r5
 8001892:	f002 fc2d 	bl	80040f0 <HAL_PCD_DataOutStageCallback>
 8001896:	e738      	b.n	800170a <HAL_PCD_IRQHandler+0x636>
            (void)USB_FlushTxFifo(USBx, epnum);
 8001898:	9804      	ldr	r0, [sp, #16]
 800189a:	4651      	mov	r1, sl
 800189c:	f001 f8a0 	bl	80029e0 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 80018a0:	f898 3017 	ldrb.w	r3, [r8, #23]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	f000 80b2 	beq.w	8001a0e <HAL_PCD_IRQHandler+0x93a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018aa:	2302      	movs	r3, #2
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	e6b6      	b.n	800161e <HAL_PCD_IRQHandler+0x54a>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018b0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80018b4:	421f      	tst	r7, r3
 80018b6:	f43f ac48 	beq.w	800114a <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018ba:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
 80018be:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80018c2:	f3c7 120a 	ubfx	r2, r7, #4, #11
 80018c6:	f8d8 1260 	ldr.w	r1, [r8, #608]	@ 0x260
 80018ca:	4630      	mov	r0, r6
 80018cc:	4617      	mov	r7, r2
 80018ce:	f001 fae9 	bl	8002ea4 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018d2:	f8d8 3260 	ldr.w	r3, [r8, #608]	@ 0x260
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018d6:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018d8:	443b      	add	r3, r7
 80018da:	f8c8 3260 	str.w	r3, [r8, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018de:	f8d8 3268 	ldr.w	r3, [r8, #616]	@ 0x268
 80018e2:	443b      	add	r3, r7
 80018e4:	f8c8 3268 	str.w	r3, [r8, #616]	@ 0x268
 80018e8:	e42f      	b.n	800114a <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 80018ea:	4620      	mov	r0, r4
 80018ec:	f002 fc2a 	bl	8004144 <HAL_PCD_SuspendCallback>
 80018f0:	e589      	b.n	8001406 <HAL_PCD_IRQHandler+0x332>
        HAL_PCD_DisconnectCallback(hpcd);
 80018f2:	4620      	mov	r0, r4
 80018f4:	f002 fc4e 	bl	8004194 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	e579      	b.n	80013f0 <HAL_PCD_IRQHandler+0x31c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018fc:	e9d8 2307 	ldrd	r2, r3, [r8, #28]
 8001900:	4413      	add	r3, r2
 8001902:	f8c8 3020 	str.w	r3, [r8, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001906:	f1ba 0f00 	cmp.w	sl, #0
 800190a:	f47f ae75 	bne.w	80015f8 <HAL_PCD_IRQHandler+0x524>
 800190e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001910:	2b00      	cmp	r3, #0
 8001912:	f47f ae71 	bne.w	80015f8 <HAL_PCD_IRQHandler+0x524>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001916:	6820      	ldr	r0, [r4, #0]
 8001918:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800191c:	f001 fbb6 	bl	800308c <USB_EP0_OutStart>
 8001920:	e66a      	b.n	80015f8 <HAL_PCD_IRQHandler+0x524>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001922:	0418      	lsls	r0, r3, #16
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001924:	bf44      	itt	mi
 8001926:	f44f 4100 	movmi.w	r1, #32768	@ 0x8000
 800192a:	6091      	strmi	r1, [r2, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 800192c:	4628      	mov	r0, r5
 800192e:	f002 fbd9 	bl	80040e4 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001932:	79a9      	ldrb	r1, [r5, #6]
 8001934:	2901      	cmp	r1, #1
 8001936:	f47f aeec 	bne.w	8001712 <HAL_PCD_IRQHandler+0x63e>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800193a:	6828      	ldr	r0, [r5, #0]
 800193c:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8001940:	f001 fba4 	bl	800308c <USB_EP0_OutStart>
 8001944:	e6e5      	b.n	8001712 <HAL_PCD_IRQHandler+0x63e>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001946:	0719      	lsls	r1, r3, #28
 8001948:	f140 8091 	bpl.w	8001a6e <HAL_PCD_IRQHandler+0x99a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800194c:	497c      	ldr	r1, [pc, #496]	@ (8001b40 <HAL_PCD_IRQHandler+0xa6c>)
 800194e:	458e      	cmp	lr, r1
 8001950:	f67f aedb 	bls.w	800170a <HAL_PCD_IRQHandler+0x636>
 8001954:	0418      	lsls	r0, r3, #16
 8001956:	f57f aed8 	bpl.w	800170a <HAL_PCD_IRQHandler+0x636>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800195a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800195e:	6091      	str	r1, [r2, #8]
 8001960:	e6d3      	b.n	800170a <HAL_PCD_IRQHandler+0x636>
  if (ep->xfer_len <= ep->xfer_count)
 8001962:	9f06      	ldr	r7, [sp, #24]
 8001964:	f8d8 5024 	ldr.w	r5, [r8, #36]	@ 0x24
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001968:	6826      	ldr	r6, [r4, #0]
  if (ep->xfer_len <= ep->xfer_count)
 800196a:	429d      	cmp	r5, r3
 800196c:	f63f ae1f 	bhi.w	80015ae <HAL_PCD_IRQHandler+0x4da>
 8001970:	e69a      	b.n	80016a8 <HAL_PCD_IRQHandler+0x5d4>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001972:	2900      	cmp	r1, #0
 8001974:	f6bf acc4 	bge.w	8001300 <HAL_PCD_IRQHandler+0x22c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001978:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800197a:	f884 20cb 	strb.w	r2, [r4, #203]	@ 0xcb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800197e:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8001982:	f001 fa2f 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001986:	7923      	ldrb	r3, [r4, #4]
 8001988:	e4ba      	b.n	8001300 <HAL_PCD_IRQHandler+0x22c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800198a:	6820      	ldr	r0, [r4, #0]
 800198c:	f504 711e 	add.w	r1, r4, #632	@ 0x278
 8001990:	f001 fa28 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001994:	7923      	ldrb	r3, [r4, #4]
 8001996:	e418      	b.n	80011ca <HAL_PCD_IRQHandler+0xf6>
              ep->is_iso_incomplete = 0U;
 8001998:	2200      	movs	r2, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800199a:	4621      	mov	r1, r4
              ep->is_iso_incomplete = 0U;
 800199c:	f88b 2257 	strb.w	r2, [fp, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019a0:	4628      	mov	r0, r5
 80019a2:	f002 fbeb 	bl	800417c <HAL_PCD_ISOOUTIncompleteCallback>
 80019a6:	e6ca      	b.n	800173e <HAL_PCD_IRQHandler+0x66a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019a8:	2900      	cmp	r1, #0
 80019aa:	f6bf acb2 	bge.w	8001312 <HAL_PCD_IRQHandler+0x23e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80019ae:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019b0:	f884 20ef 	strb.w	r2, [r4, #239]	@ 0xef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80019b4:	f104 01ec 	add.w	r1, r4, #236	@ 0xec
 80019b8:	f001 fa14 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019bc:	7923      	ldrb	r3, [r4, #4]
 80019be:	e4a8      	b.n	8001312 <HAL_PCD_IRQHandler+0x23e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80019c0:	6820      	ldr	r0, [r4, #0]
 80019c2:	f504 7127 	add.w	r1, r4, #668	@ 0x29c
 80019c6:	f001 fa0d 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ca:	7923      	ldrb	r3, [r4, #4]
 80019cc:	e404      	b.n	80011d8 <HAL_PCD_IRQHandler+0x104>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ce:	2900      	cmp	r1, #0
 80019d0:	f6bf aca8 	bge.w	8001324 <HAL_PCD_IRQHandler+0x250>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80019d4:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019d6:	f884 2113 	strb.w	r2, [r4, #275]	@ 0x113
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80019da:	f504 7188 	add.w	r1, r4, #272	@ 0x110
 80019de:	f001 fa01 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019e2:	7923      	ldrb	r3, [r4, #4]
 80019e4:	e49e      	b.n	8001324 <HAL_PCD_IRQHandler+0x250>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019e6:	2900      	cmp	r1, #0
 80019e8:	f6bf aca5 	bge.w	8001336 <HAL_PCD_IRQHandler+0x262>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80019ec:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019ee:	f884 2137 	strb.w	r2, [r4, #311]	@ 0x137
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80019f2:	f504 719a 	add.w	r1, r4, #308	@ 0x134
 80019f6:	f001 f9f5 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019fa:	7923      	ldrb	r3, [r4, #4]
 80019fc:	e49b      	b.n	8001336 <HAL_PCD_IRQHandler+0x262>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80019fe:	0419      	lsls	r1, r3, #16
 8001a00:	d4ab      	bmi.n	800195a <HAL_PCD_IRQHandler+0x886>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a02:	069b      	lsls	r3, r3, #26
 8001a04:	f57f af43 	bpl.w	800188e <HAL_PCD_IRQHandler+0x7ba>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a08:	2120      	movs	r1, #32
 8001a0a:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001a0c:	e73f      	b.n	800188e <HAL_PCD_IRQHandler+0x7ba>
              ep->is_iso_incomplete = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f888 3017 	strb.w	r3, [r8, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a14:	4659      	mov	r1, fp
 8001a16:	4620      	mov	r0, r4
 8001a18:	f002 fbb4 	bl	8004184 <HAL_PCD_ISOINIncompleteCallback>
 8001a1c:	e745      	b.n	80018aa <HAL_PCD_IRQHandler+0x7d6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a1e:	2900      	cmp	r1, #0
 8001a20:	f6bf ac92 	bge.w	8001348 <HAL_PCD_IRQHandler+0x274>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001a24:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a26:	f884 215b 	strb.w	r2, [r4, #347]	@ 0x15b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001a2a:	f504 71ac 	add.w	r1, r4, #344	@ 0x158
 8001a2e:	f001 f9d9 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a32:	7923      	ldrb	r3, [r4, #4]
 8001a34:	e488      	b.n	8001348 <HAL_PCD_IRQHandler+0x274>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001a36:	6820      	ldr	r0, [r4, #0]
 8001a38:	f504 7142 	add.w	r1, r4, #776	@ 0x308
 8001a3c:	f001 f9d2 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a40:	7923      	ldrb	r3, [r4, #4]
 8001a42:	f7ff bbde 	b.w	8001202 <HAL_PCD_IRQHandler+0x12e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a46:	2900      	cmp	r1, #0
 8001a48:	f6bf ac87 	bge.w	800135a <HAL_PCD_IRQHandler+0x286>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001a4c:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a4e:	f884 217f 	strb.w	r2, [r4, #383]	@ 0x17f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001a52:	f504 71be 	add.w	r1, r4, #380	@ 0x17c
 8001a56:	f001 f9c5 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a5a:	7923      	ldrb	r3, [r4, #4]
 8001a5c:	e47d      	b.n	800135a <HAL_PCD_IRQHandler+0x286>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001a5e:	6820      	ldr	r0, [r4, #0]
 8001a60:	f504 714b 	add.w	r1, r4, #812	@ 0x32c
 8001a64:	f001 f9be 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a68:	7923      	ldrb	r3, [r4, #4]
 8001a6a:	f7ff bbd1 	b.w	8001210 <HAL_PCD_IRQHandler+0x13c>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001a6e:	0699      	lsls	r1, r3, #26
 8001a70:	d572      	bpl.n	8001b58 <HAL_PCD_IRQHandler+0xa84>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a72:	2120      	movs	r1, #32
 8001a74:	6091      	str	r1, [r2, #8]
 8001a76:	e648      	b.n	800170a <HAL_PCD_IRQHandler+0x636>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a78:	2900      	cmp	r1, #0
 8001a7a:	f6bf ac77 	bge.w	800136c <HAL_PCD_IRQHandler+0x298>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001a7e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a80:	f884 21a3 	strb.w	r2, [r4, #419]	@ 0x1a3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001a84:	f504 71d0 	add.w	r1, r4, #416	@ 0x1a0
 8001a88:	f001 f9ac 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a8c:	7923      	ldrb	r3, [r4, #4]
 8001a8e:	e46d      	b.n	800136c <HAL_PCD_IRQHandler+0x298>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001a90:	6820      	ldr	r0, [r4, #0]
 8001a92:	f504 7154 	add.w	r1, r4, #848	@ 0x350
 8001a96:	f001 f9a5 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a9a:	7923      	ldrb	r3, [r4, #4]
 8001a9c:	f7ff bbbf 	b.w	800121e <HAL_PCD_IRQHandler+0x14a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aa0:	2900      	cmp	r1, #0
 8001aa2:	f6bf ac6c 	bge.w	800137e <HAL_PCD_IRQHandler+0x2aa>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001aa6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001aa8:	f884 21c7 	strb.w	r2, [r4, #455]	@ 0x1c7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001aac:	f504 71e2 	add.w	r1, r4, #452	@ 0x1c4
 8001ab0:	f001 f998 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ab4:	7923      	ldrb	r3, [r4, #4]
 8001ab6:	e462      	b.n	800137e <HAL_PCD_IRQHandler+0x2aa>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ab8:	6820      	ldr	r0, [r4, #0]
 8001aba:	f504 715d 	add.w	r1, r4, #884	@ 0x374
 8001abe:	f001 f991 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ac2:	7923      	ldrb	r3, [r4, #4]
 8001ac4:	f7ff bbb2 	b.w	800122c <HAL_PCD_IRQHandler+0x158>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ac8:	2900      	cmp	r1, #0
 8001aca:	f6bf ac61 	bge.w	8001390 <HAL_PCD_IRQHandler+0x2bc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ace:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ad0:	f884 21eb 	strb.w	r2, [r4, #491]	@ 0x1eb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ad4:	f504 71f4 	add.w	r1, r4, #488	@ 0x1e8
 8001ad8:	f001 f984 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001adc:	7923      	ldrb	r3, [r4, #4]
 8001ade:	e457      	b.n	8001390 <HAL_PCD_IRQHandler+0x2bc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ae0:	6820      	ldr	r0, [r4, #0]
 8001ae2:	f504 7166 	add.w	r1, r4, #920	@ 0x398
 8001ae6:	f001 f97d 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aea:	7923      	ldrb	r3, [r4, #4]
 8001aec:	f7ff bba5 	b.w	800123a <HAL_PCD_IRQHandler+0x166>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001af0:	2900      	cmp	r1, #0
 8001af2:	f6bf ac56 	bge.w	80013a2 <HAL_PCD_IRQHandler+0x2ce>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001af6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001af8:	f884 220f 	strb.w	r2, [r4, #527]	@ 0x20f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001afc:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8001b00:	f001 f970 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b04:	7923      	ldrb	r3, [r4, #4]
 8001b06:	e44c      	b.n	80013a2 <HAL_PCD_IRQHandler+0x2ce>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001b08:	6820      	ldr	r0, [r4, #0]
 8001b0a:	f504 716f 	add.w	r1, r4, #956	@ 0x3bc
 8001b0e:	f001 f969 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b12:	7923      	ldrb	r3, [r4, #4]
 8001b14:	f7ff bb98 	b.w	8001248 <HAL_PCD_IRQHandler+0x174>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b18:	2900      	cmp	r1, #0
 8001b1a:	f6bf ac4b 	bge.w	80013b4 <HAL_PCD_IRQHandler+0x2e0>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001b1e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b20:	f884 2233 	strb.w	r2, [r4, #563]	@ 0x233
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001b24:	f504 710c 	add.w	r1, r4, #560	@ 0x230
 8001b28:	f001 f95c 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b2c:	7923      	ldrb	r3, [r4, #4]
 8001b2e:	e441      	b.n	80013b4 <HAL_PCD_IRQHandler+0x2e0>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001b30:	6820      	ldr	r0, [r4, #0]
 8001b32:	f504 7178 	add.w	r1, r4, #992	@ 0x3e0
 8001b36:	f001 f955 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b3a:	7923      	ldrb	r3, [r4, #4]
 8001b3c:	f7ff bb8b 	b.w	8001256 <HAL_PCD_IRQHandler+0x182>
 8001b40:	4f54300a 	.word	0x4f54300a
 8001b44:	4f54310a 	.word	0x4f54310a
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001b48:	6820      	ldr	r0, [r4, #0]
 8001b4a:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 8001b4e:	f001 f949 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b52:	7923      	ldrb	r3, [r4, #4]
 8001b54:	f7ff bb86 	b.w	8001264 <HAL_PCD_IRQHandler+0x190>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001b58:	f013 0f28 	tst.w	r3, #40	@ 0x28
 8001b5c:	f47f add5 	bne.w	800170a <HAL_PCD_IRQHandler+0x636>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b60:	491b      	ldr	r1, [pc, #108]	@ (8001bd0 <HAL_PCD_IRQHandler+0xafc>)
 8001b62:	458e      	cmp	lr, r1
 8001b64:	d902      	bls.n	8001b6c <HAL_PCD_IRQHandler+0xa98>
 8001b66:	041b      	lsls	r3, r3, #16
 8001b68:	f53f aef7 	bmi.w	800195a <HAL_PCD_IRQHandler+0x886>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001b6c:	6911      	ldr	r1, [r2, #16]
 8001b6e:	f8db 2274 	ldr.w	r2, [fp, #628]	@ 0x274
 8001b72:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8001b76:	1a52      	subs	r2, r2, r1
 8001b78:	f8cb 2268 	str.w	r2, [fp, #616]	@ 0x268
        if (epnum == 0U)
 8001b7c:	f1ba 0f00 	cmp.w	sl, #0
 8001b80:	f47f ae85 	bne.w	800188e <HAL_PCD_IRQHandler+0x7ba>
          if (ep->xfer_len == 0U)
 8001b84:	f8d5 1264 	ldr.w	r1, [r5, #612]	@ 0x264
 8001b88:	b1d9      	cbz	r1, 8001bc2 <HAL_PCD_IRQHandler+0xaee>
            ep->xfer_buff += ep->xfer_count;
 8001b8a:	f8d5 1260 	ldr.w	r1, [r5, #608]	@ 0x260
 8001b8e:	4411      	add	r1, r2
 8001b90:	f8c5 1260 	str.w	r1, [r5, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001b94:	e67b      	b.n	800188e <HAL_PCD_IRQHandler+0x7ba>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001b96:	6820      	ldr	r0, [r4, #0]
 8001b98:	f504 6185 	add.w	r1, r4, #1064	@ 0x428
 8001b9c:	f001 f922 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ba0:	7923      	ldrb	r3, [r4, #4]
 8001ba2:	f7ff bb66 	b.w	8001272 <HAL_PCD_IRQHandler+0x19e>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001ba6:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8001baa:	4651      	mov	r1, sl
 8001bac:	f001 fa6e 	bl	800308c <USB_EP0_OutStart>
 8001bb0:	e66d      	b.n	800188e <HAL_PCD_IRQHandler+0x7ba>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001bb2:	6820      	ldr	r0, [r4, #0]
 8001bb4:	f204 414c 	addw	r1, r4, #1100	@ 0x44c
 8001bb8:	f001 f914 	bl	8002de4 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bbc:	7923      	ldrb	r3, [r4, #4]
 8001bbe:	f7ff bb5f 	b.w	8001280 <HAL_PCD_IRQHandler+0x1ac>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001bc2:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	f001 fa60 	bl	800308c <USB_EP0_OutStart>
 8001bcc:	e65f      	b.n	800188e <HAL_PCD_IRQHandler+0x7ba>
 8001bce:	bf00      	nop
 8001bd0:	4f54300a 	.word	0x4f54300a

08001bd4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001bd4:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8001bd8:	2a01      	cmp	r2, #1
 8001bda:	d00c      	beq.n	8001bf6 <HAL_PCD_SetAddress+0x22>
{
 8001bdc:	b510      	push	{r4, lr}
 8001bde:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001be0:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001be2:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8001be4:	f884 2494 	strb.w	r2, [r4, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001be8:	7461      	strb	r1, [r4, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bea:	f001 f9db 	bl	8002fa4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001bf4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001bf6:	2002      	movs	r0, #2
}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop

08001bfc <HAL_PCD_EP_Open>:
{
 8001bfc:	b510      	push	{r4, lr}
 8001bfe:	f001 0e0f 	and.w	lr, r1, #15
 8001c02:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8001c06:	0609      	lsls	r1, r1, #24
{
 8001c08:	4604      	mov	r4, r0
 8001c0a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8001c0e:	d424      	bmi.n	8001c5a <HAL_PCD_EP_Open+0x5e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c10:	f50c 7115 	add.w	r1, ip, #596	@ 0x254
 8001c14:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001c16:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8001c1a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001c1e:	f04f 0c00 	mov.w	ip, #0
 8001c22:	f880 c255 	strb.w	ip, [r0, #597]	@ 0x255
  ep->maxpacket = ep_mps;
 8001c26:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8001c28:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c2a:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8001c2e:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8001c30:	b10a      	cbz	r2, 8001c36 <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 8001c32:	f8a1 e01a 	strh.w	lr, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8001c36:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001c38:	bf04      	itt	eq
 8001c3a:	2300      	moveq	r3, #0
 8001c3c:	714b      	strbeq	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 8001c3e:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d015      	beq.n	8001c72 <HAL_PCD_EP_Open+0x76>
 8001c46:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c48:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001c4a:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c4e:	f000 fefb 	bl	8002a48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001c58:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c5a:	f10c 0114 	add.w	r1, ip, #20
 8001c5e:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001c60:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8001c64:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001c68:	f04f 0c01 	mov.w	ip, #1
 8001c6c:	f880 c015 	strb.w	ip, [r0, #21]
 8001c70:	e7d9      	b.n	8001c26 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8001c72:	2002      	movs	r0, #2
}
 8001c74:	bd10      	pop	{r4, pc}
 8001c76:	bf00      	nop

08001c78 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001c78:	f001 030f 	and.w	r3, r1, #15
 8001c7c:	f001 020f 	and.w	r2, r1, #15
{
 8001c80:	b510      	push	{r4, lr}
 8001c82:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001c86:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8001c88:	0609      	lsls	r1, r1, #24
    ep->is_in = 1U;
 8001c8a:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 8001c8e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001c92:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8001c96:	d415      	bmi.n	8001cc4 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c98:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001c9c:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8001c9e:	f04f 0c00 	mov.w	ip, #0
 8001ca2:	f880 c255 	strb.w	ip, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001ca8:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d014      	beq.n	8001cda <HAL_PCD_EP_Close+0x62>
 8001cb0:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cb2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001cb4:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cb8:	f000 ff0e 	bl	8002ad8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001cc2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc4:	3314      	adds	r3, #20
 8001cc6:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8001cc8:	f04f 0c01 	mov.w	ip, #1
 8001ccc:	f880 c015 	strb.w	ip, [r0, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd0:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001cd2:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d1ea      	bne.n	8001cb0 <HAL_PCD_EP_Close+0x38>
 8001cda:	2002      	movs	r0, #2
}
 8001cdc:	bd10      	pop	{r4, pc}
 8001cde:	bf00      	nop

08001ce0 <HAL_PCD_EP_Receive>:
{
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	f001 0e0f 	and.w	lr, r1, #15
  ep->xfer_buff = pBuf;
 8001ce6:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 8001cea:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
{
 8001cee:	4614      	mov	r4, r2
  ep->xfer_len = len;
 8001cf0:	f8cc 3264 	str.w	r3, [ip, #612]	@ 0x264
  ep->xfer_count = 0U;
 8001cf4:	2300      	movs	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf6:	f88c e254 	strb.w	lr, [ip, #596]	@ 0x254
  ep->xfer_buff = pBuf;
 8001cfa:	f8cc 2260 	str.w	r2, [ip, #608]	@ 0x260
  ep->xfer_count = 0U;
 8001cfe:	f8cc 3268 	str.w	r3, [ip, #616]	@ 0x268
  ep->is_in = 0U;
 8001d02:	f88c 3255 	strb.w	r3, [ip, #597]	@ 0x255
  if (hpcd->Init.dma_enable == 1U)
 8001d06:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d08:	2124      	movs	r1, #36	@ 0x24
 8001d0a:	fb01 010e 	mla	r1, r1, lr, r0
  if (hpcd->Init.dma_enable == 1U)
 8001d0e:	2a01      	cmp	r2, #1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d10:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->dma_addr = (uint32_t)pBuf;
 8001d14:	bf08      	it	eq
 8001d16:	f8cc 4270 	streq.w	r4, [ip, #624]	@ 0x270
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d1a:	6800      	ldr	r0, [r0, #0]
 8001d1c:	f000 ff3e 	bl	8002b9c <USB_EPStartXfer>
}
 8001d20:	2000      	movs	r0, #0
 8001d22:	bd10      	pop	{r4, pc}

08001d24 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d24:	f001 010f 	and.w	r1, r1, #15
 8001d28:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001d2c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8001d30:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop

08001d38 <HAL_PCD_EP_Transmit>:
{
 8001d38:	b510      	push	{r4, lr}
 8001d3a:	f001 0e0f 	and.w	lr, r1, #15
  ep->xfer_buff = pBuf;
 8001d3e:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 8001d42:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
{
 8001d46:	4614      	mov	r4, r2
  ep->xfer_len = len;
 8001d48:	f8cc 3024 	str.w	r3, [ip, #36]	@ 0x24
  ep->xfer_count = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  ep->is_in = 1U;
 8001d52:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d54:	f88c e014 	strb.w	lr, [ip, #20]
  ep->xfer_buff = pBuf;
 8001d58:	f8cc 2020 	str.w	r2, [ip, #32]
  ep->is_in = 1U;
 8001d5c:	f88c 3015 	strb.w	r3, [ip, #21]
  if (hpcd->Init.dma_enable == 1U)
 8001d60:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d62:	2124      	movs	r1, #36	@ 0x24
 8001d64:	fb01 010e 	mla	r1, r1, lr, r0
  if (hpcd->Init.dma_enable == 1U)
 8001d68:	429a      	cmp	r2, r3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d6a:	f101 0114 	add.w	r1, r1, #20
    ep->dma_addr = (uint32_t)pBuf;
 8001d6e:	bf08      	it	eq
 8001d70:	f8cc 4030 	streq.w	r4, [ip, #48]	@ 0x30
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d74:	6800      	ldr	r0, [r0, #0]
 8001d76:	f000 ff11 	bl	8002b9c <USB_EPStartXfer>
}
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	bd10      	pop	{r4, pc}
 8001d7e:	bf00      	nop

08001d80 <HAL_PCD_EP_SetStall>:
{
 8001d80:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d82:	7903      	ldrb	r3, [r0, #4]
 8001d84:	f001 050f 	and.w	r5, r1, #15
 8001d88:	42ab      	cmp	r3, r5
 8001d8a:	d332      	bcc.n	8001df2 <HAL_PCD_EP_SetStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8001d8c:	060b      	lsls	r3, r1, #24
 8001d8e:	4604      	mov	r4, r0
 8001d90:	d41c      	bmi.n	8001dcc <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8001d92:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8001d96:	2224      	movs	r2, #36	@ 0x24
 8001d98:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8001d9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8001da0:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 8001daa:	2301      	movs	r3, #1
 8001dac:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dae:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001db0:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d01a      	beq.n	8001dee <HAL_PCD_EP_SetStall+0x6e>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001db8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001dba:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dbe:	f001 f897 	bl	8002ef0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dc2:	b1c5      	cbz	r5, 8001df6 <HAL_PCD_EP_SetStall+0x76>
  __HAL_UNLOCK(hpcd);
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001dca:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8001dcc:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd0:	2124      	movs	r1, #36	@ 0x24
 8001dd2:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8001dd6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001dda:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ddc:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8001dde:	755a      	strb	r2, [r3, #21]
  ep->is_stall = 1U;
 8001de0:	2301      	movs	r3, #1
 8001de2:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de4:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001de6:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d1e4      	bne.n	8001db8 <HAL_PCD_EP_SetStall+0x38>
 8001dee:	2002      	movs	r0, #2
}
 8001df0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001df2:	2001      	movs	r0, #1
}
 8001df4:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001df6:	79a1      	ldrb	r1, [r4, #6]
 8001df8:	6820      	ldr	r0, [r4, #0]
 8001dfa:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001dfe:	f001 f945 	bl	800308c <USB_EP0_OutStart>
 8001e02:	e7df      	b.n	8001dc4 <HAL_PCD_EP_SetStall+0x44>

08001e04 <HAL_PCD_EP_ClrStall>:
{
 8001e04:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e06:	7903      	ldrb	r3, [r0, #4]
 8001e08:	f001 020f 	and.w	r2, r1, #15
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d32e      	bcc.n	8001e6e <HAL_PCD_EP_ClrStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8001e10:	4604      	mov	r4, r0
 8001e12:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 8001e16:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8001e1a:	0609      	lsls	r1, r1, #24
 8001e1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ep->is_in = 1U;
 8001e20:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 8001e24:	d416      	bmi.n	8001e54 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e26:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001e2a:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8001e2c:	2500      	movs	r5, #0
 8001e2e:	f880 5255 	strb.w	r5, [r0, #597]	@ 0x255
  ep->is_stall = 0U;
 8001e32:	2500      	movs	r5, #0
 8001e34:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e36:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001e38:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d014      	beq.n	8001e6a <HAL_PCD_EP_ClrStall+0x66>
 8001e40:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e42:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001e44:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e48:	f001 f880 	bl	8002f4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e4c:	f884 5494 	strb.w	r5, [r4, #1172]	@ 0x494
  return HAL_OK;
 8001e50:	4628      	mov	r0, r5
}
 8001e52:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e54:	3314      	adds	r3, #20
 8001e56:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8001e58:	2501      	movs	r5, #1
 8001e5a:	7545      	strb	r5, [r0, #21]
  ep->is_stall = 0U;
 8001e5c:	2500      	movs	r5, #0
 8001e5e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e60:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001e62:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d1ea      	bne.n	8001e40 <HAL_PCD_EP_ClrStall+0x3c>
 8001e6a:	2002      	movs	r0, #2
}
 8001e6c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001e6e:	2001      	movs	r0, #1
}
 8001e70:	bd38      	pop	{r3, r4, r5, pc}
 8001e72:	bf00      	nop

08001e74 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001e74:	6800      	ldr	r0, [r0, #0]

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001e76:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001e78:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  if (fifo == 0U)
 8001e7a:	b919      	cbnz	r1, 8001e84 <HAL_PCDEx_SetTxFiFo+0x10>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	6283      	str	r3, [r0, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8001e80:	2000      	movs	r0, #0
 8001e82:	4770      	bx	lr
{
 8001e84:	b430      	push	{r4, r5}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001e86:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8001e88:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001e8a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001e8e:	d06b      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001e90:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
    for (i = 0U; i < (fifo - 1U); i++)
 8001e94:	2901      	cmp	r1, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001e96:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001e9a:	d065      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001e9c:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    for (i = 0U; i < (fifo - 1U); i++)
 8001ea0:	2902      	cmp	r1, #2
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ea2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001ea6:	d05f      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ea8:	f8d0 410c 	ldr.w	r4, [r0, #268]	@ 0x10c
    for (i = 0U; i < (fifo - 1U); i++)
 8001eac:	2903      	cmp	r1, #3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001eae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001eb2:	d059      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001eb4:	f8d0 4110 	ldr.w	r4, [r0, #272]	@ 0x110
    for (i = 0U; i < (fifo - 1U); i++)
 8001eb8:	2904      	cmp	r1, #4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001eba:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001ebe:	d053      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ec0:	f8d0 4114 	ldr.w	r4, [r0, #276]	@ 0x114
    for (i = 0U; i < (fifo - 1U); i++)
 8001ec4:	2905      	cmp	r1, #5
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ec6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001eca:	d04d      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ecc:	f8d0 4118 	ldr.w	r4, [r0, #280]	@ 0x118
    for (i = 0U; i < (fifo - 1U); i++)
 8001ed0:	2906      	cmp	r1, #6
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ed2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001ed6:	d047      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ed8:	f8d0 411c 	ldr.w	r4, [r0, #284]	@ 0x11c
    for (i = 0U; i < (fifo - 1U); i++)
 8001edc:	2907      	cmp	r1, #7
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ede:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001ee2:	d041      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ee4:	f8d0 4120 	ldr.w	r4, [r0, #288]	@ 0x120
    for (i = 0U; i < (fifo - 1U); i++)
 8001ee8:	2908      	cmp	r1, #8
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001eea:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001eee:	d03b      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ef0:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
    for (i = 0U; i < (fifo - 1U); i++)
 8001ef4:	2909      	cmp	r1, #9
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ef6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001efa:	d035      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001efc:	f8d0 4128 	ldr.w	r4, [r0, #296]	@ 0x128
    for (i = 0U; i < (fifo - 1U); i++)
 8001f00:	290a      	cmp	r1, #10
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f02:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f06:	d02f      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f08:	f8d0 412c 	ldr.w	r4, [r0, #300]	@ 0x12c
    for (i = 0U; i < (fifo - 1U); i++)
 8001f0c:	290b      	cmp	r1, #11
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f0e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f12:	d029      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f14:	f8d0 4130 	ldr.w	r4, [r0, #304]	@ 0x130
    for (i = 0U; i < (fifo - 1U); i++)
 8001f18:	290c      	cmp	r1, #12
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f1a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f1e:	d023      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f20:	f8d0 4134 	ldr.w	r4, [r0, #308]	@ 0x134
    for (i = 0U; i < (fifo - 1U); i++)
 8001f24:	290d      	cmp	r1, #13
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f26:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f2a:	d01d      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f2c:	f8d0 4138 	ldr.w	r4, [r0, #312]	@ 0x138
    for (i = 0U; i < (fifo - 1U); i++)
 8001f30:	290e      	cmp	r1, #14
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f32:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f36:	d017      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f38:	f8d0 413c 	ldr.w	r4, [r0, #316]	@ 0x13c
    for (i = 0U; i < (fifo - 1U); i++)
 8001f3c:	290f      	cmp	r1, #15
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f3e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f42:	d011      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f44:	f8d0 4140 	ldr.w	r4, [r0, #320]	@ 0x140
    for (i = 0U; i < (fifo - 1U); i++)
 8001f48:	2910      	cmp	r1, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f4a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f4e:	d00b      	beq.n	8001f68 <HAL_PCDEx_SetTxFiFo+0xf4>
 8001f50:	2410      	movs	r4, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f52:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8001f56:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8001f5a:	3401      	adds	r4, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f5c:	f8dc 5004 	ldr.w	r5, [ip, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8001f60:	428c      	cmp	r4, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f62:	eb03 4315 	add.w	r3, r3, r5, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f66:	d3f4      	bcc.n	8001f52 <HAL_PCDEx_SetTxFiFo+0xde>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001f68:	3140      	adds	r1, #64	@ 0x40
 8001f6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001f6e:	431a      	orrs	r2, r3
}
 8001f70:	2000      	movs	r0, #0
 8001f72:	bc30      	pop	{r4, r5}
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001f74:	604a      	str	r2, [r1, #4]
}
 8001f76:	4770      	bx	lr

08001f78 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001f78:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8001f7a:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001f7c:	6259      	str	r1, [r3, #36]	@ 0x24
}
 8001f7e:	4770      	bx	lr

08001f80 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop

08001f84 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f84:	2800      	cmp	r0, #0
 8001f86:	f000 81d8 	beq.w	800233a <HAL_RCC_OscConfig+0x3b6>
{
 8001f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8e:	6803      	ldr	r3, [r0, #0]
 8001f90:	07dd      	lsls	r5, r3, #31
{
 8001f92:	b082      	sub	sp, #8
 8001f94:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f96:	d52f      	bpl.n	8001ff8 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f98:	499d      	ldr	r1, [pc, #628]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
 8001f9a:	688a      	ldr	r2, [r1, #8]
 8001f9c:	f002 020c 	and.w	r2, r2, #12
 8001fa0:	2a04      	cmp	r2, #4
 8001fa2:	f000 80ec 	beq.w	800217e <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa6:	688a      	ldr	r2, [r1, #8]
 8001fa8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fac:	2a08      	cmp	r2, #8
 8001fae:	f000 80e2 	beq.w	8002176 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb2:	6863      	ldr	r3, [r4, #4]
 8001fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb8:	f000 80eb 	beq.w	8002192 <HAL_RCC_OscConfig+0x20e>
 8001fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc0:	f000 8173 	beq.w	80022aa <HAL_RCC_OscConfig+0x326>
 8001fc4:	4d92      	ldr	r5, [pc, #584]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
 8001fc6:	682a      	ldr	r2, [r5, #0]
 8001fc8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001fcc:	602a      	str	r2, [r5, #0]
 8001fce:	682a      	ldr	r2, [r5, #0]
 8001fd0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001fd4:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 80e0 	bne.w	800219c <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fc04 	bl	80007e8 <HAL_GetTick>
 8001fe0:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	e005      	b.n	8001ff0 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7fe fc00 	bl	80007e8 <HAL_GetTick>
 8001fe8:	1b80      	subs	r0, r0, r6
 8001fea:	2864      	cmp	r0, #100	@ 0x64
 8001fec:	f200 8100 	bhi.w	80021f0 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff0:	682b      	ldr	r3, [r5, #0]
 8001ff2:	039f      	lsls	r7, r3, #14
 8001ff4:	d4f6      	bmi.n	8001fe4 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	079d      	lsls	r5, r3, #30
 8001ffa:	d528      	bpl.n	800204e <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ffc:	4a84      	ldr	r2, [pc, #528]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
 8001ffe:	6891      	ldr	r1, [r2, #8]
 8002000:	f011 0f0c 	tst.w	r1, #12
 8002004:	f000 809b 	beq.w	800213e <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002008:	6891      	ldr	r1, [r2, #8]
 800200a:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800200e:	2908      	cmp	r1, #8
 8002010:	f000 8091 	beq.w	8002136 <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002014:	68e3      	ldr	r3, [r4, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 810c 	beq.w	8002234 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800201c:	4b7d      	ldr	r3, [pc, #500]	@ (8002214 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201e:	4e7c      	ldr	r6, [pc, #496]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002024:	f7fe fbe0 	bl	80007e8 <HAL_GetTick>
 8002028:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202a:	e005      	b.n	8002038 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800202c:	f7fe fbdc 	bl	80007e8 <HAL_GetTick>
 8002030:	1b40      	subs	r0, r0, r5
 8002032:	2802      	cmp	r0, #2
 8002034:	f200 80dc 	bhi.w	80021f0 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	6833      	ldr	r3, [r6, #0]
 800203a:	079f      	lsls	r7, r3, #30
 800203c:	d5f6      	bpl.n	800202c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	6833      	ldr	r3, [r6, #0]
 8002040:	6922      	ldr	r2, [r4, #16]
 8002042:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002046:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800204a:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204c:	6823      	ldr	r3, [r4, #0]
 800204e:	071a      	lsls	r2, r3, #28
 8002050:	d45c      	bmi.n	800210c <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002052:	075d      	lsls	r5, r3, #29
 8002054:	d53a      	bpl.n	80020cc <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002056:	4a6e      	ldr	r2, [pc, #440]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
 8002058:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800205a:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 800205e:	f040 8088 	bne.w	8002172 <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206a:	6413      	str	r3, [r2, #64]	@ 0x40
 800206c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002076:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	4e67      	ldr	r6, [pc, #412]	@ (8002218 <HAL_RCC_OscConfig+0x294>)
 800207a:	6833      	ldr	r3, [r6, #0]
 800207c:	05d8      	lsls	r0, r3, #23
 800207e:	f140 80a7 	bpl.w	80021d0 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002082:	68a3      	ldr	r3, [r4, #8]
 8002084:	2b01      	cmp	r3, #1
 8002086:	f000 80b7 	beq.w	80021f8 <HAL_RCC_OscConfig+0x274>
 800208a:	2b05      	cmp	r3, #5
 800208c:	f000 811d 	beq.w	80022ca <HAL_RCC_OscConfig+0x346>
 8002090:	4e5f      	ldr	r6, [pc, #380]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
 8002092:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	6732      	str	r2, [r6, #112]	@ 0x70
 800209a:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 800209c:	f022 0204 	bic.w	r2, r2, #4
 80020a0:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 80ad 	bne.w	8002202 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7fe fb9e 	bl	80007e8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80020b0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b2:	e005      	b.n	80020c0 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b4:	f7fe fb98 	bl	80007e8 <HAL_GetTick>
 80020b8:	1bc0      	subs	r0, r0, r7
 80020ba:	4540      	cmp	r0, r8
 80020bc:	f200 8098 	bhi.w	80021f0 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80020c2:	079b      	lsls	r3, r3, #30
 80020c4:	d4f6      	bmi.n	80020b4 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c6:	2d00      	cmp	r5, #0
 80020c8:	f040 80f9 	bne.w	80022be <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020cc:	69a3      	ldr	r3, [r4, #24]
 80020ce:	b1cb      	cbz	r3, 8002104 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020d0:	4d4f      	ldr	r5, [pc, #316]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
 80020d2:	68aa      	ldr	r2, [r5, #8]
 80020d4:	f002 020c 	and.w	r2, r2, #12
 80020d8:	2a08      	cmp	r2, #8
 80020da:	f000 80bc 	beq.w	8002256 <HAL_RCC_OscConfig+0x2d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020de:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002214 <HAL_RCC_OscConfig+0x290>)
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e8:	f000 80f9 	beq.w	80022de <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7fe fb7c 	bl	80007e8 <HAL_GetTick>
 80020f0:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	e004      	b.n	80020fe <HAL_RCC_OscConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f4:	f7fe fb78 	bl	80007e8 <HAL_GetTick>
 80020f8:	1b00      	subs	r0, r0, r4
 80020fa:	2802      	cmp	r0, #2
 80020fc:	d878      	bhi.n	80021f0 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fe:	682b      	ldr	r3, [r5, #0]
 8002100:	019b      	lsls	r3, r3, #6
 8002102:	d4f7      	bmi.n	80020f4 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002104:	2000      	movs	r0, #0
}
 8002106:	b002      	add	sp, #8
 8002108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800210c:	6963      	ldr	r3, [r4, #20]
 800210e:	b1fb      	cbz	r3, 8002150 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8002110:	4b40      	ldr	r3, [pc, #256]	@ (8002214 <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	4e3f      	ldr	r6, [pc, #252]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8002114:	2201      	movs	r2, #1
 8002116:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800211a:	f7fe fb65 	bl	80007e8 <HAL_GetTick>
 800211e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002120:	e004      	b.n	800212c <HAL_RCC_OscConfig+0x1a8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002122:	f7fe fb61 	bl	80007e8 <HAL_GetTick>
 8002126:	1b40      	subs	r0, r0, r5
 8002128:	2802      	cmp	r0, #2
 800212a:	d861      	bhi.n	80021f0 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800212e:	079b      	lsls	r3, r3, #30
 8002130:	d5f7      	bpl.n	8002122 <HAL_RCC_OscConfig+0x19e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	e78d      	b.n	8002052 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002136:	6852      	ldr	r2, [r2, #4]
 8002138:	0251      	lsls	r1, r2, #9
 800213a:	f53f af6b 	bmi.w	8002014 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213e:	4a34      	ldr	r2, [pc, #208]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	0792      	lsls	r2, r2, #30
 8002144:	d538      	bpl.n	80021b8 <HAL_RCC_OscConfig+0x234>
 8002146:	68e2      	ldr	r2, [r4, #12]
 8002148:	2a01      	cmp	r2, #1
 800214a:	d035      	beq.n	80021b8 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 800214c:	2001      	movs	r0, #1
 800214e:	e7da      	b.n	8002106 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8002150:	4a30      	ldr	r2, [pc, #192]	@ (8002214 <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002152:	4e2f      	ldr	r6, [pc, #188]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8002154:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8002158:	f7fe fb46 	bl	80007e8 <HAL_GetTick>
 800215c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215e:	e004      	b.n	800216a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002160:	f7fe fb42 	bl	80007e8 <HAL_GetTick>
 8002164:	1b40      	subs	r0, r0, r5
 8002166:	2802      	cmp	r0, #2
 8002168:	d842      	bhi.n	80021f0 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216a:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800216c:	079f      	lsls	r7, r3, #30
 800216e:	d4f7      	bmi.n	8002160 <HAL_RCC_OscConfig+0x1dc>
 8002170:	e7df      	b.n	8002132 <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2500      	movs	r5, #0
 8002174:	e780      	b.n	8002078 <HAL_RCC_OscConfig+0xf4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002176:	684a      	ldr	r2, [r1, #4]
 8002178:	0251      	lsls	r1, r2, #9
 800217a:	f57f af1a 	bpl.w	8001fb2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217e:	4a24      	ldr	r2, [pc, #144]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	0392      	lsls	r2, r2, #14
 8002184:	f57f af38 	bpl.w	8001ff8 <HAL_RCC_OscConfig+0x74>
 8002188:	6862      	ldr	r2, [r4, #4]
 800218a:	2a00      	cmp	r2, #0
 800218c:	f47f af34 	bne.w	8001ff8 <HAL_RCC_OscConfig+0x74>
 8002190:	e7dc      	b.n	800214c <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002192:	4a1f      	ldr	r2, [pc, #124]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
 8002194:	6813      	ldr	r3, [r2, #0]
 8002196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800219c:	f7fe fb24 	bl	80007e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a0:	4e1b      	ldr	r6, [pc, #108]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80021a2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a4:	e004      	b.n	80021b0 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a6:	f7fe fb1f 	bl	80007e8 <HAL_GetTick>
 80021aa:	1b40      	subs	r0, r0, r5
 80021ac:	2864      	cmp	r0, #100	@ 0x64
 80021ae:	d81f      	bhi.n	80021f0 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b0:	6833      	ldr	r3, [r6, #0]
 80021b2:	039b      	lsls	r3, r3, #14
 80021b4:	d5f7      	bpl.n	80021a6 <HAL_RCC_OscConfig+0x222>
 80021b6:	e71e      	b.n	8001ff6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b8:	4915      	ldr	r1, [pc, #84]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
 80021ba:	6920      	ldr	r0, [r4, #16]
 80021bc:	680a      	ldr	r2, [r1, #0]
 80021be:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80021c2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80021c6:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c8:	071a      	lsls	r2, r3, #28
 80021ca:	f57f af42 	bpl.w	8002052 <HAL_RCC_OscConfig+0xce>
 80021ce:	e79d      	b.n	800210c <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d0:	6833      	ldr	r3, [r6, #0]
 80021d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80021d8:	f7fe fb06 	bl	80007e8 <HAL_GetTick>
 80021dc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021de:	6833      	ldr	r3, [r6, #0]
 80021e0:	05d9      	lsls	r1, r3, #23
 80021e2:	f53f af4e 	bmi.w	8002082 <HAL_RCC_OscConfig+0xfe>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e6:	f7fe faff 	bl	80007e8 <HAL_GetTick>
 80021ea:	1bc0      	subs	r0, r0, r7
 80021ec:	2802      	cmp	r0, #2
 80021ee:	d9f6      	bls.n	80021de <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 80021f0:	2003      	movs	r0, #3
}
 80021f2:	b002      	add	sp, #8
 80021f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f8:	4a05      	ldr	r2, [pc, #20]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
 80021fa:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002202:	f7fe faf1 	bl	80007e8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002206:	4f02      	ldr	r7, [pc, #8]	@ (8002210 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002208:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220e:	e00a      	b.n	8002226 <HAL_RCC_OscConfig+0x2a2>
 8002210:	40023800 	.word	0x40023800
 8002214:	42470000 	.word	0x42470000
 8002218:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221c:	f7fe fae4 	bl	80007e8 <HAL_GetTick>
 8002220:	1b80      	subs	r0, r0, r6
 8002222:	4540      	cmp	r0, r8
 8002224:	d8e4      	bhi.n	80021f0 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002226:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002228:	079a      	lsls	r2, r3, #30
 800222a:	d5f7      	bpl.n	800221c <HAL_RCC_OscConfig+0x298>
    if(pwrclkchanged == SET)
 800222c:	2d00      	cmp	r5, #0
 800222e:	f43f af4d 	beq.w	80020cc <HAL_RCC_OscConfig+0x148>
 8002232:	e044      	b.n	80022be <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8002234:	4a42      	ldr	r2, [pc, #264]	@ (8002340 <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002236:	4e43      	ldr	r6, [pc, #268]	@ (8002344 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8002238:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800223a:	f7fe fad5 	bl	80007e8 <HAL_GetTick>
 800223e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002240:	e004      	b.n	800224c <HAL_RCC_OscConfig+0x2c8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002242:	f7fe fad1 	bl	80007e8 <HAL_GetTick>
 8002246:	1b40      	subs	r0, r0, r5
 8002248:	2802      	cmp	r0, #2
 800224a:	d8d1      	bhi.n	80021f0 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224c:	6833      	ldr	r3, [r6, #0]
 800224e:	0799      	lsls	r1, r3, #30
 8002250:	d4f7      	bmi.n	8002242 <HAL_RCC_OscConfig+0x2be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	e6fb      	b.n	800204e <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002256:	2b01      	cmp	r3, #1
 8002258:	f43f af78 	beq.w	800214c <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 800225c:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800225e:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002260:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002264:	4291      	cmp	r1, r2
 8002266:	f47f af71 	bne.w	800214c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226a:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800226c:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002270:	4291      	cmp	r1, r2
 8002272:	f47f af6b 	bne.w	800214c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002276:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002278:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800227c:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800227e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002282:	f47f af63 	bne.w	800214c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002286:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002288:	0852      	lsrs	r2, r2, #1
 800228a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800228e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002290:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002294:	f47f af5a 	bne.w	800214c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002298:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800229a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800229e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80022a2:	bf14      	ite	ne
 80022a4:	2001      	movne	r0, #1
 80022a6:	2000      	moveq	r0, #0
 80022a8:	e72d      	b.n	8002106 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022aa:	4b26      	ldr	r3, [pc, #152]	@ (8002344 <HAL_RCC_OscConfig+0x3c0>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80022ba:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022bc:	e76e      	b.n	800219c <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022be:	4a21      	ldr	r2, [pc, #132]	@ (8002344 <HAL_RCC_OscConfig+0x3c0>)
 80022c0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80022c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c8:	e700      	b.n	80020cc <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002344 <HAL_RCC_OscConfig+0x3c0>)
 80022cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022ce:	f042 0204 	orr.w	r2, r2, #4
 80022d2:	671a      	str	r2, [r3, #112]	@ 0x70
 80022d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022dc:	e791      	b.n	8002202 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 80022de:	f7fe fa83 	bl	80007e8 <HAL_GetTick>
 80022e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e4:	e005      	b.n	80022f2 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e6:	f7fe fa7f 	bl	80007e8 <HAL_GetTick>
 80022ea:	1b80      	subs	r0, r0, r6
 80022ec:	2802      	cmp	r0, #2
 80022ee:	f63f af7f 	bhi.w	80021f0 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	682b      	ldr	r3, [r5, #0]
 80022f4:	0199      	lsls	r1, r3, #6
 80022f6:	d4f6      	bmi.n	80022e6 <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022f8:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80022fc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80022fe:	430b      	orrs	r3, r1
 8002300:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002304:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 8002308:	0852      	lsrs	r2, r2, #1
 800230a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800230e:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002310:	490b      	ldr	r1, [pc, #44]	@ (8002340 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002316:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002318:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800231a:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800231c:	f7fe fa64 	bl	80007e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002320:	4d08      	ldr	r5, [pc, #32]	@ (8002344 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8002322:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002324:	e005      	b.n	8002332 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002326:	f7fe fa5f 	bl	80007e8 <HAL_GetTick>
 800232a:	1b00      	subs	r0, r0, r4
 800232c:	2802      	cmp	r0, #2
 800232e:	f63f af5f 	bhi.w	80021f0 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	682b      	ldr	r3, [r5, #0]
 8002334:	019a      	lsls	r2, r3, #6
 8002336:	d5f6      	bpl.n	8002326 <HAL_RCC_OscConfig+0x3a2>
 8002338:	e6e4      	b.n	8002104 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 800233a:	2001      	movs	r0, #1
}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	42470000 	.word	0x42470000
 8002344:	40023800 	.word	0x40023800

08002348 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002348:	4910      	ldr	r1, [pc, #64]	@ (800238c <HAL_RCC_GetSysClockFreq+0x44>)
{
 800234a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800234c:	688b      	ldr	r3, [r1, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b08      	cmp	r3, #8
 8002354:	d001      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002356:	480e      	ldr	r0, [pc, #56]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002358:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800235a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800235c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235e:	6849      	ldr	r1, [r1, #4]
 8002360:	480b      	ldr	r0, [pc, #44]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x48>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002362:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002366:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800236a:	bf18      	it	ne
 800236c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800236e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002372:	fba1 0100 	umull	r0, r1, r1, r0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002376:	f7fd ff35 	bl	80001e4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800237a:	4b04      	ldr	r3, [pc, #16]	@ (800238c <HAL_RCC_GetSysClockFreq+0x44>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002382:	3301      	adds	r3, #1
 8002384:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002386:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800238a:	bd08      	pop	{r3, pc}
 800238c:	40023800 	.word	0x40023800
 8002390:	00f42400 	.word	0x00f42400

08002394 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002394:	2800      	cmp	r0, #0
 8002396:	f000 8087 	beq.w	80024a8 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800239a:	4a48      	ldr	r2, [pc, #288]	@ (80024bc <HAL_RCC_ClockConfig+0x128>)
 800239c:	6813      	ldr	r3, [r2, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	428b      	cmp	r3, r1
{
 80023a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023a8:	460d      	mov	r5, r1
 80023aa:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	d209      	bcs.n	80023c2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	b2cb      	uxtb	r3, r1
 80023b0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	6813      	ldr	r3, [r2, #0]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	428b      	cmp	r3, r1
 80023ba:	d002      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80023bc:	2001      	movs	r0, #1
}
 80023be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	0798      	lsls	r0, r3, #30
 80023c6:	d514      	bpl.n	80023f2 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	0759      	lsls	r1, r3, #29
 80023ca:	d504      	bpl.n	80023d6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023cc:	493c      	ldr	r1, [pc, #240]	@ (80024c0 <HAL_RCC_ClockConfig+0x12c>)
 80023ce:	688a      	ldr	r2, [r1, #8]
 80023d0:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80023d4:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d6:	071a      	lsls	r2, r3, #28
 80023d8:	d504      	bpl.n	80023e4 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023da:	4939      	ldr	r1, [pc, #228]	@ (80024c0 <HAL_RCC_ClockConfig+0x12c>)
 80023dc:	688a      	ldr	r2, [r1, #8]
 80023de:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80023e2:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e4:	4936      	ldr	r1, [pc, #216]	@ (80024c0 <HAL_RCC_ClockConfig+0x12c>)
 80023e6:	68a0      	ldr	r0, [r4, #8]
 80023e8:	688a      	ldr	r2, [r1, #8]
 80023ea:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80023ee:	4302      	orrs	r2, r0
 80023f0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f2:	07df      	lsls	r7, r3, #31
 80023f4:	d521      	bpl.n	800243a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	6862      	ldr	r2, [r4, #4]
 80023f8:	2a01      	cmp	r2, #1
 80023fa:	d057      	beq.n	80024ac <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fc:	1e93      	subs	r3, r2, #2
 80023fe:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002400:	4b2f      	ldr	r3, [pc, #188]	@ (80024c0 <HAL_RCC_ClockConfig+0x12c>)
 8002402:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002404:	d94d      	bls.n	80024a2 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002406:	0799      	lsls	r1, r3, #30
 8002408:	d5d8      	bpl.n	80023bc <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240a:	4e2d      	ldr	r6, [pc, #180]	@ (80024c0 <HAL_RCC_ClockConfig+0x12c>)
 800240c:	68b3      	ldr	r3, [r6, #8]
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	4313      	orrs	r3, r2
 8002414:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002416:	f7fe f9e7 	bl	80007e8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800241e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002420:	e004      	b.n	800242c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002422:	f7fe f9e1 	bl	80007e8 <HAL_GetTick>
 8002426:	1bc0      	subs	r0, r0, r7
 8002428:	4540      	cmp	r0, r8
 800242a:	d844      	bhi.n	80024b6 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242c:	68b3      	ldr	r3, [r6, #8]
 800242e:	6862      	ldr	r2, [r4, #4]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002438:	d1f3      	bne.n	8002422 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800243a:	4a20      	ldr	r2, [pc, #128]	@ (80024bc <HAL_RCC_ClockConfig+0x128>)
 800243c:	6813      	ldr	r3, [r2, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	42ab      	cmp	r3, r5
 8002444:	d906      	bls.n	8002454 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	b2eb      	uxtb	r3, r5
 8002448:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	6813      	ldr	r3, [r2, #0]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	42ab      	cmp	r3, r5
 8002452:	d1b3      	bne.n	80023bc <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	6823      	ldr	r3, [r4, #0]
 8002456:	075a      	lsls	r2, r3, #29
 8002458:	d506      	bpl.n	8002468 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800245a:	4919      	ldr	r1, [pc, #100]	@ (80024c0 <HAL_RCC_ClockConfig+0x12c>)
 800245c:	68e0      	ldr	r0, [r4, #12]
 800245e:	688a      	ldr	r2, [r1, #8]
 8002460:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8002464:	4302      	orrs	r2, r0
 8002466:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002468:	071b      	lsls	r3, r3, #28
 800246a:	d507      	bpl.n	800247c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800246c:	4a14      	ldr	r2, [pc, #80]	@ (80024c0 <HAL_RCC_ClockConfig+0x12c>)
 800246e:	6921      	ldr	r1, [r4, #16]
 8002470:	6893      	ldr	r3, [r2, #8]
 8002472:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002476:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800247a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800247c:	f7ff ff64 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002480:	4a0f      	ldr	r2, [pc, #60]	@ (80024c0 <HAL_RCC_ClockConfig+0x12c>)
 8002482:	4c10      	ldr	r4, [pc, #64]	@ (80024c4 <HAL_RCC_ClockConfig+0x130>)
 8002484:	6892      	ldr	r2, [r2, #8]
 8002486:	4910      	ldr	r1, [pc, #64]	@ (80024c8 <HAL_RCC_ClockConfig+0x134>)
 8002488:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800248c:	4603      	mov	r3, r0
 800248e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002490:	480e      	ldr	r0, [pc, #56]	@ (80024cc <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002492:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8002494:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002496:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002498:	f7fe f95c 	bl	8000754 <HAL_InitTick>
  return HAL_OK;
 800249c:	2000      	movs	r0, #0
}
 800249e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	0198      	lsls	r0, r3, #6
 80024a4:	d4b1      	bmi.n	800240a <HAL_RCC_ClockConfig+0x76>
 80024a6:	e789      	b.n	80023bc <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80024a8:	2001      	movs	r0, #1
}
 80024aa:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ac:	4b04      	ldr	r3, [pc, #16]	@ (80024c0 <HAL_RCC_ClockConfig+0x12c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	039e      	lsls	r6, r3, #14
 80024b2:	d4aa      	bmi.n	800240a <HAL_RCC_ClockConfig+0x76>
 80024b4:	e782      	b.n	80023bc <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80024b6:	2003      	movs	r0, #3
 80024b8:	e781      	b.n	80023be <HAL_RCC_ClockConfig+0x2a>
 80024ba:	bf00      	nop
 80024bc:	40023c00 	.word	0x40023c00
 80024c0:	40023800 	.word	0x40023800
 80024c4:	08004378 	.word	0x08004378
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000008 	.word	0x20000008

080024d0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80024d0:	4b01      	ldr	r3, [pc, #4]	@ (80024d8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000000 	.word	0x20000000

080024dc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024dc:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80024de:	4905      	ldr	r1, [pc, #20]	@ (80024f4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	4a05      	ldr	r2, [pc, #20]	@ (80024f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80024e4:	6808      	ldr	r0, [r1, #0]
 80024e6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
}
 80024ec:	40d8      	lsrs	r0, r3
 80024ee:	4770      	bx	lr
 80024f0:	40023800 	.word	0x40023800
 80024f4:	20000000 	.word	0x20000000
 80024f8:	08004370 	.word	0x08004370

080024fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80024fc:	b084      	sub	sp, #16
 80024fe:	b082      	sub	sp, #8
 8002500:	f10d 0c0c 	add.w	ip, sp, #12
 8002504:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002508:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800250c:	2a01      	cmp	r2, #1
{
 800250e:	4603      	mov	r3, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002510:	d12e      	bne.n	8002570 <USB_CoreInit+0x74>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002512:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8002514:	f89d 1018 	ldrb.w	r1, [sp, #24]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002518:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800251c:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800251e:	68c2      	ldr	r2, [r0, #12]
 8002520:	f422 0284 	bic.w	r2, r2, #4325376	@ 0x420000
 8002524:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002528:	60c2      	str	r2, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800252a:	68c2      	ldr	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800252c:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800252e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002532:	60c2      	str	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002534:	d061      	beq.n	80025fa <USB_CoreInit+0xfe>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 8002536:	2200      	movs	r2, #0
 8002538:	9200      	str	r2, [sp, #0]
 800253a:	e002      	b.n	8002542 <USB_CoreInit+0x46>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	2a00      	cmp	r2, #0
 8002540:	db30      	blt.n	80025a4 <USB_CoreInit+0xa8>
    count++;
 8002542:	9a00      	ldr	r2, [sp, #0]
 8002544:	3201      	adds	r2, #1
 8002546:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8002548:	9a00      	ldr	r2, [sp, #0]
 800254a:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 800254e:	d9f5      	bls.n	800253c <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 8002550:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 8002552:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8002556:	2a01      	cmp	r2, #1
 8002558:	d107      	bne.n	800256a <USB_CoreInit+0x6e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	f042 0206 	orr.w	r2, r2, #6
 8002560:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	f042 0220 	orr.w	r2, r2, #32
 8002568:	609a      	str	r2, [r3, #8]
}
 800256a:	b002      	add	sp, #8
 800256c:	b004      	add	sp, #16
 800256e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002570:	68c2      	ldr	r2, [r0, #12]
  __IO uint32_t count = 0U;
 8002572:	2100      	movs	r1, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002574:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002578:	60c2      	str	r2, [r0, #12]
  __IO uint32_t count = 0U;
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	e002      	b.n	8002584 <USB_CoreInit+0x88>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	2a00      	cmp	r2, #0
 8002582:	db27      	blt.n	80025d4 <USB_CoreInit+0xd8>
    count++;
 8002584:	9a01      	ldr	r2, [sp, #4]
 8002586:	3201      	adds	r2, #1
 8002588:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800258a:	9a01      	ldr	r2, [sp, #4]
 800258c:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8002590:	d9f5      	bls.n	800257e <USB_CoreInit+0x82>
      return HAL_TIMEOUT;
 8002592:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 8002594:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8002598:	b9ba      	cbnz	r2, 80025ca <USB_CoreInit+0xce>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800259a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800259c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80025a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80025a2:	e7d6      	b.n	8002552 <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 80025a4:	2200      	movs	r2, #0
 80025a6:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	611a      	str	r2, [r3, #16]
 80025b0:	e003      	b.n	80025ba <USB_CoreInit+0xbe>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80025b2:	6918      	ldr	r0, [r3, #16]
 80025b4:	f010 0001 	ands.w	r0, r0, #1
 80025b8:	d0cb      	beq.n	8002552 <USB_CoreInit+0x56>
    count++;
 80025ba:	9a00      	ldr	r2, [sp, #0]
 80025bc:	3201      	adds	r2, #1
 80025be:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 80025c0:	9a00      	ldr	r2, [sp, #0]
 80025c2:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 80025c6:	d9f4      	bls.n	80025b2 <USB_CoreInit+0xb6>
 80025c8:	e7c2      	b.n	8002550 <USB_CoreInit+0x54>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80025ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025cc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80025d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80025d2:	e7be      	b.n	8002552 <USB_CoreInit+0x56>
  count = 0U;
 80025d4:	2200      	movs	r2, #0
 80025d6:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	611a      	str	r2, [r3, #16]
 80025e0:	e003      	b.n	80025ea <USB_CoreInit+0xee>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80025e2:	6918      	ldr	r0, [r3, #16]
 80025e4:	f010 0001 	ands.w	r0, r0, #1
 80025e8:	d0d4      	beq.n	8002594 <USB_CoreInit+0x98>
    count++;
 80025ea:	9a01      	ldr	r2, [sp, #4]
 80025ec:	3201      	adds	r2, #1
 80025ee:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80025f0:	9a01      	ldr	r2, [sp, #4]
 80025f2:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 80025f6:	d9f4      	bls.n	80025e2 <USB_CoreInit+0xe6>
 80025f8:	e7cb      	b.n	8002592 <USB_CoreInit+0x96>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80025fa:	68c2      	ldr	r2, [r0, #12]
 80025fc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002600:	60c2      	str	r2, [r0, #12]
 8002602:	e798      	b.n	8002536 <USB_CoreInit+0x3a>

08002604 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8002604:	2a02      	cmp	r2, #2
{
 8002606:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8002608:	d00a      	beq.n	8002620 <USB_SetTurnaroundTime+0x1c>
 800260a:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 8002614:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	430a      	orrs	r2, r1
}
 800261a:	2000      	movs	r0, #0
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800261c:	60da      	str	r2, [r3, #12]
}
 800261e:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002620:	4a26      	ldr	r2, [pc, #152]	@ (80026bc <USB_SetTurnaroundTime+0xb8>)
 8002622:	4827      	ldr	r0, [pc, #156]	@ (80026c0 <USB_SetTurnaroundTime+0xbc>)
 8002624:	440a      	add	r2, r1
 8002626:	4282      	cmp	r2, r0
 8002628:	d932      	bls.n	8002690 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800262a:	4a26      	ldr	r2, [pc, #152]	@ (80026c4 <USB_SetTurnaroundTime+0xc0>)
 800262c:	4826      	ldr	r0, [pc, #152]	@ (80026c8 <USB_SetTurnaroundTime+0xc4>)
 800262e:	440a      	add	r2, r1
 8002630:	4282      	cmp	r2, r0
 8002632:	d930      	bls.n	8002696 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002634:	4825      	ldr	r0, [pc, #148]	@ (80026cc <USB_SetTurnaroundTime+0xc8>)
 8002636:	f5a1 0274 	sub.w	r2, r1, #15990784	@ 0xf40000
 800263a:	f5a2 5210 	sub.w	r2, r2, #9216	@ 0x2400
 800263e:	4282      	cmp	r2, r0
 8002640:	d92c      	bls.n	800269c <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002642:	4823      	ldr	r0, [pc, #140]	@ (80026d0 <USB_SetTurnaroundTime+0xcc>)
 8002644:	f1a1 7283 	sub.w	r2, r1, #17170432	@ 0x1060000
 8002648:	f5a2 42e7 	sub.w	r2, r2, #29568	@ 0x7380
 800264c:	4282      	cmp	r2, r0
 800264e:	d328      	bcc.n	80026a2 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002650:	4a20      	ldr	r2, [pc, #128]	@ (80026d4 <USB_SetTurnaroundTime+0xd0>)
 8002652:	4821      	ldr	r0, [pc, #132]	@ (80026d8 <USB_SetTurnaroundTime+0xd4>)
 8002654:	440a      	add	r2, r1
 8002656:	4282      	cmp	r2, r0
 8002658:	d926      	bls.n	80026a8 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800265a:	4a20      	ldr	r2, [pc, #128]	@ (80026dc <USB_SetTurnaroundTime+0xd8>)
 800265c:	4820      	ldr	r0, [pc, #128]	@ (80026e0 <USB_SetTurnaroundTime+0xdc>)
 800265e:	440a      	add	r2, r1
 8002660:	4282      	cmp	r2, r0
 8002662:	d324      	bcc.n	80026ae <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002664:	4a1f      	ldr	r2, [pc, #124]	@ (80026e4 <USB_SetTurnaroundTime+0xe0>)
 8002666:	4820      	ldr	r0, [pc, #128]	@ (80026e8 <USB_SetTurnaroundTime+0xe4>)
 8002668:	440a      	add	r2, r1
 800266a:	4282      	cmp	r2, r0
 800266c:	d3cd      	bcc.n	800260a <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800266e:	481f      	ldr	r0, [pc, #124]	@ (80026ec <USB_SetTurnaroundTime+0xe8>)
 8002670:	f1a1 72b7 	sub.w	r2, r1, #23986176	@ 0x16e0000
 8002674:	f5a2 5258 	sub.w	r2, r2, #13824	@ 0x3600
 8002678:	4282      	cmp	r2, r0
 800267a:	d31b      	bcc.n	80026b4 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800267c:	4a1c      	ldr	r2, [pc, #112]	@ (80026f0 <USB_SetTurnaroundTime+0xec>)
 800267e:	481d      	ldr	r0, [pc, #116]	@ (80026f4 <USB_SetTurnaroundTime+0xf0>)
 8002680:	440a      	add	r2, r1
 8002682:	4282      	cmp	r2, r0
 8002684:	bf2c      	ite	cs
 8002686:	f44f 51c0 	movcs.w	r1, #6144	@ 0x1800
 800268a:	f44f 51e0 	movcc.w	r1, #7168	@ 0x1c00
 800268e:	e7be      	b.n	800260e <USB_SetTurnaroundTime+0xa>
 8002690:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8002694:	e7bb      	b.n	800260e <USB_SetTurnaroundTime+0xa>
 8002696:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 800269a:	e7b8      	b.n	800260e <USB_SetTurnaroundTime+0xa>
 800269c:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 80026a0:	e7b5      	b.n	800260e <USB_SetTurnaroundTime+0xa>
 80026a2:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80026a6:	e7b2      	b.n	800260e <USB_SetTurnaroundTime+0xa>
 80026a8:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 80026ac:	e7af      	b.n	800260e <USB_SetTurnaroundTime+0xa>
 80026ae:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 80026b2:	e7ac      	b.n	800260e <USB_SetTurnaroundTime+0xa>
 80026b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026b8:	e7a9      	b.n	800260e <USB_SetTurnaroundTime+0xa>
 80026ba:	bf00      	nop
 80026bc:	ff275340 	.word	0xff275340
 80026c0:	000c34ff 	.word	0x000c34ff
 80026c4:	ff1b1e40 	.word	0xff1b1e40
 80026c8:	000f423f 	.word	0x000f423f
 80026cc:	00124f7f 	.word	0x00124f7f
 80026d0:	0013d620 	.word	0x0013d620
 80026d4:	fee5b660 	.word	0xfee5b660
 80026d8:	0016e35f 	.word	0x0016e35f
 80026dc:	feced300 	.word	0xfeced300
 80026e0:	001b7740 	.word	0x001b7740
 80026e4:	feb35bc0 	.word	0xfeb35bc0
 80026e8:	002191c0 	.word	0x002191c0
 80026ec:	00387520 	.word	0x00387520
 80026f0:	fe5954e0 	.word	0xfe5954e0
 80026f4:	00419ce0 	.word	0x00419ce0

080026f8 <USB_EnableGlobalInt>:
{
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	609a      	str	r2, [r3, #8]
}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop

08002708 <USB_DisableGlobalInt>:
{
 8002708:	4603      	mov	r3, r0
}
 800270a:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	609a      	str	r2, [r3, #8]
}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop

08002718 <USB_SetCurrentMode>:
{
 8002718:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800271a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800271c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800271e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
{
 8002722:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002724:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002726:	d018      	beq.n	800275a <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 8002728:	b9a9      	cbnz	r1, 8002756 <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800272a:	68c3      	ldr	r3, [r0, #12]
 800272c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  uint32_t ms = 0U;
 8002730:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002732:	60c3      	str	r3, [r0, #12]
 8002734:	e001      	b.n	800273a <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002736:	2cc8      	cmp	r4, #200	@ 0xc8
 8002738:	d00d      	beq.n	8002756 <USB_SetCurrentMode+0x3e>
      HAL_Delay(10U);
 800273a:	200a      	movs	r0, #10
 800273c:	f7fe f85a 	bl	80007f4 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8002740:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002742:	07db      	lsls	r3, r3, #31
      ms += 10U;
 8002744:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002748:	d4f5      	bmi.n	8002736 <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800274a:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 800274e:	fab0 f080 	clz	r0, r0
 8002752:	0940      	lsrs	r0, r0, #5
}
 8002754:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002756:	2001      	movs	r0, #1
}
 8002758:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800275a:	68c3      	ldr	r3, [r0, #12]
 800275c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  uint32_t ms = 0U;
 8002760:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002762:	60c3      	str	r3, [r0, #12]
 8002764:	e001      	b.n	800276a <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002766:	2cc8      	cmp	r4, #200	@ 0xc8
 8002768:	d0f5      	beq.n	8002756 <USB_SetCurrentMode+0x3e>
      HAL_Delay(10U);
 800276a:	200a      	movs	r0, #10
 800276c:	f7fe f842 	bl	80007f4 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8002770:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002772:	07da      	lsls	r2, r3, #31
      ms += 10U;
 8002774:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002778:	d5f5      	bpl.n	8002766 <USB_SetCurrentMode+0x4e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800277a:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 800277e:	fab0 f080 	clz	r0, r0
 8002782:	0940      	lsrs	r0, r0, #5
 8002784:	e7e6      	b.n	8002754 <USB_SetCurrentMode+0x3c>
 8002786:	bf00      	nop

08002788 <USB_DevInit>:
{
 8002788:	b084      	sub	sp, #16
 800278a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278c:	b083      	sub	sp, #12
 800278e:	ac09      	add	r4, sp, #36	@ 0x24
 8002790:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8002794:	f89d 402e 	ldrb.w	r4, [sp, #46]	@ 0x2e
 8002798:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
    USBx->DIEPTXF[i] = 0U;
 800279c:	2200      	movs	r2, #0
 800279e:	f8c0 2104 	str.w	r2, [r0, #260]	@ 0x104
{
 80027a2:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 80027a4:	f8c0 2108 	str.w	r2, [r0, #264]	@ 0x108
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80027a8:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
    USBx->DIEPTXF[i] = 0U;
 80027ac:	f8c0 210c 	str.w	r2, [r0, #268]	@ 0x10c
 80027b0:	f8c0 2110 	str.w	r2, [r0, #272]	@ 0x110
 80027b4:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
 80027b8:	f8c0 2118 	str.w	r2, [r0, #280]	@ 0x118
 80027bc:	f8c0 211c 	str.w	r2, [r0, #284]	@ 0x11c
 80027c0:	f8c0 2120 	str.w	r2, [r0, #288]	@ 0x120
 80027c4:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
 80027c8:	f8c0 2128 	str.w	r2, [r0, #296]	@ 0x128
 80027cc:	f8c0 212c 	str.w	r2, [r0, #300]	@ 0x12c
 80027d0:	f8c0 2130 	str.w	r2, [r0, #304]	@ 0x130
 80027d4:	f8c0 2134 	str.w	r2, [r0, #308]	@ 0x134
 80027d8:	f8c0 2138 	str.w	r2, [r0, #312]	@ 0x138
 80027dc:	f8c0 213c 	str.w	r2, [r0, #316]	@ 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 80027e0:	2c00      	cmp	r4, #0
 80027e2:	f040 80b8 	bne.w	8002956 <USB_DevInit+0x1ce>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80027e6:	f8de 2004 	ldr.w	r2, [lr, #4]
 80027ea:	f042 0202 	orr.w	r2, r2, #2
 80027ee:	f8ce 2004 	str.w	r2, [lr, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80027f2:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80027f4:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80027f8:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80027fa:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80027fc:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8002800:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002802:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8002804:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002808:	6382      	str	r2, [r0, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 800280a:	2200      	movs	r2, #0
 800280c:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002810:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8002814:	2a01      	cmp	r2, #1
 8002816:	f000 80ae 	beq.w	8002976 <USB_DevInit+0x1ee>
  USBx_DEVICE->DCFG |= speed;
 800281a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800281e:	f042 0203 	orr.w	r2, r2, #3
 8002822:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  __IO uint32_t count = 0U;
 8002826:	2200      	movs	r2, #0
 8002828:	9200      	str	r2, [sp, #0]
 800282a:	e003      	b.n	8002834 <USB_DevInit+0xac>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	2a00      	cmp	r2, #0
 8002830:	f2c0 80ba 	blt.w	80029a8 <USB_DevInit+0x220>
    count++;
 8002834:	9a00      	ldr	r2, [sp, #0]
 8002836:	3201      	adds	r2, #1
 8002838:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 800283a:	9a00      	ldr	r2, [sp, #0]
 800283c:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8002840:	d9f4      	bls.n	800282c <USB_DevInit+0xa4>
 8002842:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 8002844:	2200      	movs	r2, #0
 8002846:	9201      	str	r2, [sp, #4]
 8002848:	e003      	b.n	8002852 <USB_DevInit+0xca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	2a00      	cmp	r2, #0
 800284e:	f2c0 809a 	blt.w	8002986 <USB_DevInit+0x1fe>
    count++;
 8002852:	9a01      	ldr	r2, [sp, #4]
 8002854:	3201      	adds	r2, #1
 8002856:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002858:	9a01      	ldr	r2, [sp, #4]
 800285a:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 800285e:	d9f4      	bls.n	800284a <USB_DevInit+0xc2>
    ret = HAL_ERROR;
 8002860:	2001      	movs	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002862:	2100      	movs	r1, #0
 8002864:	f8ce 1010 	str.w	r1, [lr, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002868:	f8ce 1014 	str.w	r1, [lr, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800286c:	f8ce 101c 	str.w	r1, [lr, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002870:	b325      	cbz	r5, 80028bc <USB_DevInit+0x134>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002872:	f8d3 6900 	ldr.w	r6, [r3, #2304]	@ 0x900
 8002876:	2e00      	cmp	r6, #0
 8002878:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 800287c:	db18      	blt.n	80028b0 <USB_DevInit+0x128>
      USBx_INEP(i)->DIEPCTL = 0U;
 800287e:	2600      	movs	r6, #0
 8002880:	6016      	str	r6, [r2, #0]
 8002882:	468c      	mov	ip, r1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002884:	2700      	movs	r7, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002886:	f64f 367f 	movw	r6, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800288a:	f10c 0101 	add.w	r1, ip, #1
 800288e:	428d      	cmp	r5, r1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002890:	6117      	str	r7, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002892:	6096      	str	r6, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002894:	f102 0220 	add.w	r2, r2, #32
 8002898:	d03a      	beq.n	8002910 <USB_DevInit+0x188>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800289a:	f8d2 c000 	ldr.w	ip, [r2]
 800289e:	f1bc 0f00 	cmp.w	ip, #0
 80028a2:	daec      	bge.n	800287e <USB_DevInit+0xf6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80028a4:	f04f 4c90 	mov.w	ip, #1207959552	@ 0x48000000
 80028a8:	f8c2 c000 	str.w	ip, [r2]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80028ac:	468c      	mov	ip, r1
 80028ae:	e7ec      	b.n	800288a <USB_DevInit+0x102>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80028b0:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
 80028b4:	f8c3 6900 	str.w	r6, [r3, #2304]	@ 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80028b8:	468c      	mov	ip, r1
 80028ba:	e7e3      	b.n	8002884 <USB_DevInit+0xfc>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80028bc:	f8de 2010 	ldr.w	r2, [lr, #16]
 80028c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028c4:	f8ce 2010 	str.w	r2, [lr, #16]
  USBx->GINTMSK = 0U;
 80028c8:	2100      	movs	r1, #0
  if (cfg.dma_enable == 0U)
 80028ca:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
  USBx->GINTMSK = 0U;
 80028ce:	6199      	str	r1, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80028d0:	f06f 4180 	mvn.w	r1, #1073741824	@ 0x40000000
 80028d4:	6159      	str	r1, [r3, #20]
  if (cfg.dma_enable == 0U)
 80028d6:	b91a      	cbnz	r2, 80028e0 <USB_DevInit+0x158>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	f042 0210 	orr.w	r2, r2, #16
 80028de:	619a      	str	r2, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80028e0:	6999      	ldr	r1, [r3, #24]
 80028e2:	4a3e      	ldr	r2, [pc, #248]	@ (80029dc <USB_DevInit+0x254>)
 80028e4:	430a      	orrs	r2, r1
  if (cfg.Sof_enable != 0U)
 80028e6:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80028ea:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 80028ec:	b119      	cbz	r1, 80028f6 <USB_DevInit+0x16e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80028ee:	699a      	ldr	r2, [r3, #24]
 80028f0:	f042 0208 	orr.w	r2, r2, #8
 80028f4:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80028f6:	2c01      	cmp	r4, #1
 80028f8:	d105      	bne.n	8002906 <USB_DevInit+0x17e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80028fa:	699a      	ldr	r2, [r3, #24]
 80028fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002900:	f042 0204 	orr.w	r2, r2, #4
 8002904:	619a      	str	r2, [r3, #24]
}
 8002906:	b003      	add	sp, #12
 8002908:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800290c:	b004      	add	sp, #16
 800290e:	4770      	bx	lr
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002910:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8002914:	2900      	cmp	r1, #0
 8002916:	f503 6230 	add.w	r2, r3, #2816	@ 0xb00
 800291a:	db16      	blt.n	800294a <USB_DevInit+0x1c2>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800291c:	2500      	movs	r5, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800291e:	2100      	movs	r1, #0
 8002920:	6011      	str	r1, [r2, #0]
 8002922:	4629      	mov	r1, r5
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002924:	2700      	movs	r7, #0
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002926:	f64f 367f 	movw	r6, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800292a:	458c      	cmp	ip, r1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800292c:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800292e:	f101 0501 	add.w	r5, r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002932:	6096      	str	r6, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002934:	f102 0220 	add.w	r2, r2, #32
 8002938:	d0c0      	beq.n	80028bc <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800293a:	6811      	ldr	r1, [r2, #0]
 800293c:	2900      	cmp	r1, #0
 800293e:	daee      	bge.n	800291e <USB_DevInit+0x196>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002940:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8002944:	6011      	str	r1, [r2, #0]
 8002946:	4629      	mov	r1, r5
 8002948:	e7ef      	b.n	800292a <USB_DevInit+0x1a2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800294a:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800294e:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002952:	2100      	movs	r1, #0
 8002954:	e7e6      	b.n	8002924 <USB_DevInit+0x19c>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002956:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8002958:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800295c:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800295e:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8002960:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002964:	6382      	str	r2, [r0, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8002966:	2200      	movs	r2, #0
 8002968:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800296c:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8002970:	2a01      	cmp	r2, #1
 8002972:	f47f af52 	bne.w	800281a <USB_DevInit+0x92>
    if (cfg.speed == USBD_HS_SPEED)
 8002976:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 800297a:	bb42      	cbnz	r2, 80029ce <USB_DevInit+0x246>
  USBx_DEVICE->DCFG |= speed;
 800297c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8002980:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  return HAL_OK;
 8002984:	e74f      	b.n	8002826 <USB_DevInit+0x9e>
  count = 0U;
 8002986:	2200      	movs	r2, #0
 8002988:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800298a:	2210      	movs	r2, #16
 800298c:	611a      	str	r2, [r3, #16]
 800298e:	e003      	b.n	8002998 <USB_DevInit+0x210>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	06d2      	lsls	r2, r2, #27
 8002994:	f57f af65 	bpl.w	8002862 <USB_DevInit+0xda>
    count++;
 8002998:	9a01      	ldr	r2, [sp, #4]
 800299a:	3201      	adds	r2, #1
 800299c:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800299e:	9a01      	ldr	r2, [sp, #4]
 80029a0:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 80029a4:	d9f4      	bls.n	8002990 <USB_DevInit+0x208>
 80029a6:	e75b      	b.n	8002860 <USB_DevInit+0xd8>
  count = 0U;
 80029a8:	2200      	movs	r2, #0
 80029aa:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80029ac:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 80029b0:	611a      	str	r2, [r3, #16]
 80029b2:	e004      	b.n	80029be <USB_DevInit+0x236>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80029b4:	6918      	ldr	r0, [r3, #16]
 80029b6:	f010 0020 	ands.w	r0, r0, #32
 80029ba:	f43f af43 	beq.w	8002844 <USB_DevInit+0xbc>
    count++;
 80029be:	9a00      	ldr	r2, [sp, #0]
 80029c0:	3201      	adds	r2, #1
 80029c2:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 80029c4:	9a00      	ldr	r2, [sp, #0]
 80029c6:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 80029ca:	d9f3      	bls.n	80029b4 <USB_DevInit+0x22c>
 80029cc:	e739      	b.n	8002842 <USB_DevInit+0xba>
  USBx_DEVICE->DCFG |= speed;
 80029ce:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  return HAL_OK;
 80029da:	e724      	b.n	8002826 <USB_DevInit+0x9e>
 80029dc:	803c3800 	.word	0x803c3800

080029e0 <USB_FlushTxFifo>:
{
 80029e0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	e002      	b.n	80029ee <USB_FlushTxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80029e8:	6903      	ldr	r3, [r0, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	db09      	blt.n	8002a02 <USB_FlushTxFifo+0x22>
    count++;
 80029ee:	9b01      	ldr	r3, [sp, #4]
 80029f0:	3301      	adds	r3, #1
 80029f2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80029f4:	9b01      	ldr	r3, [sp, #4]
 80029f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80029fa:	d9f5      	bls.n	80029e8 <USB_FlushTxFifo+0x8>
      return HAL_TIMEOUT;
 80029fc:	2003      	movs	r0, #3
}
 80029fe:	b002      	add	sp, #8
 8002a00:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002a02:	0189      	lsls	r1, r1, #6
  count = 0U;
 8002a04:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002a06:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8002a0a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002a0c:	6101      	str	r1, [r0, #16]
 8002a0e:	e003      	b.n	8002a18 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002a10:	6903      	ldr	r3, [r0, #16]
 8002a12:	f013 0320 	ands.w	r3, r3, #32
 8002a16:	d007      	beq.n	8002a28 <USB_FlushTxFifo+0x48>
    count++;
 8002a18:	9b01      	ldr	r3, [sp, #4]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002a1e:	9b01      	ldr	r3, [sp, #4]
 8002a20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002a24:	d9f4      	bls.n	8002a10 <USB_FlushTxFifo+0x30>
 8002a26:	e7e9      	b.n	80029fc <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 8002a28:	4618      	mov	r0, r3
}
 8002a2a:	b002      	add	sp, #8
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop

08002a30 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002a30:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002a34:	f013 0006 	ands.w	r0, r3, #6
 8002a38:	d004      	beq.n	8002a44 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8002a3a:	f013 0f02 	tst.w	r3, #2
 8002a3e:	bf14      	ite	ne
 8002a40:	2002      	movne	r0, #2
 8002a42:	200f      	moveq	r0, #15
}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop

08002a48 <USB_ActivateEndpoint>:
{
 8002a48:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8002a4a:	780a      	ldrb	r2, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f002 0e0f 	and.w	lr, r2, #15
 8002a52:	fa03 f30e 	lsl.w	r3, r3, lr
  if (ep->is_in == 1U)
 8002a56:	f891 e001 	ldrb.w	lr, [r1, #1]
 8002a5a:	f1be 0f01 	cmp.w	lr, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002a5e:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002a62:	eb00 1042 	add.w	r0, r0, r2, lsl #5
  if (ep->is_in == 1U)
 8002a66:	d01a      	beq.n	8002a9e <USB_ActivateEndpoint+0x56>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002a68:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8002a6c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8002a70:	f8cc 301c 	str.w	r3, [ip, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002a74:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	d40e      	bmi.n	8002a9a <USB_ActivateEndpoint+0x52>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002a7c:	688b      	ldr	r3, [r1, #8]
 8002a7e:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
                                    ((uint32_t)ep->type << 18) |
 8002a82:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a88:	4323      	orrs	r3, r4
 8002a8a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8002a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a96:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002a9e:	f8dc 401c 	ldr.w	r4, [ip, #28]
 8002aa2:	4323      	orrs	r3, r4
 8002aa4:	f8cc 301c 	str.w	r3, [ip, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002aa8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002aac:	041c      	lsls	r4, r3, #16
 8002aae:	d4f4      	bmi.n	8002a9a <USB_ActivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002ab0:	688b      	ldr	r3, [r1, #8]
 8002ab2:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002ab6:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002ab8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002abc:	4323      	orrs	r3, r4
 8002abe:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8002ac2:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8002ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ace:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	bd10      	pop	{r4, pc}
 8002ad6:	bf00      	nop

08002ad8 <USB_DeactivateEndpoint>:
{
 8002ad8:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 8002ada:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8002adc:	7849      	ldrb	r1, [r1, #1]
 8002ade:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ae0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
  if (ep->is_in == 1U)
 8002ae4:	d02c      	beq.n	8002b40 <USB_DeactivateEndpoint+0x68>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ae6:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8002aea:	2900      	cmp	r1, #0
 8002aec:	db1b      	blt.n	8002b26 <USB_DeactivateEndpoint+0x4e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002aee:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8002af2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002af6:	f002 020f 	and.w	r2, r2, #15
 8002afa:	fa01 f202 	lsl.w	r2, r1, r2
 8002afe:	ea24 0402 	bic.w	r4, r4, r2
 8002b02:	f8c0 483c 	str.w	r4, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002b06:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002b0a:	4922      	ldr	r1, [pc, #136]	@ (8002b94 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002b0c:	ea24 0202 	bic.w	r2, r4, r2
 8002b10:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002b14:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
}
 8002b18:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002b1c:	4011      	ands	r1, r2
}
 8002b1e:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002b20:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
}
 8002b24:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b26:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8002b2a:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 8002b2e:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8002b32:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8002b36:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8002b3a:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
 8002b3e:	e7d6      	b.n	8002aee <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002b40:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8002b44:	2900      	cmp	r1, #0
 8002b46:	da0b      	bge.n	8002b60 <USB_DeactivateEndpoint+0x88>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002b48:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8002b4c:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 8002b50:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8002b54:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8002b58:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8002b5c:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002b60:	f8d0 183c 	ldr.w	r1, [r0, #2108]	@ 0x83c
 8002b64:	f002 040f 	and.w	r4, r2, #15
 8002b68:	2201      	movs	r2, #1
 8002b6a:	40a2      	lsls	r2, r4
 8002b6c:	ea21 0102 	bic.w	r1, r1, r2
 8002b70:	f8c0 183c 	str.w	r1, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002b74:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002b78:	4907      	ldr	r1, [pc, #28]	@ (8002b98 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002b7a:	ea24 0202 	bic.w	r2, r4, r2
 8002b7e:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002b82:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
}
 8002b86:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002b8a:	4011      	ands	r1, r2
}
 8002b8c:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002b8e:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
}
 8002b92:	4770      	bx	lr
 8002b94:	eff37800 	.word	0xeff37800
 8002b98:	ec337800 	.word	0xec337800

08002b9c <USB_EPStartXfer>:
{
 8002b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1U)
 8002ba0:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002ba2:	780e      	ldrb	r6, [r1, #0]
    if (ep->xfer_len == 0U)
 8002ba4:	690d      	ldr	r5, [r1, #16]
      if (ep->type == EP_TYPE_ISOC)
 8002ba6:	f891 e004 	ldrb.w	lr, [r1, #4]
  if (ep->is_in == 1U)
 8002baa:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002bac:	eb00 1346 	add.w	r3, r0, r6, lsl #5
  if (ep->is_in == 1U)
 8002bb0:	d05d      	beq.n	8002c6e <USB_EPStartXfer+0xd2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bb2:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	@ 0xb10
 8002bb6:	0ce4      	lsrs	r4, r4, #19
 8002bb8:	04e4      	lsls	r4, r4, #19
 8002bba:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002bbe:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	@ 0xb10
 8002bc2:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 8002bc6:	f424 14c0 	bic.w	r4, r4, #1572864	@ 0x180000
 8002bca:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bce:	f503 6c30 	add.w	ip, r3, #2816	@ 0xb00
        ep->xfer_len = ep->maxpacket;
 8002bd2:	688c      	ldr	r4, [r1, #8]
    if (epnum == 0U)
 8002bd4:	bb56      	cbnz	r6, 8002c2c <USB_EPStartXfer+0x90>
      if (ep->xfer_len > 0U)
 8002bd6:	b105      	cbz	r5, 8002bda <USB_EPStartXfer+0x3e>
        ep->xfer_len = ep->maxpacket;
 8002bd8:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8002bda:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002bdc:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8002be0:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002be4:	432c      	orrs	r4, r5
 8002be6:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002bea:	f8dc 4010 	ldr.w	r4, [ip, #16]
    if (dma == 1U)
 8002bee:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002bf0:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8002bf4:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8002bf8:	d033      	beq.n	8002c62 <USB_EPStartXfer+0xc6>
    if (ep->type == EP_TYPE_ISOC)
 8002bfa:	f1be 0f01 	cmp.w	lr, #1
 8002bfe:	d10c      	bne.n	8002c1a <USB_EPStartXfer+0x7e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002c00:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 8002c04:	f412 7f80 	tst.w	r2, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002c08:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002c0c:	bf0c      	ite	eq
 8002c0e:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002c12:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 8002c16:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002c1a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002c1e:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8002c22:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8002c26:	2000      	movs	r0, #0
 8002c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (ep->xfer_len == 0U)
 8002c2c:	2d00      	cmp	r5, #0
 8002c2e:	d0d5      	beq.n	8002bdc <USB_EPStartXfer+0x40>
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002c30:	4e6b      	ldr	r6, [pc, #428]	@ (8002de0 <USB_EPStartXfer+0x244>)
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002c32:	4425      	add	r5, r4
 8002c34:	3d01      	subs	r5, #1
 8002c36:	fbb5 f5f4 	udiv	r5, r5, r4
 8002c3a:	b2ad      	uxth	r5, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8002c3c:	fb05 f404 	mul.w	r4, r5, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002c40:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 8002c44:	f8dc 6010 	ldr.w	r6, [ip, #16]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8002c48:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002c4a:	4335      	orrs	r5, r6
 8002c4c:	f8cc 5010 	str.w	r5, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8002c50:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8002c54:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002c58:	432c      	orrs	r4, r5
    if (dma == 1U)
 8002c5a:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8002c5c:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8002c60:	d1cb      	bne.n	8002bfa <USB_EPStartXfer+0x5e>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002c62:	68ca      	ldr	r2, [r1, #12]
 8002c64:	2a00      	cmp	r2, #0
 8002c66:	d0c8      	beq.n	8002bfa <USB_EPStartXfer+0x5e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002c68:	f8cc 2014 	str.w	r2, [ip, #20]
 8002c6c:	e7c5      	b.n	8002bfa <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002c6e:	f503 6410 	add.w	r4, r3, #2304	@ 0x900
 8002c72:	6927      	ldr	r7, [r4, #16]
    if (ep->xfer_len == 0U)
 8002c74:	b3a5      	cbz	r5, 8002ce0 <USB_EPStartXfer+0x144>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002c76:	0cff      	lsrs	r7, r7, #19
 8002c78:	04ff      	lsls	r7, r7, #19
 8002c7a:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002c7c:	6927      	ldr	r7, [r4, #16]
        if (ep->xfer_len > ep->maxpacket)
 8002c7e:	f8d1 9008 	ldr.w	r9, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002c82:	f027 57ff 	bic.w	r7, r7, #534773760	@ 0x1fe00000
 8002c86:	f427 17c0 	bic.w	r7, r7, #1572864	@ 0x180000
 8002c8a:	6127      	str	r7, [r4, #16]
      if (epnum == 0U)
 8002c8c:	2e00      	cmp	r6, #0
 8002c8e:	d161      	bne.n	8002d54 <USB_EPStartXfer+0x1b8>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002c90:	6927      	ldr	r7, [r4, #16]
        if (ep->xfer_len > ep->maxpacket)
 8002c92:	454d      	cmp	r5, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002c94:	f447 2700 	orr.w	r7, r7, #524288	@ 0x80000
          ep->xfer_len = ep->maxpacket;
 8002c98:	bf84      	itt	hi
 8002c9a:	f8c1 9010 	strhi.w	r9, [r1, #16]
 8002c9e:	464d      	movhi	r5, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002ca0:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002ca2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8002ca6:	f3c5 0712 	ubfx	r7, r5, #0, #19
 8002caa:	ea47 070c 	orr.w	r7, r7, ip
      if (ep->type == EP_TYPE_ISOC)
 8002cae:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002cb2:	6127      	str	r7, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8002cb4:	d06c      	beq.n	8002d90 <USB_EPStartXfer+0x1f4>
    if (dma == 1U)
 8002cb6:	2a01      	cmp	r2, #1
 8002cb8:	f000 808c 	beq.w	8002dd4 <USB_EPStartXfer+0x238>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002cbc:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002cc0:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8002cc4:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        if (ep->xfer_len > 0U)
 8002cc8:	2d00      	cmp	r5, #0
 8002cca:	d0ac      	beq.n	8002c26 <USB_EPStartXfer+0x8a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002ccc:	f8d0 2834 	ldr.w	r2, [r0, #2100]	@ 0x834
 8002cd0:	f006 060f 	and.w	r6, r6, #15
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	40b3      	lsls	r3, r6
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8002cde:	e7a2      	b.n	8002c26 <USB_EPStartXfer+0x8a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002ce0:	f027 57ff 	bic.w	r7, r7, #534773760	@ 0x1fe00000
 8002ce4:	f427 17c0 	bic.w	r7, r7, #1572864	@ 0x180000
 8002ce8:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002cea:	6927      	ldr	r7, [r4, #16]
 8002cec:	f447 2700 	orr.w	r7, r7, #524288	@ 0x80000
 8002cf0:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002cf2:	6927      	ldr	r7, [r4, #16]
 8002cf4:	0cff      	lsrs	r7, r7, #19
 8002cf6:	04ff      	lsls	r7, r7, #19
    if (dma == 1U)
 8002cf8:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002cfa:	6127      	str	r7, [r4, #16]
    if (dma == 1U)
 8002cfc:	d039      	beq.n	8002d72 <USB_EPStartXfer+0x1d6>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002cfe:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002d02:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002d06:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 8002d0a:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002d0e:	d18a      	bne.n	8002c26 <USB_EPStartXfer+0x8a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002d10:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
 8002d14:	f414 7f80 	tst.w	r4, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002d18:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8002d1c:	bf0c      	ite	eq
 8002d1e:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002d22:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
 8002d26:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
  if (dma == 0U)
 8002d2a:	2a00      	cmp	r2, #0
 8002d2c:	f47f af7b 	bne.w	8002c26 <USB_EPStartXfer+0x8a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002d30:	b2ad      	uxth	r5, r5
 8002d32:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 8002d34:	08ad      	lsrs	r5, r5, #2
 8002d36:	f43f af76 	beq.w	8002c26 <USB_EPStartXfer+0x8a>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002d3a:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002d3c:	eb00 3606 	add.w	r6, r0, r6, lsl #12
 8002d40:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8002d44:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8002d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d4c:	6032      	str	r2, [r6, #0]
    for (i = 0U; i < count32b; i++)
 8002d4e:	4299      	cmp	r1, r3
 8002d50:	d1fa      	bne.n	8002d48 <USB_EPStartXfer+0x1ac>
 8002d52:	e768      	b.n	8002c26 <USB_EPStartXfer+0x8a>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8002d54:	4f22      	ldr	r7, [pc, #136]	@ (8002de0 <USB_EPStartXfer+0x244>)
 8002d56:	f8d4 8010 	ldr.w	r8, [r4, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002d5a:	eb05 0c09 	add.w	ip, r5, r9
 8002d5e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8002d62:	fbbc fcf9 	udiv	ip, ip, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8002d66:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 8002d6a:	ea47 0708 	orr.w	r7, r7, r8
 8002d6e:	6127      	str	r7, [r4, #16]
 8002d70:	e797      	b.n	8002ca2 <USB_EPStartXfer+0x106>
      if ((uint32_t)ep->dma_addr != 0U)
 8002d72:	69ca      	ldr	r2, [r1, #28]
 8002d74:	b102      	cbz	r2, 8002d78 <USB_EPStartXfer+0x1dc>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002d76:	6162      	str	r2, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 8002d78:	f1be 0f01 	cmp.w	lr, #1
 8002d7c:	d01c      	beq.n	8002db8 <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002d7e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002d82:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8002d86:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002d90:	6927      	ldr	r7, [r4, #16]
 8002d92:	f027 47c0 	bic.w	r7, r7, #1610612736	@ 0x60000000
 8002d96:	6127      	str	r7, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002d98:	6927      	ldr	r7, [r4, #16]
    if (dma == 1U)
 8002d9a:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002d9c:	f047 5700 	orr.w	r7, r7, #536870912	@ 0x20000000
 8002da0:	6127      	str	r7, [r4, #16]
    if (dma == 1U)
 8002da2:	d006      	beq.n	8002db2 <USB_EPStartXfer+0x216>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002da4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8002da8:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 8002dac:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002db0:	e7ae      	b.n	8002d10 <USB_EPStartXfer+0x174>
      if ((uint32_t)ep->dma_addr != 0U)
 8002db2:	69ca      	ldr	r2, [r1, #28]
 8002db4:	b102      	cbz	r2, 8002db8 <USB_EPStartXfer+0x21c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002db6:	6162      	str	r2, [r4, #20]
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002db8:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 8002dbc:	f412 7f80 	tst.w	r2, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002dc0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002dc4:	bf0c      	ite	eq
 8002dc6:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002dca:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 8002dce:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8002dd2:	e7d4      	b.n	8002d7e <USB_EPStartXfer+0x1e2>
      if ((uint32_t)ep->dma_addr != 0U)
 8002dd4:	69ca      	ldr	r2, [r1, #28]
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d0d1      	beq.n	8002d7e <USB_EPStartXfer+0x1e2>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002dda:	6162      	str	r2, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 8002ddc:	e7cf      	b.n	8002d7e <USB_EPStartXfer+0x1e2>
 8002dde:	bf00      	nop
 8002de0:	1ff80000 	.word	0x1ff80000

08002de4 <USB_EPStopXfer>:
{
 8002de4:	b410      	push	{r4}
  if (ep->is_in == 1U)
 8002de6:	784a      	ldrb	r2, [r1, #1]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002de8:	780b      	ldrb	r3, [r1, #0]
{
 8002dea:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8002dec:	2100      	movs	r1, #0
  if (ep->is_in == 1U)
 8002dee:	2a01      	cmp	r2, #1
  __IO uint32_t count = 0U;
 8002df0:	9101      	str	r1, [sp, #4]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002df2:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 8002df6:	d023      	beq.n	8002e40 <USB_EPStopXfer+0x5c>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002df8:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
 8002dfc:	18c2      	adds	r2, r0, r3
 8002dfe:	58c1      	ldr	r1, [r0, r3]
 8002e00:	2900      	cmp	r1, #0
 8002e02:	db04      	blt.n	8002e0e <USB_EPStopXfer+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;
 8002e04:	2000      	movs	r0, #0
}
 8002e06:	b003      	add	sp, #12
 8002e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e0c:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8002e0e:	58c4      	ldr	r4, [r0, r3]
 8002e10:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8002e14:	50c4      	str	r4, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8002e16:	58c4      	ldr	r4, [r0, r3]
 8002e18:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8002e1c:	50c4      	str	r4, [r0, r3]
        if (count > 10000U)
 8002e1e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002e22:	e002      	b.n	8002e2a <USB_EPStopXfer+0x46>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8002e24:	6813      	ldr	r3, [r2, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	daec      	bge.n	8002e04 <USB_EPStopXfer+0x20>
        count++;
 8002e2a:	9b01      	ldr	r3, [sp, #4]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8002e30:	9b01      	ldr	r3, [sp, #4]
 8002e32:	428b      	cmp	r3, r1
 8002e34:	d9f6      	bls.n	8002e24 <USB_EPStopXfer+0x40>
          ret = HAL_ERROR;
 8002e36:	2001      	movs	r0, #1
}
 8002e38:	b003      	add	sp, #12
 8002e3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e3e:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e40:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8002e44:	18c2      	adds	r2, r0, r3
 8002e46:	58c1      	ldr	r1, [r0, r3]
 8002e48:	2900      	cmp	r1, #0
 8002e4a:	dadb      	bge.n	8002e04 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8002e4c:	58c4      	ldr	r4, [r0, r3]
 8002e4e:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8002e52:	50c4      	str	r4, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8002e54:	58c4      	ldr	r4, [r0, r3]
 8002e56:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8002e5a:	50c4      	str	r4, [r0, r3]
        if (count > 10000U)
 8002e5c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002e60:	e002      	b.n	8002e68 <USB_EPStopXfer+0x84>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8002e62:	6813      	ldr	r3, [r2, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	dacd      	bge.n	8002e04 <USB_EPStopXfer+0x20>
        count++;
 8002e68:	9b01      	ldr	r3, [sp, #4]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8002e6e:	9b01      	ldr	r3, [sp, #4]
 8002e70:	428b      	cmp	r3, r1
 8002e72:	d9f6      	bls.n	8002e62 <USB_EPStopXfer+0x7e>
 8002e74:	e7df      	b.n	8002e36 <USB_EPStopXfer+0x52>
 8002e76:	bf00      	nop

08002e78 <USB_WritePacket>:
{
 8002e78:	b410      	push	{r4}
 8002e7a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8002e7e:	b964      	cbnz	r4, 8002e9a <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002e80:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	d009      	beq.n	8002e9a <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002e86:	3201      	adds	r2, #1
 8002e88:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002e8c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8002e90:	f851 2b04 	ldr.w	r2, [r1], #4
 8002e94:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8002e96:	428b      	cmp	r3, r1
 8002e98:	d1fa      	bne.n	8002e90 <USB_WritePacket+0x18>
}
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop

08002ea4 <USB_ReadPacket>:
{
 8002ea4:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 8002ea6:	ea5f 0e92 	movs.w	lr, r2, lsr #2
{
 8002eaa:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8002eac:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8002eb0:	d01c      	beq.n	8002eec <USB_ReadPacket+0x48>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002eb2:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
  uint8_t *pDest = dest;
 8002eb6:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 8002ec2:	459e      	cmp	lr, r3
 8002ec4:	d1f9      	bne.n	8002eba <USB_ReadPacket+0x16>
    pDest++;
 8002ec6:	eb01 008e 	add.w	r0, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 8002eca:	b176      	cbz	r6, 8002eea <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002ecc:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
    } while (remaining_bytes != 0U);
 8002ed0:	2e01      	cmp	r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002ed2:	682b      	ldr	r3, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002ed4:	7003      	strb	r3, [r0, #0]
    } while (remaining_bytes != 0U);
 8002ed6:	d007      	beq.n	8002ee8 <USB_ReadPacket+0x44>
 8002ed8:	2e02      	cmp	r6, #2
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002eda:	ea4f 2213 	mov.w	r2, r3, lsr #8
 8002ede:	bf18      	it	ne
 8002ee0:	0c1b      	lsrne	r3, r3, #16
 8002ee2:	7042      	strb	r2, [r0, #1]
 8002ee4:	bf18      	it	ne
 8002ee6:	7083      	strbne	r3, [r0, #2]
      pDest++;
 8002ee8:	4430      	add	r0, r6
}
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8002eec:	4608      	mov	r0, r1
 8002eee:	e7ec      	b.n	8002eca <USB_ReadPacket+0x26>

08002ef0 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8002ef0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002ef2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002ef4:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002ef6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8002efa:	d00c      	beq.n	8002f16 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002efc:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8002f00:	2a00      	cmp	r2, #0
 8002f02:	db00      	blt.n	8002f06 <USB_EPSetStall+0x16>
 8002f04:	b9d3      	cbnz	r3, 8002f3c <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002f06:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002f0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f0e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8002f12:	2000      	movs	r0, #0
 8002f14:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002f16:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8002f1a:	2a00      	cmp	r2, #0
 8002f1c:	db06      	blt.n	8002f2c <USB_EPSetStall+0x3c>
 8002f1e:	b12b      	cbz	r3, 8002f2c <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002f20:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002f24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f28:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002f2c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002f30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f34:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8002f38:	2000      	movs	r0, #0
 8002f3a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002f3c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002f40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f44:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8002f48:	e7dd      	b.n	8002f06 <USB_EPSetStall+0x16>
 8002f4a:	bf00      	nop

08002f4c <USB_EPClearStall>:
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002f4c:	790b      	ldrb	r3, [r1, #4]
  if (ep->is_in == 1U)
 8002f4e:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f50:	f891 c000 	ldrb.w	ip, [r1]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002f54:	3b02      	subs	r3, #2
  if (ep->is_in == 1U)
 8002f56:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f58:	eb00 104c 	add.w	r0, r0, ip, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002f5c:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 8002f5e:	d011      	beq.n	8002f84 <USB_EPClearStall+0x38>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f60:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002f64:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f66:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002f6a:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002f6e:	d901      	bls.n	8002f74 <USB_EPClearStall+0x28>
}
 8002f70:	2000      	movs	r0, #0
 8002f72:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002f74:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8002f80:	2000      	movs	r0, #0
 8002f82:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f84:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002f88:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f8a:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002f8e:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002f92:	d8ed      	bhi.n	8002f70 <USB_EPClearStall+0x24>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002f94:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f9c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	4770      	bx	lr

08002fa4 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002fa4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8002fa8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002fac:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002fb0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8002fb4:	0109      	lsls	r1, r1, #4
 8002fb6:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8002fba:	4319      	orrs	r1, r3
 8002fbc:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	4770      	bx	lr

08002fc4 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002fc4:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 8002fc8:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002fca:	f022 0203 	bic.w	r2, r2, #3
 8002fce:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002fd2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002fd6:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8002fda:	f023 0302 	bic.w	r3, r3, #2
}
 8002fde:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002fe0:	604b      	str	r3, [r1, #4]
}
 8002fe2:	4770      	bx	lr

08002fe4 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002fe4:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 8002fe8:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002fea:	f022 0203 	bic.w	r2, r2, #3
 8002fee:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ff2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002ff6:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8002ffa:	f043 0302 	orr.w	r3, r3, #2
}
 8002ffe:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003000:	604b      	str	r3, [r1, #4]
}
 8003002:	4770      	bx	lr

08003004 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003004:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003006:	6980      	ldr	r0, [r0, #24]
}
 8003008:	4010      	ands	r0, r2
 800300a:	4770      	bx	lr

0800300c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800300c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003010:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003014:	69c0      	ldr	r0, [r0, #28]
 8003016:	4018      	ands	r0, r3
}
 8003018:	0c00      	lsrs	r0, r0, #16
 800301a:	4770      	bx	lr

0800301c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800301c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003020:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003024:	69c0      	ldr	r0, [r0, #28]
 8003026:	4018      	ands	r0, r3
}
 8003028:	b280      	uxth	r0, r0
 800302a:	4770      	bx	lr

0800302c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800302c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003030:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003034:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003038:	6940      	ldr	r0, [r0, #20]
}
 800303a:	4010      	ands	r0, r2
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop

08003040 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8003040:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003044:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003048:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800304c:	f001 010f 	and.w	r1, r1, #15
 8003050:	40cb      	lsrs	r3, r1
 8003052:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003054:	f8d0 0908 	ldr.w	r0, [r0, #2312]	@ 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003058:	b2db      	uxtb	r3, r3
 800305a:	4313      	orrs	r3, r2
}
 800305c:	4018      	ands	r0, r3
 800305e:	4770      	bx	lr

08003060 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003060:	6940      	ldr	r0, [r0, #20]
}
 8003062:	f000 0001 	and.w	r0, r0, #1
 8003066:	4770      	bx	lr

08003068 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003068:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
{
 800306c:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800306e:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 8003072:	f022 0207 	bic.w	r2, r2, #7
 8003076:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800307a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800307e:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8003082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
}
 8003086:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003088:	604b      	str	r3, [r1, #4]
}
 800308a:	4770      	bx	lr

0800308c <USB_EP0_OutStart>:
{
 800308c:	b430      	push	{r4, r5}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800308e:	6c05      	ldr	r5, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003090:	4c11      	ldr	r4, [pc, #68]	@ (80030d8 <USB_EP0_OutStart+0x4c>)
 8003092:	42a5      	cmp	r5, r4
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003094:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003098:	d903      	bls.n	80030a2 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800309a:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
 800309e:	2c00      	cmp	r4, #0
 80030a0:	db16      	blt.n	80030d0 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80030a2:	2400      	movs	r4, #0
 80030a4:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80030a6:	691c      	ldr	r4, [r3, #16]
 80030a8:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80030ac:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80030ae:	691c      	ldr	r4, [r3, #16]
 80030b0:	f044 0418 	orr.w	r4, r4, #24
 80030b4:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80030b6:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 80030b8:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80030ba:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 80030be:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 80030c0:	d106      	bne.n	80030d0 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80030c2:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80030c4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80030c8:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80030cc:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 80030d0:	2000      	movs	r0, #0
 80030d2:	bc30      	pop	{r4, r5}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	4f54300a 	.word	0x4f54300a

080030dc <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80030dc:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80030e0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 80030e4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80030e6:	f8d0 42c0 	ldr.w	r4, [r0, #704]	@ 0x2c0

  if (hcdc == NULL)
 80030ea:	b184      	cbz	r4, 800310e <USBD_CDC_EP0_RxReady+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80030ec:	f8d0 32c4 	ldr.w	r3, [r0, #708]	@ 0x2c4
 80030f0:	b15b      	cbz	r3, 800310a <USBD_CDC_EP0_RxReady+0x2e>
 80030f2:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 80030f6:	28ff      	cmp	r0, #255	@ 0xff
 80030f8:	d007      	beq.n	800310a <USBD_CDC_EP0_RxReady+0x2e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8003100:	4621      	mov	r1, r4
 8003102:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003104:	23ff      	movs	r3, #255	@ 0xff
 8003106:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800310a:	2000      	movs	r0, #0
}
 800310c:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800310e:	2003      	movs	r0, #3
}
 8003110:	bd10      	pop	{r4, pc}
 8003112:	bf00      	nop

08003114 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8003114:	230a      	movs	r3, #10
 8003116:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8003118:	4800      	ldr	r0, [pc, #0]	@ (800311c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800311a:	4770      	bx	lr
 800311c:	20000088 	.word	0x20000088

08003120 <USBD_CDC_GetFSCfgDesc>:
{
 8003120:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8003122:	2182      	movs	r1, #130	@ 0x82
{
 8003124:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8003126:	480f      	ldr	r0, [pc, #60]	@ (8003164 <USBD_CDC_GetFSCfgDesc+0x44>)
 8003128:	f000 fbb8 	bl	800389c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800312c:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800312e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003130:	480c      	ldr	r0, [pc, #48]	@ (8003164 <USBD_CDC_GetFSCfgDesc+0x44>)
 8003132:	f000 fbb3 	bl	800389c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8003136:	2181      	movs	r1, #129	@ 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003138:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800313a:	480a      	ldr	r0, [pc, #40]	@ (8003164 <USBD_CDC_GetFSCfgDesc+0x44>)
 800313c:	f000 fbae 	bl	800389c <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8003140:	b10d      	cbz	r5, 8003146 <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8003142:	2210      	movs	r2, #16
 8003144:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8003146:	b11c      	cbz	r4, 8003150 <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8003148:	2200      	movs	r2, #0
 800314a:	2140      	movs	r1, #64	@ 0x40
 800314c:	7121      	strb	r1, [r4, #4]
 800314e:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8003150:	b118      	cbz	r0, 800315a <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8003152:	2200      	movs	r2, #0
 8003154:	2140      	movs	r1, #64	@ 0x40
 8003156:	7101      	strb	r1, [r0, #4]
 8003158:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800315a:	2343      	movs	r3, #67	@ 0x43
}
 800315c:	4801      	ldr	r0, [pc, #4]	@ (8003164 <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800315e:	8033      	strh	r3, [r6, #0]
}
 8003160:	bd70      	pop	{r4, r5, r6, pc}
 8003162:	bf00      	nop
 8003164:	2000000c 	.word	0x2000000c

08003168 <USBD_CDC_GetHSCfgDesc>:
{
 8003168:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800316a:	2182      	movs	r1, #130	@ 0x82
{
 800316c:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800316e:	480f      	ldr	r0, [pc, #60]	@ (80031ac <USBD_CDC_GetHSCfgDesc+0x44>)
 8003170:	f000 fb94 	bl	800389c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003174:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8003176:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003178:	480c      	ldr	r0, [pc, #48]	@ (80031ac <USBD_CDC_GetHSCfgDesc+0x44>)
 800317a:	f000 fb8f 	bl	800389c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800317e:	2181      	movs	r1, #129	@ 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003180:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8003182:	480a      	ldr	r0, [pc, #40]	@ (80031ac <USBD_CDC_GetHSCfgDesc+0x44>)
 8003184:	f000 fb8a 	bl	800389c <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8003188:	b10d      	cbz	r5, 800318e <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800318a:	2210      	movs	r2, #16
 800318c:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800318e:	b11c      	cbz	r4, 8003198 <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8003190:	2100      	movs	r1, #0
 8003192:	2202      	movs	r2, #2
 8003194:	7121      	strb	r1, [r4, #4]
 8003196:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8003198:	b118      	cbz	r0, 80031a2 <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800319a:	2100      	movs	r1, #0
 800319c:	2202      	movs	r2, #2
 800319e:	7101      	strb	r1, [r0, #4]
 80031a0:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80031a2:	2343      	movs	r3, #67	@ 0x43
}
 80031a4:	4801      	ldr	r0, [pc, #4]	@ (80031ac <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80031a6:	8033      	strh	r3, [r6, #0]
}
 80031a8:	bd70      	pop	{r4, r5, r6, pc}
 80031aa:	bf00      	nop
 80031ac:	2000000c 	.word	0x2000000c

080031b0 <USBD_CDC_DataOut>:
{
 80031b0:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80031b2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80031b6:	33b0      	adds	r3, #176	@ 0xb0
 80031b8:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80031bc:	b195      	cbz	r5, 80031e4 <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80031be:	4604      	mov	r4, r0
 80031c0:	f001 f894 	bl	80042ec <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80031c4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80031c8:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80031cc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80031d0:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 80031d4:	f8d4 32c4 	ldr.w	r3, [r4, #708]	@ 0x2c4
 80031d8:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80031e0:	2000      	movs	r0, #0
}
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80031e4:	2003      	movs	r0, #3
}
 80031e6:	bd38      	pop	{r3, r4, r5, pc}

080031e8 <USBD_CDC_DataIn>:
{
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	f8d0 42d4 	ldr.w	r4, [r0, #724]	@ 0x2d4
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80031ee:	f8d0 62c8 	ldr.w	r6, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80031f2:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 80031f6:	f8de 52c0 	ldr.w	r5, [lr, #704]	@ 0x2c0
 80031fa:	b345      	cbz	r5, 800324e <USBD_CDC_DataIn+0x66>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80031fc:	f001 040f 	and.w	r4, r1, #15
 8003200:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8003204:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8003208:	460a      	mov	r2, r1
 800320a:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800320e:	b96b      	cbnz	r3, 800322c <USBD_CDC_DataIn+0x44>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8003210:	f8de 32c4 	ldr.w	r3, [lr, #708]	@ 0x2c4
 8003214:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8003216:	2100      	movs	r1, #0
 8003218:	f8c5 1214 	str.w	r1, [r5, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800321c:	b123      	cbz	r3, 8003228 <USBD_CDC_DataIn+0x40>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800321e:	f8d5 0208 	ldr.w	r0, [r5, #520]	@ 0x208
 8003222:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8003226:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8003228:	2000      	movs	r0, #0
}
 800322a:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800322c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8003230:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8003234:	69f4      	ldr	r4, [r6, #28]
 8003236:	fbb3 f6f4 	udiv	r6, r3, r4
 800323a:	fb04 3316 	mls	r3, r4, r6, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e6      	bne.n	8003210 <USBD_CDC_DataIn+0x28>
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8003242:	f8cc 3018 	str.w	r3, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003246:	461a      	mov	r2, r3
 8003248:	f001 f838 	bl	80042bc <USBD_LL_Transmit>
 800324c:	e7ec      	b.n	8003228 <USBD_CDC_DataIn+0x40>
    return (uint8_t)USBD_FAIL;
 800324e:	2003      	movs	r0, #3
}
 8003250:	bd70      	pop	{r4, r5, r6, pc}
 8003252:	bf00      	nop

08003254 <USBD_CDC_Setup>:
{
 8003254:	b570      	push	{r4, r5, r6, lr}
 8003256:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800325a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800325e:	b082      	sub	sp, #8
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003260:	f8d3 62c0 	ldr.w	r6, [r3, #704]	@ 0x2c0
  uint8_t ifalt = 0U;
 8003264:	2200      	movs	r2, #0
 8003266:	f88d 2005 	strb.w	r2, [sp, #5]
  uint16_t status_info = 0U;
 800326a:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hcdc == NULL)
 800326e:	b166      	cbz	r6, 800328a <USBD_CDC_Setup+0x36>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003270:	f891 c000 	ldrb.w	ip, [r1]
 8003274:	f01c 0260 	ands.w	r2, ip, #96	@ 0x60
 8003278:	4604      	mov	r4, r0
 800327a:	460d      	mov	r5, r1
 800327c:	d01e      	beq.n	80032bc <USBD_CDC_Setup+0x68>
 800327e:	2a20      	cmp	r2, #32
 8003280:	d006      	beq.n	8003290 <USBD_CDC_Setup+0x3c>
          USBD_CtlError(pdev, req);
 8003282:	4629      	mov	r1, r5
 8003284:	4620      	mov	r0, r4
 8003286:	f000 fdbd 	bl	8003e04 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 800328a:	2003      	movs	r0, #3
}
 800328c:	b002      	add	sp, #8
 800328e:	bd70      	pop	{r4, r5, r6, pc}
      if (req->wLength != 0U)
 8003290:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8003292:	f891 e001 	ldrb.w	lr, [r1, #1]
      if (req->wLength != 0U)
 8003296:	b37a      	cbz	r2, 80032f8 <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 8003298:	f01c 0f80 	tst.w	ip, #128	@ 0x80
 800329c:	d04c      	beq.n	8003338 <USBD_CDC_Setup+0xe4>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800329e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80032a2:	4631      	mov	r1, r6
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	4670      	mov	r0, lr
 80032a8:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80032aa:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80032ac:	2a07      	cmp	r2, #7
 80032ae:	4631      	mov	r1, r6
 80032b0:	bf28      	it	cs
 80032b2:	2207      	movcs	r2, #7
 80032b4:	4620      	mov	r0, r4
 80032b6:	f000 fdd9 	bl	8003e6c <USBD_CtlSendData>
 80032ba:	e022      	b.n	8003302 <USBD_CDC_Setup+0xae>
      switch (req->bRequest)
 80032bc:	784b      	ldrb	r3, [r1, #1]
 80032be:	2b0b      	cmp	r3, #11
 80032c0:	d8df      	bhi.n	8003282 <USBD_CDC_Setup+0x2e>
 80032c2:	a201      	add	r2, pc, #4	@ (adr r2, 80032c8 <USBD_CDC_Setup+0x74>)
 80032c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c8:	08003311 	.word	0x08003311
 80032cc:	08003303 	.word	0x08003303
 80032d0:	08003283 	.word	0x08003283
 80032d4:	08003283 	.word	0x08003283
 80032d8:	08003283 	.word	0x08003283
 80032dc:	08003283 	.word	0x08003283
 80032e0:	08003283 	.word	0x08003283
 80032e4:	08003283 	.word	0x08003283
 80032e8:	08003283 	.word	0x08003283
 80032ec:	08003283 	.word	0x08003283
 80032f0:	08003325 	.word	0x08003325
 80032f4:	08003307 	.word	0x08003307
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80032f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80032fc:	4670      	mov	r0, lr
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4798      	blx	r3
    return (uint8_t)USBD_FAIL;
 8003302:	2000      	movs	r0, #0
 8003304:	e7c2      	b.n	800328c <USBD_CDC_Setup+0x38>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003306:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800330a:	2b03      	cmp	r3, #3
 800330c:	d0f9      	beq.n	8003302 <USBD_CDC_Setup+0xae>
 800330e:	e7b8      	b.n	8003282 <USBD_CDC_Setup+0x2e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003310:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003314:	2b03      	cmp	r3, #3
 8003316:	d1b4      	bne.n	8003282 <USBD_CDC_Setup+0x2e>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8003318:	2202      	movs	r2, #2
 800331a:	f10d 0106 	add.w	r1, sp, #6
 800331e:	f000 fda5 	bl	8003e6c <USBD_CtlSendData>
 8003322:	e7ee      	b.n	8003302 <USBD_CDC_Setup+0xae>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003324:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003328:	2b03      	cmp	r3, #3
 800332a:	d1aa      	bne.n	8003282 <USBD_CDC_Setup+0x2e>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800332c:	2201      	movs	r2, #1
 800332e:	f10d 0105 	add.w	r1, sp, #5
 8003332:	f000 fd9b 	bl	8003e6c <USBD_CtlSendData>
 8003336:	e7e4      	b.n	8003302 <USBD_CDC_Setup+0xae>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8003338:	2a40      	cmp	r2, #64	@ 0x40
 800333a:	bf28      	it	cs
 800333c:	2240      	movcs	r2, #64	@ 0x40
          hcdc->CmdOpCode = req->bRequest;
 800333e:	f886 e200 	strb.w	lr, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8003342:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8003346:	4631      	mov	r1, r6
 8003348:	f000 fda6 	bl	8003e98 <USBD_CtlPrepareRx>
 800334c:	e7d9      	b.n	8003302 <USBD_CDC_Setup+0xae>
 800334e:	bf00      	nop

08003350 <USBD_CDC_DeInit>:
{
 8003350:	b538      	push	{r3, r4, r5, lr}
 8003352:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8003354:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8003356:	2181      	movs	r1, #129	@ 0x81
 8003358:	f000 ff6c 	bl	8004234 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800335c:	2101      	movs	r1, #1
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800335e:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8003360:	4620      	mov	r0, r4
 8003362:	f000 ff67 	bl	8004234 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8003366:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800336a:	2182      	movs	r1, #130	@ 0x82
 800336c:	4620      	mov	r0, r4
 800336e:	f000 ff61 	bl	8004234 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8003372:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8003376:	64e5      	str	r5, [r4, #76]	@ 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8003378:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800337c:	f8d3 22c0 	ldr.w	r2, [r3, #704]	@ 0x2c0
 8003380:	b18a      	cbz	r2, 80033a6 <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8003382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800338a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800338e:	33b0      	adds	r3, #176	@ 0xb0
 8003390:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8003394:	f000 ffb2 	bl	80042fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003398:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800339c:	33b0      	adds	r3, #176	@ 0xb0
 800339e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 80033a2:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 80033a6:	2000      	movs	r0, #0
 80033a8:	bd38      	pop	{r3, r4, r5, pc}
 80033aa:	bf00      	nop

080033ac <USBD_CDC_Init>:
{
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80033b0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80033b4:	f000 ff9e 	bl	80042f4 <USBD_static_malloc>
  if (hcdc == NULL)
 80033b8:	4605      	mov	r5, r0
 80033ba:	2800      	cmp	r0, #0
 80033bc:	d05a      	beq.n	8003474 <USBD_CDC_Init+0xc8>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80033be:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80033c2:	2100      	movs	r1, #0
 80033c4:	f000 ff9c 	bl	8004300 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80033c8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80033cc:	33b0      	adds	r3, #176	@ 0xb0
 80033ce:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80033d2:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80033d4:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80033d8:	b3b3      	cbz	r3, 8003448 <USBD_CDC_Init+0x9c>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80033da:	2340      	movs	r3, #64	@ 0x40
 80033dc:	2202      	movs	r2, #2
 80033de:	2181      	movs	r1, #129	@ 0x81
 80033e0:	4620      	mov	r0, r4
 80033e2:	f000 ff19 	bl	8004218 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80033e6:	2101      	movs	r1, #1
 80033e8:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80033ea:	2340      	movs	r3, #64	@ 0x40
 80033ec:	2202      	movs	r2, #2
 80033ee:	4620      	mov	r0, r4
 80033f0:	f000 ff12 	bl	8004218 <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80033f4:	2701      	movs	r7, #1
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80033f6:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80033f8:	2308      	movs	r3, #8
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80033fa:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80033fe:	2182      	movs	r1, #130	@ 0x82
 8003400:	2203      	movs	r2, #3
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003402:	f8a4 7178 	strh.w	r7, [r4, #376]	@ 0x178
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003406:	4620      	mov	r0, r4
 8003408:	f000 ff06 	bl	8004218 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800340c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8003410:	f8a4 704c 	strh.w	r7, [r4, #76]	@ 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8003414:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hcdc->RxBuffer = NULL;
 8003418:	2600      	movs	r6, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800341a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
  hcdc->RxBuffer = NULL;
 800341e:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 8003426:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
  hcdc->TxState = 0U;
 800342a:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 800342e:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 8003432:	b322      	cbz	r2, 800347e <USBD_CDC_Init+0xd2>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003434:	7c23      	ldrb	r3, [r4, #16]
 8003436:	b9bb      	cbnz	r3, 8003468 <USBD_CDC_Init+0xbc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003438:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800343c:	4639      	mov	r1, r7
 800343e:	4620      	mov	r0, r4
 8003440:	f000 ff48 	bl	80042d4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8003444:	2000      	movs	r0, #0
}
 8003446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800344c:	2202      	movs	r2, #2
 800344e:	2181      	movs	r1, #129	@ 0x81
 8003450:	4620      	mov	r0, r4
 8003452:	f000 fee1 	bl	8004218 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003456:	2101      	movs	r1, #1
 8003458:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800345a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800345e:	2202      	movs	r2, #2
 8003460:	4620      	mov	r0, r4
 8003462:	f000 fed9 	bl	8004218 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8003466:	e7c5      	b.n	80033f4 <USBD_CDC_Init+0x48>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003468:	2340      	movs	r3, #64	@ 0x40
 800346a:	4639      	mov	r1, r7
 800346c:	4620      	mov	r0, r4
 800346e:	f000 ff31 	bl	80042d4 <USBD_LL_PrepareReceive>
 8003472:	e7e7      	b.n	8003444 <USBD_CDC_Init+0x98>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003474:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8003478:	33b0      	adds	r3, #176	@ 0xb0
 800347a:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 800347e:	2002      	movs	r0, #2
}
 8003480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003482:	bf00      	nop

08003484 <USBD_CDC_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	2182      	movs	r1, #130	@ 0x82
 8003488:	4606      	mov	r6, r0
 800348a:	480f      	ldr	r0, [pc, #60]	@ (80034c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800348c:	f000 fa06 	bl	800389c <USBD_GetEpDesc>
 8003490:	2101      	movs	r1, #1
 8003492:	4605      	mov	r5, r0
 8003494:	480c      	ldr	r0, [pc, #48]	@ (80034c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8003496:	f000 fa01 	bl	800389c <USBD_GetEpDesc>
 800349a:	2181      	movs	r1, #129	@ 0x81
 800349c:	4604      	mov	r4, r0
 800349e:	480a      	ldr	r0, [pc, #40]	@ (80034c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80034a0:	f000 f9fc 	bl	800389c <USBD_GetEpDesc>
 80034a4:	b10d      	cbz	r5, 80034aa <USBD_CDC_GetOtherSpeedCfgDesc+0x26>
 80034a6:	2210      	movs	r2, #16
 80034a8:	71aa      	strb	r2, [r5, #6]
 80034aa:	b11c      	cbz	r4, 80034b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x30>
 80034ac:	2200      	movs	r2, #0
 80034ae:	2140      	movs	r1, #64	@ 0x40
 80034b0:	7121      	strb	r1, [r4, #4]
 80034b2:	7162      	strb	r2, [r4, #5]
 80034b4:	b118      	cbz	r0, 80034be <USBD_CDC_GetOtherSpeedCfgDesc+0x3a>
 80034b6:	2200      	movs	r2, #0
 80034b8:	2140      	movs	r1, #64	@ 0x40
 80034ba:	7101      	strb	r1, [r0, #4]
 80034bc:	7142      	strb	r2, [r0, #5]
 80034be:	2343      	movs	r3, #67	@ 0x43
 80034c0:	4801      	ldr	r0, [pc, #4]	@ (80034c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80034c2:	8033      	strh	r3, [r6, #0]
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
 80034c6:	bf00      	nop
 80034c8:	2000000c 	.word	0x2000000c

080034cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80034cc:	4603      	mov	r3, r0
  if (fops == NULL)
 80034ce:	b139      	cbz	r1, 80034e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 80034d0:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 80034d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  return (uint8_t)USBD_OK;
 80034d8:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 80034da:	f8c3 12c4 	str.w	r1, [r3, #708]	@ 0x2c4
  return (uint8_t)USBD_OK;
 80034de:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80034e0:	2003      	movs	r0, #3
}
 80034e2:	4770      	bx	lr

080034e4 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80034e4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80034e8:	33b0      	adds	r3, #176	@ 0xb0
 80034ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80034ee:	b12b      	cbz	r3, 80034fc <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 80034f0:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80034f4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80034f8:	2000      	movs	r0, #0
 80034fa:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80034fc:	2003      	movs	r0, #3
}
 80034fe:	4770      	bx	lr

08003500 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003500:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003504:	33b0      	adds	r3, #176	@ 0xb0
 8003506:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 800350a:	b11b      	cbz	r3, 8003514 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800350c:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8003510:	2000      	movs	r0, #0
 8003512:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8003514:	2003      	movs	r0, #3
}
 8003516:	4770      	bx	lr

08003518 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003518:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800351c:	32b0      	adds	r2, #176	@ 0xb0
 800351e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8003522:	b18a      	cbz	r2, 8003548 <USBD_CDC_ReceivePacket+0x30>
{
 8003524:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003526:	7c03      	ldrb	r3, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003528:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800352c:	b12b      	cbz	r3, 800353a <USBD_CDC_ReceivePacket+0x22>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800352e:	2340      	movs	r3, #64	@ 0x40
 8003530:	2101      	movs	r1, #1
 8003532:	f000 fecf 	bl	80042d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8003536:	2000      	movs	r0, #0
}
 8003538:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800353a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800353e:	2101      	movs	r1, #1
 8003540:	f000 fec8 	bl	80042d4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8003544:	2000      	movs	r0, #0
}
 8003546:	bd08      	pop	{r3, pc}
    return (uint8_t)USBD_FAIL;
 8003548:	2003      	movs	r0, #3
}
 800354a:	4770      	bx	lr

0800354c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800354c:	b178      	cbz	r0, 800356e <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800354e:	2300      	movs	r3, #0
 8003550:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8003554:	f8c0 32c4 	str.w	r3, [r0, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8003558:	f8c0 32d0 	str.w	r3, [r0, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800355c:	b109      	cbz	r1, 8003562 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800355e:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003562:	2301      	movs	r3, #1
 8003564:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 8003568:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800356a:	f000 be17 	b.w	800419c <USBD_LL_Init>

  return ret;
}
 800356e:	2003      	movs	r0, #3
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop

08003574 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003574:	b510      	push	{r4, lr}
 8003576:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800357e:	b189      	cbz	r1, 80035a4 <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8003580:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pdev->pClass[0] = pclass;
 8003582:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8003586:	4604      	mov	r4, r0
 8003588:	b123      	cbz	r3, 8003594 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800358a:	f10d 0006 	add.w	r0, sp, #6
 800358e:	4798      	blx	r3
 8003590:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8003594:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8003598:	2000      	movs	r0, #0
  pdev->NumClasses ++;
 800359a:	3301      	adds	r3, #1
 800359c:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8
}
 80035a0:	b002      	add	sp, #8
 80035a2:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80035a4:	2003      	movs	r0, #3
}
 80035a6:	b002      	add	sp, #8
 80035a8:	bd10      	pop	{r4, pc}
 80035aa:	bf00      	nop

080035ac <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80035ac:	f000 be28 	b.w	8004200 <USBD_LL_Start>

080035b0 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80035b0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80035b4:	b10b      	cbz	r3, 80035ba <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop

080035c0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80035c0:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80035c2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 80035ca:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80035cc:	bf18      	it	ne
 80035ce:	2003      	movne	r0, #3
 80035d0:	bd08      	pop	{r3, pc}
 80035d2:	bf00      	nop

080035d4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80035d4:	b538      	push	{r3, r4, r5, lr}
 80035d6:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80035d8:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 80035dc:	4628      	mov	r0, r5
 80035de:	f000 fc05 	bl	8003dec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80035e2:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 80035e6:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	@ 0x2b0
 80035ea:	f8c4 2298 	str.w	r2, [r4, #664]	@ 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 80035ee:	2301      	movs	r3, #1
 80035f0:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 80035f4:	f001 031f 	and.w	r3, r1, #31
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d009      	beq.n	8003610 <USBD_LL_SetupStage+0x3c>
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d013      	beq.n	8003628 <USBD_LL_SetupStage+0x54>
 8003600:	b163      	cbz	r3, 800361c <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003602:	4620      	mov	r0, r4
 8003604:	f001 0180 	and.w	r1, r1, #128	@ 0x80
      break;
  }

  return ret;
}
 8003608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800360c:	f000 be1e 	b.w	800424c <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003610:	4629      	mov	r1, r5
 8003612:	4620      	mov	r0, r4
}
 8003614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003618:	f000 bb00 	b.w	8003c1c <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800361c:	4629      	mov	r1, r5
 800361e:	4620      	mov	r0, r4
}
 8003620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8003624:	f000 b950 	b.w	80038c8 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8003628:	4629      	mov	r1, r5
 800362a:	4620      	mov	r0, r4
}
 800362c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8003630:	f000 bb30 	b.w	8003c94 <USBD_StdEPReq>

08003634 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003634:	b510      	push	{r4, lr}
 8003636:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8003638:	b931      	cbnz	r1, 8003648 <USBD_LL_DataOutStage+0x14>
 800363a:	4694      	mov	ip, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800363c:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8003640:	2a03      	cmp	r2, #3
 8003642:	d010      	beq.n	8003666 <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 8003644:	2000      	movs	r0, #0
 8003646:	bd10      	pop	{r4, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003648:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800364c:	2b03      	cmp	r3, #3
 800364e:	d1f9      	bne.n	8003644 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 8003650:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f4      	beq.n	8003644 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 800365a:	2200      	movs	r2, #0
}
 800365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          pdev->classId = idx;
 8003660:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8003664:	4718      	bx	r3
 8003666:	460b      	mov	r3, r1
      if (pep->rem_length > pep->maxpacket)
 8003668:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	@ 0x15c
 800366c:	4291      	cmp	r1, r2
 800366e:	d808      	bhi.n	8003682 <USBD_LL_DataOutStage+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003670:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003674:	2a03      	cmp	r2, #3
 8003676:	d00e      	beq.n	8003696 <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 8003678:	4620      	mov	r0, r4
 800367a:	f000 fc23 	bl	8003ec4 <USBD_CtlSendStatus>
}
 800367e:	2000      	movs	r0, #0
 8003680:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 8003682:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8003684:	428a      	cmp	r2, r1
 8003686:	bf28      	it	cs
 8003688:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 800368a:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800368e:	4661      	mov	r1, ip
 8003690:	f000 fc10 	bl	8003eb4 <USBD_CtlContinueRx>
 8003694:	e7d6      	b.n	8003644 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8003696:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800369a:	6912      	ldr	r2, [r2, #16]
 800369c:	2a00      	cmp	r2, #0
 800369e:	d0eb      	beq.n	8003678 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 80036a0:	f8c0 32d4 	str.w	r3, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80036a4:	4790      	blx	r2
 80036a6:	e7e7      	b.n	8003678 <USBD_LL_DataOutStage+0x44>

080036a8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80036ac:	b961      	cbnz	r1, 80036c8 <USBD_LL_DataInStage+0x20>
 80036ae:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80036b0:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80036b4:	2a02      	cmp	r2, #2
 80036b6:	d016      	beq.n	80036e6 <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80036b8:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 80036bc:	b113      	cbz	r3, 80036c4 <USBD_LL_DataInStage+0x1c>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
      }
    }
  }

  return USBD_OK;
}
 80036c4:	2000      	movs	r0, #0
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80036c8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d1f9      	bne.n	80036c4 <USBD_LL_DataInStage+0x1c>
        if (pdev->pClass[idx]->DataIn != NULL)
 80036d0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f4      	beq.n	80036c4 <USBD_LL_DataInStage+0x1c>
          pdev->classId = idx;
 80036da:	2200      	movs	r2, #0
}
 80036dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 80036e0:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80036e4:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 80036e6:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 80036ea:	42b2      	cmp	r2, r6
 80036ec:	460d      	mov	r5, r1
 80036ee:	d810      	bhi.n	8003712 <USBD_LL_DataInStage+0x6a>
        if ((pep->maxpacket == pep->rem_length) &&
 80036f0:	d01b      	beq.n	800372a <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80036f2:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d024      	beq.n	8003744 <USBD_LL_DataInStage+0x9c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80036fa:	2180      	movs	r1, #128	@ 0x80
 80036fc:	4620      	mov	r0, r4
 80036fe:	f000 fda5 	bl	800424c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8003702:	4620      	mov	r0, r4
 8003704:	f000 fbea 	bl	8003edc <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 8003708:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0d9      	beq.n	80036c4 <USBD_LL_DataInStage+0x1c>
 8003710:	e7d5      	b.n	80036be <USBD_LL_DataInStage+0x16>
        pep->rem_length -= pep->maxpacket;
 8003712:	1b92      	subs	r2, r2, r6
 8003714:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8003716:	4619      	mov	r1, r3
 8003718:	f000 fbb6 	bl	8003e88 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800371c:	462b      	mov	r3, r5
 800371e:	462a      	mov	r2, r5
 8003720:	4629      	mov	r1, r5
 8003722:	4620      	mov	r0, r4
 8003724:	f000 fdd6 	bl	80042d4 <USBD_LL_PrepareReceive>
 8003728:	e7c6      	b.n	80036b8 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 800372a:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800372c:	429a      	cmp	r2, r3
 800372e:	d8e0      	bhi.n	80036f2 <USBD_LL_DataInStage+0x4a>
            (pep->total_length >= pep->maxpacket) &&
 8003730:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8003734:	4293      	cmp	r3, r2
 8003736:	d2dc      	bcs.n	80036f2 <USBD_LL_DataInStage+0x4a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003738:	460a      	mov	r2, r1
 800373a:	f000 fba5 	bl	8003e88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800373e:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 8003742:	e7eb      	b.n	800371c <USBD_LL_DataInStage+0x74>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8003744:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0d5      	beq.n	80036fa <USBD_LL_DataInStage+0x52>
              pdev->classId = 0U;
 800374e:	2200      	movs	r2, #0
 8003750:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8003754:	4620      	mov	r0, r4
 8003756:	4798      	blx	r3
 8003758:	e7cf      	b.n	80036fa <USBD_LL_DataInStage+0x52>
 800375a:	bf00      	nop

0800375c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800375e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8003762:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003764:	2201      	movs	r2, #1
 8003766:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
{
 800376a:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
 800376c:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800376e:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_remote_wakeup = 0U;
 8003772:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8003776:	f880 12a0 	strb.w	r1, [r0, #672]	@ 0x2a0
  if (pdev->pClass[0] != NULL)
 800377a:	b11b      	cbz	r3, 8003784 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	b10b      	cbz	r3, 8003784 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8003780:	4798      	blx	r3
 8003782:	b9b0      	cbnz	r0, 80037b2 <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 8003784:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003786:	2200      	movs	r2, #0
 8003788:	2340      	movs	r3, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800378a:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800378c:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800378e:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003790:	4620      	mov	r0, r4
 8003792:	f000 fd41 	bl	8004218 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003796:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800379a:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800379e:	462b      	mov	r3, r5
 80037a0:	2200      	movs	r2, #0
 80037a2:	2180      	movs	r1, #128	@ 0x80
 80037a4:	4620      	mov	r0, r4
 80037a6:	f000 fd37 	bl	8004218 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80037aa:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80037ac:	6225      	str	r5, [r4, #32]

  return ret;
}
 80037ae:	4638      	mov	r0, r7
 80037b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 80037b2:	2703      	movs	r7, #3
 80037b4:	e7e7      	b.n	8003786 <USBD_LL_Reset+0x2a>
 80037b6:	bf00      	nop

080037b8 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80037b8:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80037ba:	2000      	movs	r0, #0
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop

080037c0 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80037c0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d004      	beq.n	80037d2 <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 80037c8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80037d2:	2304      	movs	r3, #4
 80037d4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80037d8:	2000      	movs	r0, #0
 80037da:	4770      	bx	lr

080037dc <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80037dc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d104      	bne.n	80037ee <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 80037e4:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 80037ee:	2000      	movs	r0, #0
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop

080037f4 <USBD_LL_SOF>:
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80037f4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80037f8:	2a03      	cmp	r2, #3
 80037fa:	d001      	beq.n	8003800 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 80037fc:	2000      	movs	r0, #0
 80037fe:	4770      	bx	lr
{
 8003800:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 8003802:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003806:	b113      	cbz	r3, 800380e <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	b103      	cbz	r3, 800380e <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 800380c:	4798      	blx	r3
}
 800380e:	2000      	movs	r0, #0
 8003810:	bd08      	pop	{r3, pc}
 8003812:	bf00      	nop

08003814 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8003814:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8003818:	32ae      	adds	r2, #174	@ 0xae
 800381a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800381e:	b162      	cbz	r2, 800383a <USBD_LL_IsoINIncomplete+0x26>
{
 8003820:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003822:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003826:	2b03      	cmp	r3, #3
 8003828:	d001      	beq.n	800382e <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800382a:	2000      	movs	r0, #0
}
 800382c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800382e:	6a13      	ldr	r3, [r2, #32]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0fa      	beq.n	800382a <USBD_LL_IsoINIncomplete+0x16>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8003834:	4798      	blx	r3
  return USBD_OK;
 8003836:	2000      	movs	r0, #0
}
 8003838:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800383a:	2003      	movs	r0, #3
}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop

08003840 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8003840:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8003844:	32ae      	adds	r2, #174	@ 0xae
 8003846:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800384a:	b162      	cbz	r2, 8003866 <USBD_LL_IsoOUTIncomplete+0x26>
{
 800384c:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800384e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003852:	2b03      	cmp	r3, #3
 8003854:	d001      	beq.n	800385a <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8003856:	2000      	movs	r0, #0
}
 8003858:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800385a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0fa      	beq.n	8003856 <USBD_LL_IsoOUTIncomplete+0x16>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8003860:	4798      	blx	r3
  return USBD_OK;
 8003862:	2000      	movs	r0, #0
}
 8003864:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003866:	2003      	movs	r0, #3
}
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop

0800386c <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 800386c:	2000      	movs	r0, #0
 800386e:	4770      	bx	lr

08003870 <USBD_LL_DevDisconnected>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8003870:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003874:	2101      	movs	r1, #1
 8003876:	f880 129c 	strb.w	r1, [r0, #668]	@ 0x29c
  if (pdev->pClass[0] != NULL)
 800387a:	b142      	cbz	r2, 800388e <USBD_LL_DevDisconnected+0x1e>
{
 800387c:	b508      	push	{r3, lr}
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800387e:	6852      	ldr	r2, [r2, #4]
 8003880:	7901      	ldrb	r1, [r0, #4]
 8003882:	4790      	blx	r2
 8003884:	b908      	cbnz	r0, 800388a <USBD_LL_DevDisconnected+0x1a>
  USBD_StatusTypeDef   ret = USBD_OK;
 8003886:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8003888:	bd08      	pop	{r3, pc}
      ret = USBD_FAIL;
 800388a:	2003      	movs	r0, #3
}
 800388c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800388e:	2000      	movs	r0, #0
}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop

08003894 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8003894:	2000      	movs	r0, #0
 8003896:	4770      	bx	lr

08003898 <USBD_CoreFindEP>:
  *         return the class index relative to the selected endpoint
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
 8003898:	2000      	movs	r0, #0
 800389a:	4770      	bx	lr

0800389c <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800389c:	7802      	ldrb	r2, [r0, #0]
 800389e:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 80038a2:	4594      	cmp	ip, r2
 80038a4:	4613      	mov	r3, r2
 80038a6:	d803      	bhi.n	80038b0 <USBD_GetEpDesc+0x14>
 80038a8:	e00c      	b.n	80038c4 <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 80038aa:	459c      	cmp	ip, r3
 80038ac:	d90a      	bls.n	80038c4 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 80038ae:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80038b0:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 80038b2:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80038b4:	7842      	ldrb	r2, [r0, #1]
 80038b6:	2a05      	cmp	r2, #5
  *ptr += pnext->bLength;
 80038b8:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80038ba:	d1f6      	bne.n	80038aa <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 80038bc:	7882      	ldrb	r2, [r0, #2]
 80038be:	428a      	cmp	r2, r1
 80038c0:	d1f3      	bne.n	80038aa <USBD_GetEpDesc+0xe>
}
 80038c2:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80038c4:	2000      	movs	r0, #0
}
 80038c6:	4770      	bx	lr

080038c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	780b      	ldrb	r3, [r1, #0]
 80038cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80038d0:	2b20      	cmp	r3, #32
{
 80038d2:	b082      	sub	sp, #8
 80038d4:	460d      	mov	r5, r1
 80038d6:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80038d8:	d00e      	beq.n	80038f8 <USBD_StdDevReq+0x30>
 80038da:	2b40      	cmp	r3, #64	@ 0x40
 80038dc:	d00c      	beq.n	80038f8 <USBD_StdDevReq+0x30>
 80038de:	b1bb      	cbz	r3, 8003910 <USBD_StdDevReq+0x48>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80038e0:	2180      	movs	r1, #128	@ 0x80
 80038e2:	4620      	mov	r0, r4
 80038e4:	f000 fcb2 	bl	800424c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80038e8:	2100      	movs	r1, #0
 80038ea:	4620      	mov	r0, r4
 80038ec:	f000 fcae 	bl	800424c <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80038f0:	2500      	movs	r5, #0
}
 80038f2:	4628      	mov	r0, r5
 80038f4:	b002      	add	sp, #8
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80038f8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80038fc:	33ae      	adds	r3, #174	@ 0xae
 80038fe:	4629      	mov	r1, r5
 8003900:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	4620      	mov	r0, r4
}
 8003908:	b002      	add	sp, #8
 800390a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800390e:	4718      	bx	r3
      switch (req->bRequest)
 8003910:	784b      	ldrb	r3, [r1, #1]
 8003912:	2b09      	cmp	r3, #9
 8003914:	d8e4      	bhi.n	80038e0 <USBD_StdDevReq+0x18>
 8003916:	a201      	add	r2, pc, #4	@ (adr r2, 800391c <USBD_StdDevReq+0x54>)
 8003918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391c:	0800397d 	.word	0x0800397d
 8003920:	080039a5 	.word	0x080039a5
 8003924:	080038e1 	.word	0x080038e1
 8003928:	080039c3 	.word	0x080039c3
 800392c:	080038e1 	.word	0x080038e1
 8003930:	080039db 	.word	0x080039db
 8003934:	08003a1b 	.word	0x08003a1b
 8003938:	080038e1 	.word	0x080038e1
 800393c:	08003a51 	.word	0x08003a51
 8003940:	08003945 	.word	0x08003945
  cfgidx = (uint8_t)(req->wValue);
 8003944:	7889      	ldrb	r1, [r1, #2]
 8003946:	4db4      	ldr	r5, [pc, #720]	@ (8003c18 <USBD_StdDevReq+0x350>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003948:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800394a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800394c:	f200 8140 	bhi.w	8003bd0 <USBD_StdDevReq+0x308>
  switch (pdev->dev_state)
 8003950:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003954:	2b02      	cmp	r3, #2
 8003956:	b2de      	uxtb	r6, r3
 8003958:	f000 8126 	beq.w	8003ba8 <USBD_StdDevReq+0x2e0>
 800395c:	2e03      	cmp	r6, #3
 800395e:	f000 8101 	beq.w	8003b64 <USBD_StdDevReq+0x29c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003962:	2180      	movs	r1, #128	@ 0x80
 8003964:	f000 fc72 	bl	800424c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003968:	2100      	movs	r1, #0
 800396a:	4620      	mov	r0, r4
 800396c:	f000 fc6e 	bl	800424c <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003970:	7829      	ldrb	r1, [r5, #0]
 8003972:	4620      	mov	r0, r4
 8003974:	f7ff fe24 	bl	80035c0 <USBD_ClrClassConfig>
    return USBD_FAIL;
 8003978:	2503      	movs	r5, #3
 800397a:	e7ba      	b.n	80038f2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800397c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003980:	3b01      	subs	r3, #1
 8003982:	2b02      	cmp	r3, #2
 8003984:	d8ac      	bhi.n	80038e0 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 8003986:	88ca      	ldrh	r2, [r1, #6]
 8003988:	2a02      	cmp	r2, #2
 800398a:	d1a9      	bne.n	80038e0 <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup != 0U)
 800398c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8003990:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf0c      	ite	eq
 8003996:	2301      	moveq	r3, #1
 8003998:	2303      	movne	r3, #3
 800399a:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800399e:	f000 fa65 	bl	8003e6c <USBD_CtlSendData>
      break;
 80039a2:	e7a5      	b.n	80038f0 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80039a4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80039a8:	3b01      	subs	r3, #1
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d898      	bhi.n	80038e0 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80039ae:	884b      	ldrh	r3, [r1, #2]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d19d      	bne.n	80038f0 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80039ba:	4620      	mov	r0, r4
 80039bc:	f000 fa82 	bl	8003ec4 <USBD_CtlSendStatus>
 80039c0:	e796      	b.n	80038f0 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80039c2:	884b      	ldrh	r3, [r1, #2]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d0f6      	beq.n	80039b6 <USBD_StdDevReq+0xee>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d189      	bne.n	80038e0 <USBD_StdDevReq+0x18>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80039cc:	888b      	ldrh	r3, [r1, #4]
 80039ce:	0a1b      	lsrs	r3, r3, #8
 80039d0:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80039d4:	f000 fa76 	bl	8003ec4 <USBD_CtlSendStatus>
 80039d8:	e78a      	b.n	80038f0 <USBD_StdDevReq+0x28>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80039da:	888b      	ldrh	r3, [r1, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f47f af7f 	bne.w	80038e0 <USBD_StdDevReq+0x18>
 80039e2:	88cb      	ldrh	r3, [r1, #6]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f47f af7b 	bne.w	80038e0 <USBD_StdDevReq+0x18>
 80039ea:	884d      	ldrh	r5, [r1, #2]
 80039ec:	2d7f      	cmp	r5, #127	@ 0x7f
 80039ee:	f63f af77 	bhi.w	80038e0 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80039f2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	f43f af72 	beq.w	80038e0 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80039fc:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80039fe:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003a02:	f000 fc4f 	bl	80042a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8003a06:	4620      	mov	r0, r4
 8003a08:	f000 fa5c 	bl	8003ec4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003a0c:	2d00      	cmp	r5, #0
 8003a0e:	f000 80ff 	beq.w	8003c10 <USBD_StdDevReq+0x348>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003a12:	2302      	movs	r3, #2
 8003a14:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8003a18:	e76a      	b.n	80038f0 <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 8003a1a:	884a      	ldrh	r2, [r1, #2]
 8003a1c:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 8003a1e:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 8003a20:	3b01      	subs	r3, #1
  uint16_t len = 0U;
 8003a22:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	f63f af5a 	bhi.w	80038e0 <USBD_StdDevReq+0x18>
 8003a2c:	a101      	add	r1, pc, #4	@ (adr r1, 8003a34 <USBD_StdDevReq+0x16c>)
 8003a2e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003af5 	.word	0x08003af5
 8003a38:	08003adb 	.word	0x08003adb
 8003a3c:	08003ac9 	.word	0x08003ac9
 8003a40:	080038e1 	.word	0x080038e1
 8003a44:	080038e1 	.word	0x080038e1
 8003a48:	08003ab3 	.word	0x08003ab3
 8003a4c:	08003a77 	.word	0x08003a77
  if (req->wLength != 1U)
 8003a50:	88ca      	ldrh	r2, [r1, #6]
 8003a52:	2a01      	cmp	r2, #1
 8003a54:	f47f af44 	bne.w	80038e0 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8003a58:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 8003a5c:	2902      	cmp	r1, #2
 8003a5e:	b2cb      	uxtb	r3, r1
 8003a60:	d879      	bhi.n	8003b56 <USBD_StdDevReq+0x28e>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f43f af3c 	beq.w	80038e0 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8003a68:	4601      	mov	r1, r0
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8003a70:	f000 f9fc 	bl	8003e6c <USBD_CtlSendData>
        break;
 8003a74:	e73c      	b.n	80038f0 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a76:	7c03      	ldrb	r3, [r0, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f47f af31 	bne.w	80038e0 <USBD_StdDevReq+0x18>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8003a7e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003a82:	f10d 0006 	add.w	r0, sp, #6
 8003a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a88:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003a8a:	2307      	movs	r3, #7
 8003a8c:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 8003a8e:	88eb      	ldrh	r3, [r5, #6]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d092      	beq.n	80039ba <USBD_StdDevReq+0xf2>
    if (len != 0U)
 8003a94:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003a98:	2a00      	cmp	r2, #0
 8003a9a:	f43f af21 	beq.w	80038e0 <USBD_StdDevReq+0x18>
      len = MIN(len, req->wLength);
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	bf28      	it	cs
 8003aa2:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003aa4:	4601      	mov	r1, r0
 8003aa6:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8003aa8:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003aac:	f000 f9de 	bl	8003e6c <USBD_CtlSendData>
 8003ab0:	e71e      	b.n	80038f0 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ab2:	7c03      	ldrb	r3, [r0, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f47f af13 	bne.w	80038e0 <USBD_StdDevReq+0x18>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8003aba:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003abe:	f10d 0006 	add.w	r0, sp, #6
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac4:	4798      	blx	r3
  if (err != 0U)
 8003ac6:	e7e2      	b.n	8003a8e <USBD_StdDevReq+0x1c6>
      switch ((uint8_t)(req->wValue))
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	2a05      	cmp	r2, #5
 8003acc:	f63f af08 	bhi.w	80038e0 <USBD_StdDevReq+0x18>
 8003ad0:	e8df f002 	tbb	[pc, r2]
 8003ad4:	292f353b 	.word	0x292f353b
 8003ad8:	1823      	.short	0x1823
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ada:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8003adc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ae0:	2a00      	cmp	r2, #0
 8003ae2:	f040 8087 	bne.w	8003bf4 <USBD_StdDevReq+0x32c>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae8:	f10d 0006 	add.w	r0, sp, #6
 8003aec:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003aee:	2302      	movs	r3, #2
 8003af0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003af2:	e7cc      	b.n	8003a8e <USBD_StdDevReq+0x1c6>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003af4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003af8:	7c00      	ldrb	r0, [r0, #16]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f10d 0106 	add.w	r1, sp, #6
 8003b00:	4798      	blx	r3
  if (err != 0U)
 8003b02:	e7c4      	b.n	8003a8e <USBD_StdDevReq+0x1c6>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003b04:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f43f aee8 	beq.w	80038e0 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003b10:	7c20      	ldrb	r0, [r4, #16]
 8003b12:	f10d 0106 	add.w	r1, sp, #6
 8003b16:	4798      	blx	r3
  if (err != 0U)
 8003b18:	e7b9      	b.n	8003a8e <USBD_StdDevReq+0x1c6>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003b1a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f5      	bne.n	8003b10 <USBD_StdDevReq+0x248>
 8003b24:	e6dc      	b.n	80038e0 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003b26:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1ef      	bne.n	8003b10 <USBD_StdDevReq+0x248>
 8003b30:	e6d6      	b.n	80038e0 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003b32:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e9      	bne.n	8003b10 <USBD_StdDevReq+0x248>
 8003b3c:	e6d0      	b.n	80038e0 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003b3e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e3      	bne.n	8003b10 <USBD_StdDevReq+0x248>
 8003b48:	e6ca      	b.n	80038e0 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003b4a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1dd      	bne.n	8003b10 <USBD_StdDevReq+0x248>
 8003b54:	e6c4      	b.n	80038e0 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	f47f aec2 	bne.w	80038e0 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8003b5c:	1d01      	adds	r1, r0, #4
 8003b5e:	f000 f985 	bl	8003e6c <USBD_CtlSendData>
        break;
 8003b62:	e6c5      	b.n	80038f0 <USBD_StdDevReq+0x28>
      if (cfgidx == 0U)
 8003b64:	2900      	cmp	r1, #0
 8003b66:	d03b      	beq.n	8003be0 <USBD_StdDevReq+0x318>
      else if (cfgidx != pdev->dev_config)
 8003b68:	6841      	ldr	r1, [r0, #4]
 8003b6a:	2901      	cmp	r1, #1
 8003b6c:	f43f af25 	beq.w	80039ba <USBD_StdDevReq+0xf2>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003b70:	b2c9      	uxtb	r1, r1
 8003b72:	f7ff fd25 	bl	80035c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003b76:	7829      	ldrb	r1, [r5, #0]
 8003b78:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f7ff fd18 	bl	80035b0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8003b80:	4605      	mov	r5, r0
 8003b82:	2800      	cmp	r0, #0
 8003b84:	f43f af19 	beq.w	80039ba <USBD_StdDevReq+0xf2>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003b88:	2180      	movs	r1, #128	@ 0x80
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f000 fb5e 	bl	800424c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003b90:	2100      	movs	r1, #0
 8003b92:	4620      	mov	r0, r4
 8003b94:	f000 fb5a 	bl	800424c <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003b98:	7921      	ldrb	r1, [r4, #4]
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f7ff fd10 	bl	80035c0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8003ba6:	e6a4      	b.n	80038f2 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 8003ba8:	2900      	cmp	r1, #0
 8003baa:	f43f af06 	beq.w	80039ba <USBD_StdDevReq+0xf2>
        pdev->dev_config = cfgidx;
 8003bae:	2101      	movs	r1, #1
 8003bb0:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8003bb2:	f7ff fcfd 	bl	80035b0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8003bb6:	4605      	mov	r5, r0
 8003bb8:	b318      	cbz	r0, 8003c02 <USBD_StdDevReq+0x33a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003bba:	2180      	movs	r1, #128	@ 0x80
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f000 fb45 	bl	800424c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	f000 fb41 	bl	800424c <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003bca:	f884 629c 	strb.w	r6, [r4, #668]	@ 0x29c
 8003bce:	e690      	b.n	80038f2 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003bd0:	2180      	movs	r1, #128	@ 0x80
 8003bd2:	f000 fb3b 	bl	800424c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f000 fb37 	bl	800424c <USBD_LL_StallEP>
    return USBD_FAIL;
 8003bde:	e6cb      	b.n	8003978 <USBD_StdDevReq+0xb0>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003be0:	2302      	movs	r3, #2
 8003be2:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8003be6:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003be8:	f7ff fcea 	bl	80035c0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8003bec:	4620      	mov	r0, r4
 8003bee:	f000 f969 	bl	8003ec4 <USBD_CtlSendStatus>
 8003bf2:	e67d      	b.n	80038f0 <USBD_StdDevReq+0x28>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8003bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf6:	f10d 0006 	add.w	r0, sp, #6
 8003bfa:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003c00:	e745      	b.n	8003a8e <USBD_StdDevReq+0x1c6>
          (void)USBD_CtlSendStatus(pdev);
 8003c02:	4620      	mov	r0, r4
 8003c04:	f000 f95e 	bl	8003ec4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8003c0e:	e66f      	b.n	80038f0 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8003c16:	e66b      	b.n	80038f0 <USBD_StdDevReq+0x28>
 8003c18:	20000170 	.word	0x20000170

08003c1c <USBD_StdItfReq>:
{
 8003c1c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c1e:	780b      	ldrb	r3, [r1, #0]
 8003c20:	065a      	lsls	r2, r3, #25
{
 8003c22:	460d      	mov	r5, r1
 8003c24:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c26:	d50c      	bpl.n	8003c42 <USBD_StdItfReq+0x26>
 8003c28:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003c2c:	2a40      	cmp	r2, #64	@ 0x40
 8003c2e:	d008      	beq.n	8003c42 <USBD_StdItfReq+0x26>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003c30:	2180      	movs	r1, #128	@ 0x80
 8003c32:	f000 fb0b 	bl	800424c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003c36:	2100      	movs	r1, #0
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f000 fb07 	bl	800424c <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8003c3e:	2000      	movs	r0, #0
}
 8003c40:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8003c42:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003c46:	3b01      	subs	r3, #1
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d802      	bhi.n	8003c52 <USBD_StdItfReq+0x36>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003c4c:	7929      	ldrb	r1, [r5, #4]
 8003c4e:	2901      	cmp	r1, #1
 8003c50:	d908      	bls.n	8003c64 <USBD_StdItfReq+0x48>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003c52:	2180      	movs	r1, #128	@ 0x80
 8003c54:	4620      	mov	r0, r4
 8003c56:	f000 faf9 	bl	800424c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f000 faf5 	bl	800424c <USBD_LL_StallEP>
}
 8003c62:	e7ec      	b.n	8003c3e <USBD_StdItfReq+0x22>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8003c64:	4620      	mov	r0, r4
 8003c66:	f7ff fe15 	bl	8003894 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8003c6a:	b988      	cbnz	r0, 8003c90 <USBD_StdItfReq+0x74>
              if (pdev->pClass[idx]->Setup != NULL)
 8003c6c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	b16b      	cbz	r3, 8003c90 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 8003c74:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8003c78:	4629      	mov	r1, r5
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003c7e:	88ea      	ldrh	r2, [r5, #6]
 8003c80:	2a00      	cmp	r2, #0
 8003c82:	d1dd      	bne.n	8003c40 <USBD_StdItfReq+0x24>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d1db      	bne.n	8003c40 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f000 f91b 	bl	8003ec4 <USBD_CtlSendStatus>
 8003c8e:	e7d6      	b.n	8003c3e <USBD_StdItfReq+0x22>
                ret = USBD_FAIL;
 8003c90:	2003      	movs	r0, #3
}
 8003c92:	bd38      	pop	{r3, r4, r5, pc}

08003c94 <USBD_StdEPReq>:
{
 8003c94:	b530      	push	{r4, r5, lr}
 8003c96:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 8003c98:	888a      	ldrh	r2, [r1, #4]
 8003c9a:	7823      	ldrb	r3, [r4, #0]
 8003c9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ca0:	2b20      	cmp	r3, #32
{
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 8003ca6:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ca8:	d01e      	beq.n	8003ce8 <USBD_StdEPReq+0x54>
 8003caa:	2b40      	cmp	r3, #64	@ 0x40
 8003cac:	d01c      	beq.n	8003ce8 <USBD_StdEPReq+0x54>
 8003cae:	b36b      	cbz	r3, 8003d0c <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003cb0:	2180      	movs	r1, #128	@ 0x80
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	f000 faca 	bl	800424c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4628      	mov	r0, r5
 8003cbc:	f000 fac6 	bl	800424c <USBD_LL_StallEP>
}
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	b003      	add	sp, #12
 8003cc4:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 8003cc6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	d05e      	beq.n	8003d8e <USBD_StdEPReq+0xfa>
 8003cd0:	2a03      	cmp	r2, #3
 8003cd2:	d1ed      	bne.n	8003cb0 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003cd4:	8863      	ldrh	r3, [r4, #2]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f2      	bne.n	8003cc0 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003cda:	064b      	lsls	r3, r1, #25
 8003cdc:	d17d      	bne.n	8003dda <USBD_StdEPReq+0x146>
                (void)USBD_CtlSendStatus(pdev);
 8003cde:	4628      	mov	r0, r5
 8003ce0:	9101      	str	r1, [sp, #4]
 8003ce2:	f000 f8ef 	bl	8003ec4 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8003ce6:	9901      	ldr	r1, [sp, #4]
 8003ce8:	4628      	mov	r0, r5
 8003cea:	f7ff fdd5 	bl	8003898 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	d1e6      	bne.n	8003cc0 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 8003cf2:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
                  pdev->classId = idx;
 8003cf6:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0df      	beq.n	8003cc0 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8003d00:	4621      	mov	r1, r4
 8003d02:	4628      	mov	r0, r5
}
 8003d04:	b003      	add	sp, #12
 8003d06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8003d0a:	4718      	bx	r3
      switch (req->bRequest)
 8003d0c:	7863      	ldrb	r3, [r4, #1]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d0d9      	beq.n	8003cc6 <USBD_StdEPReq+0x32>
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d02a      	beq.n	8003d6c <USBD_StdEPReq+0xd8>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1ca      	bne.n	8003cb0 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 8003d1a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	b2d8      	uxtb	r0, r3
 8003d22:	d03d      	beq.n	8003da0 <USBD_StdEPReq+0x10c>
 8003d24:	2803      	cmp	r0, #3
 8003d26:	d1c3      	bne.n	8003cb0 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003d28:	f001 030f 	and.w	r3, r1, #15
 8003d2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8003d30:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003d32:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8003d36:	d442      	bmi.n	8003dbe <USBD_StdEPReq+0x12a>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003d38:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0b7      	beq.n	8003cb0 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003d40:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8003d44:	2414      	movs	r4, #20
 8003d46:	fb04 5403 	mla	r4, r4, r3, r5
 8003d4a:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d041      	beq.n	8003dd6 <USBD_StdEPReq+0x142>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8003d52:	4628      	mov	r0, r5
 8003d54:	f000 fa92 	bl	800427c <USBD_LL_IsStallEP>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d03c      	beq.n	8003dd6 <USBD_StdEPReq+0x142>
 8003d5c:	2301      	movs	r3, #1
                pep->status = 0x0000U;
 8003d5e:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8003d60:	2202      	movs	r2, #2
 8003d62:	4621      	mov	r1, r4
 8003d64:	4628      	mov	r0, r5
 8003d66:	f000 f881 	bl	8003e6c <USBD_CtlSendData>
              break;
 8003d6a:	e7a9      	b.n	8003cc0 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8003d6c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	d00b      	beq.n	8003d8e <USBD_StdEPReq+0xfa>
 8003d76:	2a03      	cmp	r2, #3
 8003d78:	d19a      	bne.n	8003cb0 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003d7a:	8863      	ldrh	r3, [r4, #2]
 8003d7c:	b91b      	cbnz	r3, 8003d86 <USBD_StdEPReq+0xf2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003d7e:	0648      	lsls	r0, r1, #25
 8003d80:	d001      	beq.n	8003d86 <USBD_StdEPReq+0xf2>
 8003d82:	88e3      	ldrh	r3, [r4, #6]
 8003d84:	b373      	cbz	r3, 8003de4 <USBD_StdEPReq+0x150>
              (void)USBD_CtlSendStatus(pdev);
 8003d86:	4628      	mov	r0, r5
 8003d88:	f000 f89c 	bl	8003ec4 <USBD_CtlSendStatus>
              break;
 8003d8c:	e798      	b.n	8003cc0 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003d8e:	064a      	lsls	r2, r1, #25
 8003d90:	d08e      	beq.n	8003cb0 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8003d92:	f000 fa5b 	bl	800424c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8003d96:	2180      	movs	r1, #128	@ 0x80
 8003d98:	4628      	mov	r0, r5
 8003d9a:	f000 fa57 	bl	800424c <USBD_LL_StallEP>
 8003d9e:	e78f      	b.n	8003cc0 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003da0:	0648      	lsls	r0, r1, #25
 8003da2:	d185      	bne.n	8003cb0 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003da4:	0611      	lsls	r1, r2, #24
 8003da6:	bf4c      	ite	mi
 8003da8:	f105 0114 	addmi.w	r1, r5, #20
 8003dac:	f505 71aa 	addpl.w	r1, r5, #340	@ 0x154
              pep->status = 0x0000U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8003db4:	2202      	movs	r2, #2
 8003db6:	4628      	mov	r0, r5
 8003db8:	f000 f858 	bl	8003e6c <USBD_CtlSendData>
              break;
 8003dbc:	e780      	b.n	8003cc0 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003dbe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f43f af75 	beq.w	8003cb0 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003dc6:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8003dca:	1c5c      	adds	r4, r3, #1
 8003dcc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003dd0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8003dd4:	e7bb      	b.n	8003d4e <USBD_StdEPReq+0xba>
{
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e7c1      	b.n	8003d5e <USBD_StdEPReq+0xca>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8003dda:	9101      	str	r1, [sp, #4]
 8003ddc:	f000 fa42 	bl	8004264 <USBD_LL_ClearStallEP>
 8003de0:	9901      	ldr	r1, [sp, #4]
 8003de2:	e77c      	b.n	8003cde <USBD_StdEPReq+0x4a>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8003de4:	4628      	mov	r0, r5
 8003de6:	f000 fa31 	bl	800424c <USBD_LL_StallEP>
 8003dea:	e7cc      	b.n	8003d86 <USBD_StdEPReq+0xf2>

08003dec <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8003dec:	780b      	ldrb	r3, [r1, #0]
 8003dee:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8003df0:	784b      	ldrb	r3, [r1, #1]
 8003df2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8003df4:	884b      	ldrh	r3, [r1, #2]
 8003df6:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8003df8:	888b      	ldrh	r3, [r1, #4]
 8003dfa:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8003dfc:	88cb      	ldrh	r3, [r1, #6]
 8003dfe:	80c3      	strh	r3, [r0, #6]
}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop

08003e04 <USBD_CtlError>:
{
 8003e04:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003e06:	2180      	movs	r1, #128	@ 0x80
{
 8003e08:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003e0a:	f000 fa1f 	bl	800424c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003e0e:	4620      	mov	r0, r4
 8003e10:	2100      	movs	r1, #0
}
 8003e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8003e16:	f000 ba19 	b.w	800424c <USBD_LL_StallEP>
 8003e1a:	bf00      	nop

08003e1c <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8003e1c:	b308      	cbz	r0, 8003e62 <USBD_GetString+0x46>
{
 8003e1e:	b570      	push	{r4, r5, r6, lr}
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8003e20:	7803      	ldrb	r3, [r0, #0]
 8003e22:	460e      	mov	r6, r1
 8003e24:	4614      	mov	r4, r2
 8003e26:	4605      	mov	r5, r0
 8003e28:	b1e3      	cbz	r3, 8003e64 <USBD_GetString+0x48>
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	f7fc f9d2 	bl	80001d4 <strlen>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	3301      	adds	r3, #1
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	8023      	strh	r3, [r4, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8003e3c:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8003e3e:	7032      	strb	r2, [r6, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8003e40:	7073      	strb	r3, [r6, #1]
  while (*pdesc != (uint8_t)'\0')
 8003e42:	782c      	ldrb	r4, [r5, #0]
 8003e44:	b164      	cbz	r4, 8003e60 <USBD_GetString+0x44>
 8003e46:	4628      	mov	r0, r5
  idx++;
 8003e48:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8003e4a:	2100      	movs	r1, #0
    idx++;
 8003e4c:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8003e4e:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 8003e50:	54f4      	strb	r4, [r6, r3]
    unicode[idx] = 0U;
 8003e52:	54b1      	strb	r1, [r6, r2]
  while (*pdesc != (uint8_t)'\0')
 8003e54:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 8003e58:	3302      	adds	r3, #2
 8003e5a:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8003e5c:	2c00      	cmp	r4, #0
 8003e5e:	d1f5      	bne.n	8003e4c <USBD_GetString+0x30>
}
 8003e60:	bd70      	pop	{r4, r5, r6, pc}
 8003e62:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8003e64:	2202      	movs	r2, #2
 8003e66:	4613      	mov	r3, r2
 8003e68:	e7e7      	b.n	8003e3a <USBD_GetString+0x1e>
 8003e6a:	bf00      	nop

08003e6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8003e6c:	b508      	push	{r3, lr}
 8003e6e:	4613      	mov	r3, r2
 8003e70:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003e72:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;
 8003e74:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003e78:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	f000 fa1d 	bl	80042bc <USBD_LL_Transmit>

  return USBD_OK;
}
 8003e82:	2000      	movs	r0, #0
 8003e84:	bd08      	pop	{r3, pc}
 8003e86:	bf00      	nop

08003e88 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8003e88:	b508      	push	{r3, lr}
 8003e8a:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003e8c:	460a      	mov	r2, r1
 8003e8e:	2100      	movs	r1, #0
 8003e90:	f000 fa14 	bl	80042bc <USBD_LL_Transmit>

  return USBD_OK;
}
 8003e94:	2000      	movs	r0, #0
 8003e96:	bd08      	pop	{r3, pc}

08003e98 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8003e98:	b508      	push	{r3, lr}
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003e9e:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;
 8003ea0:	e9c0 3356 	strd	r3, r3, [r0, #344]	@ 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003ea4:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	f000 fa13 	bl	80042d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003eae:	2000      	movs	r0, #0
 8003eb0:	bd08      	pop	{r3, pc}
 8003eb2:	bf00      	nop

08003eb4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8003eb4:	b508      	push	{r3, lr}
 8003eb6:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003eb8:	460a      	mov	r2, r1
 8003eba:	2100      	movs	r1, #0
 8003ebc:	f000 fa0a 	bl	80042d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	bd08      	pop	{r3, pc}

08003ec4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003ec4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003ec6:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003ec8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003eca:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f000 f9f3 	bl	80042bc <USBD_LL_Transmit>

  return USBD_OK;
}
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	bd08      	pop	{r3, pc}
 8003eda:	bf00      	nop

08003edc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8003edc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003ede:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003ee0:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003ee2:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f000 f9f3 	bl	80042d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003eee:	2000      	movs	r0, #0
 8003ef0:	bd08      	pop	{r3, pc}
 8003ef2:	bf00      	nop

08003ef4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003ef4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003ef6:	4918      	ldr	r1, [pc, #96]	@ (8003f58 <MX_USB_DEVICE_Init+0x64>)
 8003ef8:	4818      	ldr	r0, [pc, #96]	@ (8003f5c <MX_USB_DEVICE_Init+0x68>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	f7ff fb26 	bl	800354c <USBD_Init>
 8003f00:	b970      	cbnz	r0, 8003f20 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003f02:	4917      	ldr	r1, [pc, #92]	@ (8003f60 <MX_USB_DEVICE_Init+0x6c>)
 8003f04:	4815      	ldr	r0, [pc, #84]	@ (8003f5c <MX_USB_DEVICE_Init+0x68>)
 8003f06:	f7ff fb35 	bl	8003574 <USBD_RegisterClass>
 8003f0a:	b988      	cbnz	r0, 8003f30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003f0c:	4915      	ldr	r1, [pc, #84]	@ (8003f64 <MX_USB_DEVICE_Init+0x70>)
 8003f0e:	4813      	ldr	r0, [pc, #76]	@ (8003f5c <MX_USB_DEVICE_Init+0x68>)
 8003f10:	f7ff fadc 	bl	80034cc <USBD_CDC_RegisterInterface>
 8003f14:	b9a0      	cbnz	r0, 8003f40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003f16:	4811      	ldr	r0, [pc, #68]	@ (8003f5c <MX_USB_DEVICE_Init+0x68>)
 8003f18:	f7ff fb48 	bl	80035ac <USBD_Start>
 8003f1c:	b9b8      	cbnz	r0, 8003f4e <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003f1e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003f20:	f7fc fb76 	bl	8000610 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003f24:	490e      	ldr	r1, [pc, #56]	@ (8003f60 <MX_USB_DEVICE_Init+0x6c>)
 8003f26:	480d      	ldr	r0, [pc, #52]	@ (8003f5c <MX_USB_DEVICE_Init+0x68>)
 8003f28:	f7ff fb24 	bl	8003574 <USBD_RegisterClass>
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	d0ed      	beq.n	8003f0c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8003f30:	f7fc fb6e 	bl	8000610 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003f34:	490b      	ldr	r1, [pc, #44]	@ (8003f64 <MX_USB_DEVICE_Init+0x70>)
 8003f36:	4809      	ldr	r0, [pc, #36]	@ (8003f5c <MX_USB_DEVICE_Init+0x68>)
 8003f38:	f7ff fac8 	bl	80034cc <USBD_CDC_RegisterInterface>
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d0ea      	beq.n	8003f16 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8003f40:	f7fc fb66 	bl	8000610 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003f44:	4805      	ldr	r0, [pc, #20]	@ (8003f5c <MX_USB_DEVICE_Init+0x68>)
 8003f46:	f7ff fb31 	bl	80035ac <USBD_Start>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d0e7      	beq.n	8003f1e <MX_USB_DEVICE_Init+0x2a>
}
 8003f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003f52:	f7fc bb5d 	b.w	8000610 <Error_Handler>
 8003f56:	bf00      	nop
 8003f58:	200000dc 	.word	0x200000dc
 8003f5c:	20000174 	.word	0x20000174
 8003f60:	20000050 	.word	0x20000050
 8003f64:	20000094 	.word	0x20000094

08003f68 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003f68:	2000      	movs	r0, #0
 8003f6a:	4770      	bx	lr

08003f6c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	4770      	bx	lr

08003f70 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8003f70:	2000      	movs	r0, #0
 8003f72:	4770      	bx	lr

08003f74 <CDC_Receive_FS>:
{
 8003f74:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003f76:	4c05      	ldr	r4, [pc, #20]	@ (8003f8c <CDC_Receive_FS+0x18>)
{
 8003f78:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	f7ff fac0 	bl	8003500 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003f80:	4620      	mov	r0, r4
 8003f82:	f7ff fac9 	bl	8003518 <USBD_CDC_ReceivePacket>
}
 8003f86:	2000      	movs	r0, #0
 8003f88:	bd10      	pop	{r4, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000174 	.word	0x20000174

08003f90 <CDC_Init_FS>:
{
 8003f90:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003f92:	4c06      	ldr	r4, [pc, #24]	@ (8003fac <CDC_Init_FS+0x1c>)
 8003f94:	4906      	ldr	r1, [pc, #24]	@ (8003fb0 <CDC_Init_FS+0x20>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f7ff faa3 	bl	80034e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003f9e:	4905      	ldr	r1, [pc, #20]	@ (8003fb4 <CDC_Init_FS+0x24>)
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f7ff faad 	bl	8003500 <USBD_CDC_SetRxBuffer>
}
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	bd10      	pop	{r4, pc}
 8003faa:	bf00      	nop
 8003fac:	20000174 	.word	0x20000174
 8003fb0:	20000450 	.word	0x20000450
 8003fb4:	20000850 	.word	0x20000850

08003fb8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003fb8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003fba:	4801      	ldr	r0, [pc, #4]	@ (8003fc0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003fbc:	800b      	strh	r3, [r1, #0]
}
 8003fbe:	4770      	bx	lr
 8003fc0:	200000c8 	.word	0x200000c8

08003fc4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003fc4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003fc6:	4801      	ldr	r0, [pc, #4]	@ (8003fcc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003fc8:	800b      	strh	r3, [r1, #0]
}
 8003fca:	4770      	bx	lr
 8003fcc:	200000c4 	.word	0x200000c4

08003fd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003fd0:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003fd2:	4c04      	ldr	r4, [pc, #16]	@ (8003fe4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003fd4:	4804      	ldr	r0, [pc, #16]	@ (8003fe8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 8003fd6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003fd8:	4621      	mov	r1, r4
 8003fda:	f7ff ff1f 	bl	8003e1c <USBD_GetString>
  return USBD_StrDesc;
}
 8003fde:	4620      	mov	r0, r4
 8003fe0:	bd10      	pop	{r4, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000c50 	.word	0x20000c50
 8003fe8:	08004388 	.word	0x08004388

08003fec <USBD_FS_ProductStrDescriptor>:
{
 8003fec:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003fee:	4c04      	ldr	r4, [pc, #16]	@ (8004000 <USBD_FS_ProductStrDescriptor+0x14>)
 8003ff0:	4804      	ldr	r0, [pc, #16]	@ (8004004 <USBD_FS_ProductStrDescriptor+0x18>)
{
 8003ff2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	f7ff ff11 	bl	8003e1c <USBD_GetString>
}
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	bd10      	pop	{r4, pc}
 8003ffe:	bf00      	nop
 8004000:	20000c50 	.word	0x20000c50
 8004004:	0800439c 	.word	0x0800439c

08004008 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004008:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800400a:	4c04      	ldr	r4, [pc, #16]	@ (800401c <USBD_FS_ConfigStrDescriptor+0x14>)
 800400c:	4804      	ldr	r0, [pc, #16]	@ (8004020 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 800400e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004010:	4621      	mov	r1, r4
 8004012:	f7ff ff03 	bl	8003e1c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004016:	4620      	mov	r0, r4
 8004018:	bd10      	pop	{r4, pc}
 800401a:	bf00      	nop
 800401c:	20000c50 	.word	0x20000c50
 8004020:	080043b4 	.word	0x080043b4

08004024 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004024:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004026:	4c04      	ldr	r4, [pc, #16]	@ (8004038 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004028:	4804      	ldr	r0, [pc, #16]	@ (800403c <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 800402a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800402c:	4621      	mov	r1, r4
 800402e:	f7ff fef5 	bl	8003e1c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004032:	4620      	mov	r0, r4
 8004034:	bd10      	pop	{r4, pc}
 8004036:	bf00      	nop
 8004038:	20000c50 	.word	0x20000c50
 800403c:	080043c0 	.word	0x080043c0

08004040 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8004040:	231a      	movs	r3, #26
}
 8004042:	4801      	ldr	r0, [pc, #4]	@ (8004048 <USBD_FS_SerialStrDescriptor+0x8>)
  *length = USB_SIZ_STRING_SERIAL;
 8004044:	800b      	strh	r3, [r1, #0]
}
 8004046:	4770      	bx	lr
 8004048:	200000a8 	.word	0x200000a8

0800404c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800404c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 800404e:	6803      	ldr	r3, [r0, #0]
{
 8004050:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004052:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 8004054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004058:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800405c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004060:	9406      	str	r4, [sp, #24]
  if(pcdHandle->Instance==USB_OTG_FS)
 8004062:	d001      	beq.n	8004068 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004064:	b009      	add	sp, #36	@ 0x24
 8004066:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004068:	4d1c      	ldr	r5, [pc, #112]	@ (80040dc <HAL_PCD_MspInit+0x90>)
 800406a:	9400      	str	r4, [sp, #0]
 800406c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800406e:	481c      	ldr	r0, [pc, #112]	@ (80040e0 <HAL_PCD_MspInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	632b      	str	r3, [r5, #48]	@ 0x30
 8004076:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800407e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004080:	f44f 7300 	mov.w	r3, #512	@ 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004084:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004086:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004088:	f7fc fc3c 	bl	8000904 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800408c:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8004090:	2302      	movs	r3, #2
 8004092:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004096:	2200      	movs	r2, #0
 8004098:	2303      	movs	r3, #3
 800409a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800409e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80040a0:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a2:	480f      	ldr	r0, [pc, #60]	@ (80040e0 <HAL_PCD_MspInit+0x94>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80040a4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a6:	f7fc fc2d 	bl	8000904 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80040aa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80040ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b0:	636b      	str	r3, [r5, #52]	@ 0x34
 80040b2:	9401      	str	r4, [sp, #4]
 80040b4:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80040b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040ba:	646b      	str	r3, [r5, #68]	@ 0x44
 80040bc:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80040be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80040c2:	4622      	mov	r2, r4
 80040c4:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80040c6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80040c8:	2043      	movs	r0, #67	@ 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80040ca:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80040cc:	f7fc fbb6 	bl	800083c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80040d0:	2043      	movs	r0, #67	@ 0x43
 80040d2:	f7fc fbef 	bl	80008b4 <HAL_NVIC_EnableIRQ>
}
 80040d6:	b009      	add	sp, #36	@ 0x24
 80040d8:	bd30      	pop	{r4, r5, pc}
 80040da:	bf00      	nop
 80040dc:	40023800 	.word	0x40023800
 80040e0:	40020000 	.word	0x40020000

080040e4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80040e4:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 80040e8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80040ec:	f7ff ba72 	b.w	80035d4 <USBD_LL_SetupStage>

080040f0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80040f0:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80040f4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80040f8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80040fc:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8004100:	f7ff ba98 	b.w	8003634 <USBD_LL_DataOutStage>

08004104 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004104:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004108:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800410c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	f7ff bac9 	b.w	80036a8 <USBD_LL_DataInStage>
 8004116:	bf00      	nop

08004118 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004118:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800411c:	f7ff bb6a 	b.w	80037f4 <USBD_LL_SOF>

08004120 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004120:	b510      	push	{r4, lr}
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004122:	79c3      	ldrb	r3, [r0, #7]
 8004124:	2b02      	cmp	r3, #2
{
 8004126:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004128:	d001      	beq.n	800412e <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800412a:	f7fc fa71 	bl	8000610 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800412e:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8004132:	2101      	movs	r1, #1
 8004134:	f7ff fb40 	bl	80037b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004138:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
}
 800413c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004140:	f7ff bb0c 	b.w	800375c <USBD_LL_Reset>

08004144 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004144:	b510      	push	{r4, lr}
 8004146:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004148:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800414c:	f7ff fb38 	bl	80037c0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004150:	6822      	ldr	r2, [r4, #0]
 8004152:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800415e:	7ae3      	ldrb	r3, [r4, #11]
 8004160:	b123      	cbz	r3, 800416c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004162:	4a03      	ldr	r2, [pc, #12]	@ (8004170 <HAL_PCD_SuspendCallback+0x2c>)
 8004164:	6913      	ldr	r3, [r2, #16]
 8004166:	f043 0306 	orr.w	r3, r3, #6
 800416a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800416c:	bd10      	pop	{r4, pc}
 800416e:	bf00      	nop
 8004170:	e000ed00 	.word	0xe000ed00

08004174 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004174:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004178:	f7ff bb30 	b.w	80037dc <USBD_LL_Resume>

0800417c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800417c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004180:	f7ff bb5e 	b.w	8003840 <USBD_LL_IsoOUTIncomplete>

08004184 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004184:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004188:	f7ff bb44 	b.w	8003814 <USBD_LL_IsoINIncomplete>

0800418c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800418c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004190:	f7ff bb6c 	b.w	800386c <USBD_LL_DevConnected>

08004194 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004194:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004198:	f7ff bb6a 	b.w	8003870 <USBD_LL_DevDisconnected>

0800419c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800419c:	7803      	ldrb	r3, [r0, #0]
 800419e:	b10b      	cbz	r3, 80041a4 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 80041a0:	2000      	movs	r0, #0
 80041a2:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 80041a4:	4b15      	ldr	r3, [pc, #84]	@ (80041fc <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80041a6:	2204      	movs	r2, #4
{
 80041a8:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80041aa:	f44f 7c00 	mov.w	ip, #512	@ 0x200
  hpcd_USB_OTG_FS.pData = pdev;
 80041ae:	f8c3 04e0 	str.w	r0, [r3, #1248]	@ 0x4e0
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80041b2:	f04f 44a0 	mov.w	r4, #1342177280	@ 0x50000000
  pdev->pData = &hpcd_USB_OTG_FS;
 80041b6:	f8c0 32c8 	str.w	r3, [r0, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80041ba:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80041bc:	711a      	strb	r2, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80041be:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80041c0:	2201      	movs	r2, #1
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80041c2:	601c      	str	r4, [r3, #0]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80041c4:	f8a3 c006 	strh.w	ip, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80041c8:	f8c3 1009 	str.w	r1, [r3, #9]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80041cc:	81da      	strh	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80041ce:	f7fc fd57 	bl	8000c80 <HAL_PCD_Init>
 80041d2:	b978      	cbnz	r0, 80041f4 <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80041d4:	2180      	movs	r1, #128	@ 0x80
 80041d6:	4809      	ldr	r0, [pc, #36]	@ (80041fc <USBD_LL_Init+0x60>)
 80041d8:	f7fd fece 	bl	8001f78 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80041dc:	2240      	movs	r2, #64	@ 0x40
 80041de:	2100      	movs	r1, #0
 80041e0:	4806      	ldr	r0, [pc, #24]	@ (80041fc <USBD_LL_Init+0x60>)
 80041e2:	f7fd fe47 	bl	8001e74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80041e6:	2280      	movs	r2, #128	@ 0x80
 80041e8:	2101      	movs	r1, #1
 80041ea:	4804      	ldr	r0, [pc, #16]	@ (80041fc <USBD_LL_Init+0x60>)
 80041ec:	f7fd fe42 	bl	8001e74 <HAL_PCDEx_SetTxFiFo>
}
 80041f0:	2000      	movs	r0, #0
 80041f2:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80041f4:	f7fc fa0c 	bl	8000610 <Error_Handler>
 80041f8:	e7ec      	b.n	80041d4 <USBD_LL_Init+0x38>
 80041fa:	bf00      	nop
 80041fc:	20001070 	.word	0x20001070

08004200 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004200:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8004202:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8004206:	f7fc ff45 	bl	8001094 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800420a:	b118      	cbz	r0, 8004214 <USBD_LL_Start+0x14>
 800420c:	2802      	cmp	r0, #2
 800420e:	bf0c      	ite	eq
 8004210:	2001      	moveq	r0, #1
 8004212:	2003      	movne	r0, #3
}
 8004214:	bd08      	pop	{r3, pc}
 8004216:	bf00      	nop

08004218 <USBD_LL_OpenEP>:
{
 8004218:	4694      	mov	ip, r2
 800421a:	b508      	push	{r3, lr}
 800421c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800421e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8004222:	4663      	mov	r3, ip
 8004224:	f7fd fcea 	bl	8001bfc <HAL_PCD_EP_Open>
  switch (hal_status)
 8004228:	b118      	cbz	r0, 8004232 <USBD_LL_OpenEP+0x1a>
 800422a:	2802      	cmp	r0, #2
 800422c:	bf0c      	ite	eq
 800422e:	2001      	moveq	r0, #1
 8004230:	2003      	movne	r0, #3
}
 8004232:	bd08      	pop	{r3, pc}

08004234 <USBD_LL_CloseEP>:
{
 8004234:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004236:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800423a:	f7fd fd1d 	bl	8001c78 <HAL_PCD_EP_Close>
  switch (hal_status)
 800423e:	b118      	cbz	r0, 8004248 <USBD_LL_CloseEP+0x14>
 8004240:	2802      	cmp	r0, #2
 8004242:	bf0c      	ite	eq
 8004244:	2001      	moveq	r0, #1
 8004246:	2003      	movne	r0, #3
}
 8004248:	bd08      	pop	{r3, pc}
 800424a:	bf00      	nop

0800424c <USBD_LL_StallEP>:
{
 800424c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800424e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8004252:	f7fd fd95 	bl	8001d80 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8004256:	b118      	cbz	r0, 8004260 <USBD_LL_StallEP+0x14>
 8004258:	2802      	cmp	r0, #2
 800425a:	bf0c      	ite	eq
 800425c:	2001      	moveq	r0, #1
 800425e:	2003      	movne	r0, #3
}
 8004260:	bd08      	pop	{r3, pc}
 8004262:	bf00      	nop

08004264 <USBD_LL_ClearStallEP>:
{
 8004264:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004266:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800426a:	f7fd fdcb 	bl	8001e04 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800426e:	b118      	cbz	r0, 8004278 <USBD_LL_ClearStallEP+0x14>
 8004270:	2802      	cmp	r0, #2
 8004272:	bf0c      	ite	eq
 8004274:	2001      	moveq	r0, #1
 8004276:	2003      	movne	r0, #3
}
 8004278:	bd08      	pop	{r3, pc}
 800427a:	bf00      	nop

0800427c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800427c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800427e:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8004282:	d406      	bmi.n	8004292 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004284:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004288:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800428c:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
}
 8004290:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004292:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004296:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800429a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800429e:	7d98      	ldrb	r0, [r3, #22]
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop

080042a4 <USBD_LL_SetUSBAddress>:
{
 80042a4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80042a6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80042aa:	f7fd fc93 	bl	8001bd4 <HAL_PCD_SetAddress>
  switch (hal_status)
 80042ae:	b118      	cbz	r0, 80042b8 <USBD_LL_SetUSBAddress+0x14>
 80042b0:	2802      	cmp	r0, #2
 80042b2:	bf0c      	ite	eq
 80042b4:	2001      	moveq	r0, #1
 80042b6:	2003      	movne	r0, #3
}
 80042b8:	bd08      	pop	{r3, pc}
 80042ba:	bf00      	nop

080042bc <USBD_LL_Transmit>:
{
 80042bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80042be:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80042c2:	f7fd fd39 	bl	8001d38 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80042c6:	b118      	cbz	r0, 80042d0 <USBD_LL_Transmit+0x14>
 80042c8:	2802      	cmp	r0, #2
 80042ca:	bf0c      	ite	eq
 80042cc:	2001      	moveq	r0, #1
 80042ce:	2003      	movne	r0, #3
}
 80042d0:	bd08      	pop	{r3, pc}
 80042d2:	bf00      	nop

080042d4 <USBD_LL_PrepareReceive>:
{
 80042d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80042d6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80042da:	f7fd fd01 	bl	8001ce0 <HAL_PCD_EP_Receive>
  switch (hal_status)
 80042de:	b118      	cbz	r0, 80042e8 <USBD_LL_PrepareReceive+0x14>
 80042e0:	2802      	cmp	r0, #2
 80042e2:	bf0c      	ite	eq
 80042e4:	2001      	moveq	r0, #1
 80042e6:	2003      	movne	r0, #3
}
 80042e8:	bd08      	pop	{r3, pc}
 80042ea:	bf00      	nop

080042ec <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80042ec:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80042f0:	f7fd bd18 	b.w	8001d24 <HAL_PCD_EP_GetRxCount>

080042f4 <USBD_static_malloc>:
}
 80042f4:	4800      	ldr	r0, [pc, #0]	@ (80042f8 <USBD_static_malloc+0x4>)
 80042f6:	4770      	bx	lr
 80042f8:	20000e50 	.word	0x20000e50

080042fc <USBD_static_free>:
}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop

08004300 <memset>:
 8004300:	4402      	add	r2, r0
 8004302:	4603      	mov	r3, r0
 8004304:	4293      	cmp	r3, r2
 8004306:	d100      	bne.n	800430a <memset+0xa>
 8004308:	4770      	bx	lr
 800430a:	f803 1b01 	strb.w	r1, [r3], #1
 800430e:	e7f9      	b.n	8004304 <memset+0x4>

08004310 <__libc_init_array>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	4d0d      	ldr	r5, [pc, #52]	@ (8004348 <__libc_init_array+0x38>)
 8004314:	4c0d      	ldr	r4, [pc, #52]	@ (800434c <__libc_init_array+0x3c>)
 8004316:	1b64      	subs	r4, r4, r5
 8004318:	10a4      	asrs	r4, r4, #2
 800431a:	2600      	movs	r6, #0
 800431c:	42a6      	cmp	r6, r4
 800431e:	d109      	bne.n	8004334 <__libc_init_array+0x24>
 8004320:	4d0b      	ldr	r5, [pc, #44]	@ (8004350 <__libc_init_array+0x40>)
 8004322:	4c0c      	ldr	r4, [pc, #48]	@ (8004354 <__libc_init_array+0x44>)
 8004324:	f000 f818 	bl	8004358 <_init>
 8004328:	1b64      	subs	r4, r4, r5
 800432a:	10a4      	asrs	r4, r4, #2
 800432c:	2600      	movs	r6, #0
 800432e:	42a6      	cmp	r6, r4
 8004330:	d105      	bne.n	800433e <__libc_init_array+0x2e>
 8004332:	bd70      	pop	{r4, r5, r6, pc}
 8004334:	f855 3b04 	ldr.w	r3, [r5], #4
 8004338:	4798      	blx	r3
 800433a:	3601      	adds	r6, #1
 800433c:	e7ee      	b.n	800431c <__libc_init_array+0xc>
 800433e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004342:	4798      	blx	r3
 8004344:	3601      	adds	r6, #1
 8004346:	e7f2      	b.n	800432e <__libc_init_array+0x1e>
 8004348:	080043d8 	.word	0x080043d8
 800434c:	080043d8 	.word	0x080043d8
 8004350:	080043d8 	.word	0x080043d8
 8004354:	080043dc 	.word	0x080043dc

08004358 <_init>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	bf00      	nop
 800435c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435e:	bc08      	pop	{r3}
 8004360:	469e      	mov	lr, r3
 8004362:	4770      	bx	lr

08004364 <_fini>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	bf00      	nop
 8004368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436a:	bc08      	pop	{r3}
 800436c:	469e      	mov	lr, r3
 800436e:	4770      	bx	lr
